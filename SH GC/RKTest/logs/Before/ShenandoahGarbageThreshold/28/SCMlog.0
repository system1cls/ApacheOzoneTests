[0.009s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.009s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.009s][info][gc] Using Shenandoah
[0.011s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.011s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.011s][info][gc,init] CPUs: 4 total, 4 available
[0.011s][info][gc,init] Memory: 7937M
[0.011s][info][gc,init] Large Page Support: Disabled
[0.011s][info][gc,init] NUMA Support: Disabled
[0.011s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.011s][info][gc,init] Heap Min Capacity: 6656K
[0.011s][info][gc,init] Heap Initial Capacity: 127488K
[0.011s][info][gc,init] Heap Max Capacity: 2032128K
[0.011s][info][gc,init] Pre-touch: Disabled
[0.011s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.011s][info][gc,init] Heuristics: Adaptive
[0.011s][info][gc,init] Heap Region Count: 3969
[0.011s][info][gc,init] Heap Region Size: 512K
[0.011s][info][gc,init] TLAB Size Max: 512K
[0.011s][info][gc,init] Humongous Object Threshold: 512K
[0.011s][info][gc,init] Parallel Workers: 8
[0.011s][info][gc,init] Concurrent Workers: 2
[0.019s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007fa0bb000000-0x00007fa0bbc97000-0x00007fa0bbc97000), size 13201408, SharedBaseAddress: 0x00007fa0bb000000, ArchiveRelocationMode: 1.
[0.019s][info][gc,metaspace] Compressed class space mapped at: 0x00007fa0bc000000-0x00007fa0fc000000, reserved size: 1073741824
[0.019s][info][gc,metaspace] Narrow klass base: 0x00007fa0bb000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.309s][info][gc          ] Trigger: Metadata GC Threshold
[1.309s][info][gc,ergo     ] Free: 1790M, Max: 512K regular, 1790M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.309s][info][gc,start    ] GC(0) Concurrent reset
[1.309s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.309s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.310s][info][gc          ] GC(0) Concurrent reset 0.434ms
[1.310s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.311s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.311s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1790M, Non-Taxable: 179M, Alloc Tax Rate: 0.1x
[1.311s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.728ms
[1.311s][info][gc,start    ] GC(0) Concurrent marking roots
[1.311s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.313s][info][gc          ] GC(0) Concurrent marking roots 2.603ms
[1.313s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.313s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.328s][info][gc          ] GC(0) Concurrent marking (unload classes) 14.985ms
[1.329s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.329s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.332s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1893M, Max CSet: 84672K, Min Garbage: 0B
[1.332s][info][gc,ergo     ] GC(0) Collectable Garbage: 81583K (98%), Immediate: 5343K (6%), CSet: 76239K (92%)
[1.332s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 83968K, Free: 1794M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.332s][info][gc          ] GC(0) Pause Final Mark (unload classes) 3.696ms
[1.332s][info][gc,start    ] GC(0) Concurrent thread roots
[1.332s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.333s][info][gc          ] GC(0) Concurrent thread roots 0.452ms
[1.333s][info][gc,start    ] GC(0) Concurrent weak references
[1.333s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.333s][info][gc,ref      ] GC(0) Encountered references: Soft: 3955, Weak: 2127, Final: 20, Phantom: 794
[1.333s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1349, Final: 0, Phantom: 604
[1.333s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 480, Final: 0, Phantom: 315
[1.333s][info][gc          ] GC(0) Concurrent weak references 0.393ms
[1.333s][info][gc,start    ] GC(0) Concurrent weak roots
[1.333s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.336s][info][gc          ] GC(0) Concurrent weak roots 2.373ms
[1.336s][info][gc,start    ] GC(0) Concurrent cleanup
[1.336s][info][gc          ] GC(0) Concurrent cleanup 96M->91M(125M) 0.060ms
[1.336s][info][gc,ergo     ] GC(0) Free: 1794M, Max: 512K regular, 1788M humongous, Frag: 1% external, 0% internal; Reserve: 101232K, Max: 512K
[1.336s][info][gc,start    ] GC(0) Concurrent class unloading
[1.336s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.340s][info][gc          ] GC(0) Concurrent class unloading 4.645ms
[1.340s][info][gc,start    ] GC(0) Concurrent strong roots
[1.340s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.342s][info][gc          ] GC(0) Concurrent strong roots 1.218ms
[1.342s][info][gc,start    ] GC(0) Concurrent evacuation
[1.342s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.349s][info][gc          ] GC(0) Concurrent evacuation 7.734ms
[1.350s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.350s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 101954K, Free: 1794M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.350s][info][gc          ] GC(0) Pause Init Update Refs 0.044ms
[1.350s][info][gc,start    ] GC(0) Concurrent update references
[1.350s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.354s][info][gc          ] GC(0) Concurrent update references 4.580ms
[1.354s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.355s][info][gc          ] GC(0) Concurrent update thread roots 0.250ms
[1.355s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.355s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.355s][info][gc          ] GC(0) Pause Final Update Refs 0.072ms
[1.355s][info][gc,start    ] GC(0) Concurrent cleanup
[1.355s][info][gc          ] GC(0) Concurrent cleanup 99M->17M(133M) 0.079ms
[1.355s][info][gc,ergo     ] Free: 1867M, Max: 512K regular, 1779M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.355s][info][gc,stats    ] 
[1.355s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.355s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.355s][info][gc,stats    ] 
[1.355s][info][gc,stats    ] Concurrent Reset                    468 us
[1.355s][info][gc,stats    ] Pause Init Mark (G)                1166 us
[1.355s][info][gc,stats    ] Pause Init Mark (N)                 747 us
[1.355s][info][gc,stats    ]   Update Region States               29 us
[1.355s][info][gc,stats    ] Concurrent Mark Roots              2641 us, parallelism: 0.94x
[1.355s][info][gc,stats    ]   CMR: <total>                     2492 us
[1.355s][info][gc,stats    ]   CMR: Thread Roots                 746 us, workers (us): 746,   0, ---, ---, ---, ---, ---, ---, 
[1.355s][info][gc,stats    ]   CMR: VM Strong Roots              500 us, workers (us): 500,   0, ---, ---, ---, ---, ---, ---, 
[1.355s][info][gc,stats    ]   CMR: CLDG Roots                  1246 us, workers (us): 1246, ---, ---, ---, ---, ---, ---, ---, 
[1.355s][info][gc,stats    ] Concurrent Marking                15009 us
[1.355s][info][gc,stats    ] Pause Final Mark (G)               3912 us
[1.355s][info][gc,stats    ] Pause Final Mark (N)               3740 us
[1.355s][info][gc,stats    ]   Finish Mark                      3276 us
[1.355s][info][gc,stats    ]   Update Region States               24 us
[1.355s][info][gc,stats    ]   Choose Collection Set             196 us
[1.355s][info][gc,stats    ]   Rebuild Free Set                   27 us
[1.355s][info][gc,stats    ] Concurrent Thread Roots             463 us, parallelism: 0.88x
[1.355s][info][gc,stats    ]   CTR: <total>                      407 us
[1.355s][info][gc,stats    ]   CTR: Thread Roots                 407 us, workers (us): 407,   0, ---, ---, ---, ---, ---, ---, 
[1.355s][info][gc,stats    ] Concurrent Weak References          403 us, parallelism: 1.09x
[1.355s][info][gc,stats    ]   CWRF: <total>                     440 us
[1.355s][info][gc,stats    ]   CWRF: Weak References             440 us, workers (us): 301, 139, ---, ---, ---, ---, ---, ---, 
[1.355s][info][gc,stats    ] Concurrent Weak Roots              2390 us
[1.355s][info][gc,stats    ]   Roots                            2321 us, parallelism: 1.83x
[1.355s][info][gc,stats    ]     CWR: <total>                   4256 us
[1.355s][info][gc,stats    ]     CWR: Code Cache Roots          1459 us, workers (us): 700, 759, ---, ---, ---, ---, ---, ---, 
[1.355s][info][gc,stats    ]     CWR: VM Weak Roots             2784 us, workers (us): 1503, 1280, ---, ---, ---, ---, ---, ---, 
[1.355s][info][gc,stats    ]     CWR: CLDG Roots                  14 us, workers (us): ---,  14, ---, ---, ---, ---, ---, ---, 
[1.355s][info][gc,stats    ]   Rendezvous                         34 us
[1.355s][info][gc,stats    ] Concurrent Cleanup                   69 us
[1.355s][info][gc,stats    ] Concurrent Class Unloading         4660 us
[1.355s][info][gc,stats    ]   Unlink Stale                     1617 us
[1.355s][info][gc,stats    ]     System Dictionary                41 us
[1.355s][info][gc,stats    ]     Weak Class Links                  0 us
[1.355s][info][gc,stats    ]     Code Roots                     1574 us
[1.355s][info][gc,stats    ]   Rendezvous                        136 us
[1.355s][info][gc,stats    ]   Purge Unlinked                   2873 us
[1.355s][info][gc,stats    ]     Code Roots                     2864 us
[1.355s][info][gc,stats    ]     CLDG                              9 us
[1.355s][info][gc,stats    ]     Exception Caches                  0 us
[1.355s][info][gc,stats    ] Concurrent Strong Roots            1228 us, parallelism: 0.96x
[1.355s][info][gc,stats    ]   CSR: <total>                     1182 us
[1.355s][info][gc,stats    ]   CSR: VM Strong Roots               40 us, workers (us):  17,  23, ---, ---, ---, ---, ---, ---, 
[1.355s][info][gc,stats    ]   CSR: CLDG Roots                  1142 us, workers (us): 1142, ---, ---, ---, ---, ---, ---, ---, 
[1.355s][info][gc,stats    ] Concurrent Evacuation              7765 us
[1.355s][info][gc,stats    ] Pause Init Update Refs (G)          278 us
[1.355s][info][gc,stats    ] Pause Init Update Refs (N)           54 us
[1.355s][info][gc,stats    ]   Manage GCLABs                       4 us
[1.355s][info][gc,stats    ] Concurrent Update Refs             4626 us
[1.355s][info][gc,stats    ] Concurrent Update Thread Roots      262 us
[1.355s][info][gc,stats    ] Pause Final Update Refs (G)         190 us
[1.355s][info][gc,stats    ] Pause Final Update Refs (N)          83 us
[1.355s][info][gc,stats    ]   Update Region States               15 us
[1.355s][info][gc,stats    ]   Trash Collection Set                4 us
[1.355s][info][gc,stats    ]   Rebuild Free Set                   17 us
[1.355s][info][gc,stats    ] Concurrent Cleanup                   90 us
[1.355s][info][gc,stats    ] 
[1.355s][info][gc,stats    ] Allocation pacing accrued:
[1.356s][info][gc,stats    ]       0 of  1345 ms (  0.0%): <total>
[1.356s][info][gc,stats    ]       0 of  1345 ms (  0.0%): <average total>
[1.356s][info][gc,stats    ] 
[1.356s][info][gc,metaspace] Metaspace: 21215K(21568K)->21472K(21824K) NonClass: 18878K(19072K)->19095K(19264K) Class: 2337K(2496K)->2377K(2560K)
[1.356s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[7.688s][info][gc          ] Cancelling GC: Stopping VM
[7.688s][info][gc,heap,exit] Heap
[7.688s][info][gc,heap,exit] Shenandoah Heap
[7.688s][info][gc,heap,exit]  1984M max, 1984M soft max, 133M committed, 37937K used
[7.688s][info][gc,heap,exit]  3969 x 512K regions
[7.688s][info][gc,heap,exit] Status: cancelled
[7.688s][info][gc,heap,exit] Reserved region:
[7.688s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[7.688s][info][gc,heap,exit] Collection set:
[7.688s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[7.688s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[7.688s][info][gc,heap,exit] 
[7.688s][info][gc,heap,exit]  Metaspace       used 25408K, committed 25728K, reserved 1114112K
[7.688s][info][gc,heap,exit]   class space    used 2924K, committed 3072K, reserved 1048576K
[7.689s][info][gc,stats    ] 
[7.689s][info][gc,stats    ] GC STATISTICS:
[7.689s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[7.689s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[7.689s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[7.689s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[7.689s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[7.689s][info][gc,stats    ] 
[7.689s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[7.689s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[7.689s][info][gc,stats    ] 
[7.689s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[7.689s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[7.689s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[7.689s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[7.689s][info][gc,stats    ] 
[7.689s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[7.689s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[7.689s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[7.689s][info][gc,stats    ]   Raise max pacing delay with care.
[7.689s][info][gc,stats    ] 
[7.689s][info][gc,stats    ] Concurrent Reset               =    0.000 s (a =      468 us) (n =     1) (lvls, us =      467,      467,      467,      467,      468)
[7.689s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =     1166 us) (n =     1) (lvls, us =     1152,     1152,     1152,     1152,     1166)
[7.689s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      747 us) (n =     1) (lvls, us =      746,      746,      746,      746,      747)
[7.689s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       29 us) (n =     1) (lvls, us =       29,       29,       29,       29,       29)
[7.689s][info][gc,stats    ] Concurrent Mark Roots          =    0.003 s (a =     2641 us) (n =     1) (lvls, us =     2637,     2637,     2637,     2637,     2641)
[7.689s][info][gc,stats    ]   CMR: <total>                 =    0.002 s (a =     2492 us) (n =     1) (lvls, us =     2480,     2480,     2480,     2480,     2492)
[7.690s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =      746 us) (n =     1) (lvls, us =      746,      746,      746,      746,      746)
[7.690s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.000 s (a =      500 us) (n =     1) (lvls, us =      498,      498,      498,      498,      500)
[7.690s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1246 us) (n =     1) (lvls, us =     1230,     1230,     1230,     1230,     1246)
[7.690s][info][gc,stats    ] Concurrent Marking             =    0.015 s (a =    15009 us) (n =     1) (lvls, us =    14844,    14844,    14844,    14844,    15009)
[7.690s][info][gc,stats    ] Pause Final Mark (G)           =    0.004 s (a =     3912 us) (n =     1) (lvls, us =     3906,     3906,     3906,     3906,     3912)
[7.690s][info][gc,stats    ] Pause Final Mark (N)           =    0.004 s (a =     3740 us) (n =     1) (lvls, us =     3730,     3730,     3730,     3730,     3740)
[7.690s][info][gc,stats    ]   Finish Mark                  =    0.003 s (a =     3276 us) (n =     1) (lvls, us =     3262,     3262,     3262,     3262,     3276)
[7.690s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       24 us) (n =     1) (lvls, us =       24,       24,       24,       24,       24)
[7.690s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =      196 us) (n =     1) (lvls, us =      195,      195,      195,      195,      196)
[7.690s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       27 us) (n =     1) (lvls, us =       27,       27,       27,       27,       27)
[7.690s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      463 us) (n =     1) (lvls, us =      461,      461,      461,      461,      463)
[7.690s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      407 us) (n =     1) (lvls, us =      406,      406,      406,      406,      407)
[7.690s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      407 us) (n =     1) (lvls, us =      406,      406,      406,      406,      407)
[7.690s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      403 us) (n =     1) (lvls, us =      402,      402,      402,      402,      403)
[7.690s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      440 us) (n =     1) (lvls, us =      439,      439,      439,      439,      440)
[7.690s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      440 us) (n =     1) (lvls, us =      439,      439,      439,      439,      440)
[7.690s][info][gc,stats    ] Concurrent Weak Roots          =    0.002 s (a =     2390 us) (n =     1) (lvls, us =     2383,     2383,     2383,     2383,     2390)
[7.690s][info][gc,stats    ]   Roots                        =    0.002 s (a =     2321 us) (n =     1) (lvls, us =     2305,     2305,     2305,     2305,     2321)
[7.690s][info][gc,stats    ]     CWR: <total>               =    0.004 s (a =     4256 us) (n =     1) (lvls, us =     4238,     4238,     4238,     4238,     4256)
[7.690s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =     1459 us) (n =     1) (lvls, us =     1445,     1445,     1445,     1445,     1459)
[7.690s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.003 s (a =     2784 us) (n =     1) (lvls, us =     2773,     2773,     2773,     2773,     2784)
[7.690s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       14 us) (n =     1) (lvls, us =       13,       13,       13,       13,       14)
[7.690s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       34 us) (n =     1) (lvls, us =       34,       34,       34,       34,       34)
[7.690s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       69 us) (n =     1) (lvls, us =       69,       69,       69,       69,       69)
[7.690s][info][gc,stats    ] Concurrent Class Unloading     =    0.005 s (a =     4660 us) (n =     1) (lvls, us =     4648,     4648,     4648,     4648,     4660)
[7.690s][info][gc,stats    ]   Unlink Stale                 =    0.002 s (a =     1617 us) (n =     1) (lvls, us =     1602,     1602,     1602,     1602,     1617)
[7.690s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       41 us) (n =     1) (lvls, us =       41,       41,       41,       41,       41)
[7.690s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.690s][info][gc,stats    ]     Code Roots                 =    0.002 s (a =     1574 us) (n =     1) (lvls, us =     1562,     1562,     1562,     1562,     1574)
[7.690s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      136 us) (n =     1) (lvls, us =      135,      135,      135,      135,      136)
[7.690s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     2873 us) (n =     1) (lvls, us =     2871,     2871,     2871,     2871,     2873)
[7.690s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2864 us) (n =     1) (lvls, us =     2852,     2852,     2852,     2852,     2864)
[7.690s][info][gc,stats    ]     CLDG                       =    0.000 s (a =        9 us) (n =     1) (lvls, us =        9,        9,        9,        9,        9)
[7.690s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.691s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1228 us) (n =     1) (lvls, us =     1211,     1211,     1211,     1211,     1228)
[7.691s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1182 us) (n =     1) (lvls, us =     1172,     1172,     1172,     1172,     1182)
[7.691s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       40 us) (n =     1) (lvls, us =       40,       40,       40,       40,       40)
[7.691s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1142 us) (n =     1) (lvls, us =     1133,     1133,     1133,     1133,     1142)
[7.691s][info][gc,stats    ] Concurrent Evacuation          =    0.008 s (a =     7765 us) (n =     1) (lvls, us =     7754,     7754,     7754,     7754,     7765)
[7.691s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      278 us) (n =     1) (lvls, us =      277,      277,      277,      277,      278)
[7.691s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       54 us) (n =     1) (lvls, us =       54,       54,       54,       54,       54)
[7.691s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[7.691s][info][gc,stats    ] Concurrent Update Refs         =    0.005 s (a =     4626 us) (n =     1) (lvls, us =     4609,     4609,     4609,     4609,     4626)
[7.691s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      262 us) (n =     1) (lvls, us =      262,      262,      262,      262,      262)
[7.691s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      190 us) (n =     1) (lvls, us =      189,      189,      189,      189,      190)
[7.691s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =       83 us) (n =     1) (lvls, us =       83,       83,       83,       83,       83)
[7.691s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       15 us) (n =     1) (lvls, us =       15,       15,       15,       15,       15)
[7.691s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[7.691s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[7.691s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       90 us) (n =     1) (lvls, us =       90,       90,       90,       90,       90)
[7.691s][info][gc,stats    ] 
[7.691s][info][gc,stats    ] 
[7.691s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[7.691s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[7.691s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[7.691s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[7.691s][info][gc,stats    ] 
[7.691s][info][gc,stats    ]     1 successful concurrent GCs
[7.691s][info][gc,stats    ]       0 invoked explicitly
[7.691s][info][gc,stats    ]       0 invoked implicitly
[7.691s][info][gc,stats    ] 
[7.691s][info][gc,stats    ]     0 Degenerated GCs
[7.691s][info][gc,stats    ]       0 caused by allocation failure
[7.691s][info][gc,stats    ]       0 upgraded to Full GC
[7.691s][info][gc,stats    ] 
[7.691s][info][gc,stats    ]     0 Full GCs
[7.691s][info][gc,stats    ]       0 invoked explicitly
[7.691s][info][gc,stats    ]       0 invoked implicitly
[7.691s][info][gc,stats    ]       0 caused by allocation failure
[7.691s][info][gc,stats    ]       0 upgraded from Degenerated GC
[7.691s][info][gc,stats    ] 
[7.691s][info][gc,stats    ] 
