[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.004s][info][gc] Using Shenandoah
[0.016s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.019s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.019s][info][gc,init] CPUs: 4 total, 4 available
[0.019s][info][gc,init] Memory: 7937M
[0.019s][info][gc,init] Large Page Support: Disabled
[0.019s][info][gc,init] NUMA Support: Disabled
[0.019s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.019s][info][gc,init] Heap Min Capacity: 6656K
[0.019s][info][gc,init] Heap Initial Capacity: 127488K
[0.019s][info][gc,init] Heap Max Capacity: 2032128K
[0.019s][info][gc,init] Pre-touch: Disabled
[0.019s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.019s][info][gc,init] Heuristics: Adaptive
[0.019s][info][gc,init] Heap Region Count: 3969
[0.019s][info][gc,init] Heap Region Size: 512K
[0.019s][info][gc,init] TLAB Size Max: 512K
[0.019s][info][gc,init] Humongous Object Threshold: 512K
[0.019s][info][gc,init] Parallel Workers: 8
[0.019s][info][gc,init] Concurrent Workers: 2
[0.033s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f1ce3000000-0x00007f1ce3c97000-0x00007f1ce3c97000), size 13201408, SharedBaseAddress: 0x00007f1ce3000000, ArchiveRelocationMode: 1.
[0.033s][info][gc,metaspace] Compressed class space mapped at: 0x00007f1ce4000000-0x00007f1d24000000, reserved size: 1073741824
[0.033s][info][gc,metaspace] Narrow klass base: 0x00007f1ce3000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[2.019s][info][gc          ] Trigger: Metadata GC Threshold
[2.019s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[2.019s][info][gc,start    ] GC(0) Concurrent reset
[2.019s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[2.019s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[2.020s][info][gc          ] GC(0) Concurrent reset 0.582ms
[2.020s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[2.020s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[2.020s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[2.020s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.499ms
[2.020s][info][gc,start    ] GC(0) Concurrent marking roots
[2.021s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[2.022s][info][gc          ] GC(0) Concurrent marking roots 1.573ms
[2.022s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[2.022s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[2.073s][info][gc          ] GC(0) Concurrent marking (unload classes) 50.996ms
[2.073s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[2.073s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[2.074s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1845M, Max CSet: 84672K, Min Garbage: 0B
[2.074s][info][gc,ergo     ] GC(0) Collectable Garbage: 72816K (98%), Immediate: 4847K (6%), CSet: 67969K (91%)
[2.074s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 75776K, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.074s][info][gc          ] GC(0) Pause Final Mark (unload classes) 0.319ms
[2.074s][info][gc,start    ] GC(0) Concurrent thread roots
[2.074s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[2.074s][info][gc          ] GC(0) Concurrent thread roots 0.219ms
[2.074s][info][gc,start    ] GC(0) Concurrent weak references
[2.074s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[2.074s][info][gc,ref      ] GC(0) Encountered references: Soft: 3955, Weak: 2096, Final: 4, Phantom: 820
[2.074s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1282, Final: 0, Phantom: 612
[2.074s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 498, Final: 0, Phantom: 230
[2.074s][info][gc          ] GC(0) Concurrent weak references 0.490ms
[2.074s][info][gc,start    ] GC(0) Concurrent weak roots
[2.074s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[2.076s][info][gc          ] GC(0) Concurrent weak roots 1.537ms
[2.076s][info][gc,start    ] GC(0) Concurrent cleanup
[2.076s][info][gc          ] GC(0) Concurrent cleanup 142M->137M(145M) 0.110ms
[2.076s][info][gc,ergo     ] GC(0) Free: 1745M, Max: 512K regular, 1740M humongous, Frag: 1% external, 0% internal; Reserve: 101053K, Max: 512K
[2.076s][info][gc,start    ] GC(0) Concurrent class unloading
[2.076s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[2.082s][info][gc          ] GC(0) Concurrent class unloading 5.933ms
[2.082s][info][gc,start    ] GC(0) Concurrent strong roots
[2.082s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[2.084s][info][gc          ] GC(0) Concurrent strong roots 1.578ms
[2.084s][info][gc,start    ] GC(0) Concurrent evacuation
[2.084s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[2.093s][info][gc          ] GC(0) Concurrent evacuation 9.352ms
[2.093s][info][gc,start    ] GC(0) Pause Init Update Refs
[2.093s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 147M, Free: 1744M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.093s][info][gc          ] GC(0) Pause Init Update Refs 0.040ms
[2.093s][info][gc,start    ] GC(0) Concurrent update references
[2.093s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[2.110s][info][gc          ] GC(0) Concurrent update references 16.692ms
[2.110s][info][gc,start    ] GC(0) Concurrent update thread roots
[2.110s][info][gc          ] GC(0) Concurrent update thread roots 0.230ms
[2.110s][info][gc,start    ] GC(0) Pause Final Update Refs
[2.110s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[2.110s][info][gc          ] GC(0) Pause Final Update Refs 0.091ms
[2.110s][info][gc,start    ] GC(0) Concurrent cleanup
[2.111s][info][gc          ] GC(0) Concurrent cleanup 147M->73M(154M) 0.195ms
[2.111s][info][gc,ergo     ] Free: 1808M, Max: 512K regular, 1731M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[2.111s][info][gc,stats    ] 
[2.111s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[2.111s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[2.111s][info][gc,stats    ] 
[2.111s][info][gc,stats    ] Concurrent Reset                    676 us
[2.111s][info][gc,stats    ] Pause Init Mark (G)                 696 us
[2.111s][info][gc,stats    ] Pause Init Mark (N)                 519 us
[2.111s][info][gc,stats    ]   Update Region States               18 us
[2.111s][info][gc,stats    ] Concurrent Mark Roots              1663 us, parallelism: 1.69x
[2.111s][info][gc,stats    ]   CMR: <total>                     2815 us
[2.111s][info][gc,stats    ]   CMR: Thread Roots                1192 us, workers (us): 1043, 149, ---, ---, ---, ---, ---, ---, 
[2.111s][info][gc,stats    ]   CMR: VM Strong Roots              483 us, workers (us): 357, 125, ---, ---, ---, ---, ---, ---, 
[2.111s][info][gc,stats    ]   CMR: CLDG Roots                  1141 us, workers (us): ---, 1141, ---, ---, ---, ---, ---, ---, 
[2.111s][info][gc,stats    ] Concurrent Marking                51031 us
[2.111s][info][gc,stats    ] Pause Final Mark (G)                436 us
[2.111s][info][gc,stats    ] Pause Final Mark (N)                328 us
[2.111s][info][gc,stats    ]   Finish Mark                       122 us
[2.112s][info][gc,stats    ]   Update Region States               34 us
[2.112s][info][gc,stats    ]   Choose Collection Set              84 us
[2.112s][info][gc,stats    ]   Rebuild Free Set                   16 us
[2.112s][info][gc,stats    ] Concurrent Thread Roots             253 us, parallelism: 1.27x
[2.112s][info][gc,stats    ]   CTR: <total>                      321 us
[2.112s][info][gc,stats    ]   CTR: Thread Roots                 321 us, workers (us): 179, 142, ---, ---, ---, ---, ---, ---, 
[2.112s][info][gc,stats    ] Concurrent Weak References          502 us, parallelism: 0.84x
[2.112s][info][gc,stats    ]   CWRF: <total>                     422 us
[2.112s][info][gc,stats    ]   CWRF: Weak References             422 us, workers (us):  42, 380, ---, ---, ---, ---, ---, ---, 
[2.112s][info][gc,stats    ] Concurrent Weak Roots              1565 us
[2.112s][info][gc,stats    ]   Roots                            1398 us, parallelism: 1.91x
[2.112s][info][gc,stats    ]     CWR: <total>                   2663 us
[2.112s][info][gc,stats    ]     CWR: Code Cache Roots           720 us, workers (us): 340, 380, ---, ---, ---, ---, ---, ---, 
[2.112s][info][gc,stats    ]     CWR: VM Weak Roots             1927 us, workers (us): 960, 967, ---, ---, ---, ---, ---, ---, 
[2.112s][info][gc,stats    ]     CWR: CLDG Roots                  16 us, workers (us):  16, ---, ---, ---, ---, ---, ---, ---, 
[2.112s][info][gc,stats    ]   Rendezvous                        118 us
[2.112s][info][gc,stats    ] Concurrent Cleanup                  121 us
[2.112s][info][gc,stats    ] Concurrent Class Unloading         5953 us
[2.112s][info][gc,stats    ]   Unlink Stale                     1545 us
[2.112s][info][gc,stats    ]     System Dictionary                46 us
[2.112s][info][gc,stats    ]     Weak Class Links                  0 us
[2.112s][info][gc,stats    ]     Code Roots                     1495 us
[2.112s][info][gc,stats    ]   Rendezvous                        124 us
[2.112s][info][gc,stats    ]   Purge Unlinked                   4242 us
[2.112s][info][gc,stats    ]     Code Roots                     4210 us
[2.112s][info][gc,stats    ]     CLDG                             32 us
[2.112s][info][gc,stats    ]     Exception Caches                  0 us
[2.112s][info][gc,stats    ] Concurrent Strong Roots            1600 us, parallelism: 0.94x
[2.112s][info][gc,stats    ]   CSR: <total>                     1498 us
[2.112s][info][gc,stats    ]   CSR: VM Strong Roots               16 us, workers (us):  16,   0, ---, ---, ---, ---, ---, ---, 
[2.112s][info][gc,stats    ]   CSR: CLDG Roots                  1481 us, workers (us): 1481, ---, ---, ---, ---, ---, ---, ---, 
[2.113s][info][gc,stats    ] Concurrent Evacuation              9401 us
[2.113s][info][gc,stats    ] Pause Init Update Refs (G)           76 us
[2.113s][info][gc,stats    ] Pause Init Update Refs (N)           49 us
[2.113s][info][gc,stats    ]   Manage GCLABs                       5 us
[2.113s][info][gc,stats    ] Concurrent Update Refs            16757 us
[2.113s][info][gc,stats    ] Concurrent Update Thread Roots      270 us
[2.113s][info][gc,stats    ] Pause Final Update Refs (G)         214 us
[2.113s][info][gc,stats    ] Pause Final Update Refs (N)         102 us
[2.113s][info][gc,stats    ]   Update Region States               29 us
[2.113s][info][gc,stats    ]   Trash Collection Set                4 us
[2.113s][info][gc,stats    ]   Rebuild Free Set                   21 us
[2.113s][info][gc,stats    ] Concurrent Cleanup                  242 us
[2.113s][info][gc,stats    ] 
[2.113s][info][gc,stats    ] Allocation pacing accrued:
[2.113s][info][gc,stats    ]       0 of  2097 ms (  0.0%): <total>
[2.113s][info][gc,stats    ]       0 of  2097 ms (  0.0%): <average total>
[2.113s][info][gc,stats    ] 
[2.113s][info][gc,metaspace] Metaspace: 21217K(21568K)->22229K(22528K) NonClass: 18866K(19008K)->19739K(19904K) Class: 2350K(2560K)->2489K(2624K)
[2.113s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.392s][info][gc          ] Cancelling GC: Stopping VM
[6.392s][info][gc,heap,exit] Heap
[6.392s][info][gc,heap,exit] Shenandoah Heap
[6.392s][info][gc,heap,exit]  1984M max, 1984M soft max, 154M committed, 87039K used
[6.392s][info][gc,heap,exit]  3969 x 512K regions
[6.392s][info][gc,heap,exit] Status: cancelled
[6.392s][info][gc,heap,exit] Reserved region:
[6.392s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.392s][info][gc,heap,exit] Collection set:
[6.392s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.392s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.392s][info][gc,heap,exit] 
[6.392s][info][gc,heap,exit]  Metaspace       used 25070K, committed 25408K, reserved 1114112K
[6.392s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.392s][info][gc,stats    ] 
[6.392s][info][gc,stats    ] GC STATISTICS:
[6.392s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.392s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.392s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.392s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.392s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.392s][info][gc,stats    ] 
[6.392s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.392s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.392s][info][gc,stats    ] 
[6.392s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.392s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.392s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.392s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.392s][info][gc,stats    ] 
[6.392s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.392s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.392s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.392s][info][gc,stats    ]   Raise max pacing delay with care.
[6.392s][info][gc,stats    ] 
[6.392s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      676 us) (n =     1) (lvls, us =      676,      676,      676,      676,      676)
[6.392s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      696 us) (n =     1) (lvls, us =      695,      695,      695,      695,      696)
[6.392s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      519 us) (n =     1) (lvls, us =      518,      518,      518,      518,      519)
[6.392s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[6.392s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     1663 us) (n =     1) (lvls, us =     1660,     1660,     1660,     1660,     1663)
[6.392s][info][gc,stats    ]   CMR: <total>                 =    0.003 s (a =     2815 us) (n =     1) (lvls, us =     2812,     2812,     2812,     2812,     2815)
[6.392s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1192 us) (n =     1) (lvls, us =     1191,     1191,     1191,     1191,     1192)
[6.392s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.000 s (a =      483 us) (n =     1) (lvls, us =      482,      482,      482,      482,      483)
[6.392s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1141 us) (n =     1) (lvls, us =     1133,     1133,     1133,     1133,     1141)
[6.393s][info][gc,stats    ] Concurrent Marking             =    0.051 s (a =    51031 us) (n =     1) (lvls, us =    50977,    50977,    50977,    50977,    51031)
[6.393s][info][gc,stats    ] Pause Final Mark (G)           =    0.000 s (a =      436 us) (n =     1) (lvls, us =      436,      436,      436,      436,      436)
[6.393s][info][gc,stats    ] Pause Final Mark (N)           =    0.000 s (a =      328 us) (n =     1) (lvls, us =      326,      326,      326,      326,      328)
[6.393s][info][gc,stats    ]   Finish Mark                  =    0.000 s (a =      122 us) (n =     1) (lvls, us =      121,      121,      121,      121,      122)
[6.393s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       34 us) (n =     1) (lvls, us =       34,       34,       34,       34,       34)
[6.393s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       84 us) (n =     1) (lvls, us =       84,       84,       84,       84,       84)
[6.393s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[6.393s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      253 us) (n =     1) (lvls, us =      252,      252,      252,      252,      253)
[6.393s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      321 us) (n =     1) (lvls, us =      320,      320,      320,      320,      321)
[6.393s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      321 us) (n =     1) (lvls, us =      320,      320,      320,      320,      321)
[6.393s][info][gc,stats    ] Concurrent Weak References     =    0.001 s (a =      502 us) (n =     1) (lvls, us =      500,      500,      500,      500,      502)
[6.393s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      422 us) (n =     1) (lvls, us =      420,      420,      420,      420,      422)
[6.393s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      422 us) (n =     1) (lvls, us =      420,      420,      420,      420,      422)
[6.393s][info][gc,stats    ] Concurrent Weak Roots          =    0.002 s (a =     1565 us) (n =     1) (lvls, us =     1562,     1562,     1562,     1562,     1565)
[6.393s][info][gc,stats    ]   Roots                        =    0.001 s (a =     1398 us) (n =     1) (lvls, us =     1387,     1387,     1387,     1387,     1398)
[6.393s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     2663 us) (n =     1) (lvls, us =     2656,     2656,     2656,     2656,     2663)
[6.393s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      720 us) (n =     1) (lvls, us =      719,      719,      719,      719,      720)
[6.393s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1927 us) (n =     1) (lvls, us =     1914,     1914,     1914,     1914,     1927)
[6.393s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       16 us) (n =     1) (lvls, us =       15,       15,       15,       15,       16)
[6.393s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      118 us) (n =     1) (lvls, us =      117,      117,      117,      117,      118)
[6.393s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      121 us) (n =     1) (lvls, us =      119,      119,      119,      119,      121)
[6.393s][info][gc,stats    ] Concurrent Class Unloading     =    0.006 s (a =     5953 us) (n =     1) (lvls, us =     5938,     5938,     5938,     5938,     5953)
[6.393s][info][gc,stats    ]   Unlink Stale                 =    0.002 s (a =     1545 us) (n =     1) (lvls, us =     1543,     1543,     1543,     1543,     1545)
[6.393s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       46 us) (n =     1) (lvls, us =       46,       46,       46,       46,       46)
[6.393s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.393s][info][gc,stats    ]     Code Roots                 =    0.001 s (a =     1495 us) (n =     1) (lvls, us =     1484,     1484,     1484,     1484,     1495)
[6.393s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      124 us) (n =     1) (lvls, us =      123,      123,      123,      123,      124)
[6.393s][info][gc,stats    ]   Purge Unlinked               =    0.004 s (a =     4242 us) (n =     1) (lvls, us =     4238,     4238,     4238,     4238,     4242)
[6.393s][info][gc,stats    ]     Code Roots                 =    0.004 s (a =     4210 us) (n =     1) (lvls, us =     4199,     4199,     4199,     4199,     4210)
[6.393s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       32 us) (n =     1) (lvls, us =       31,       31,       31,       31,       32)
[6.393s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.393s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     1600 us) (n =     1) (lvls, us =     1582,     1582,     1582,     1582,     1600)
[6.393s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1498 us) (n =     1) (lvls, us =     1484,     1484,     1484,     1484,     1498)
[6.393s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[6.393s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1481 us) (n =     1) (lvls, us =     1465,     1465,     1465,     1465,     1481)
[6.393s][info][gc,stats    ] Concurrent Evacuation          =    0.009 s (a =     9401 us) (n =     1) (lvls, us =     9395,     9395,     9395,     9395,     9401)
[6.393s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =       76 us) (n =     1) (lvls, us =       76,       76,       76,       76,       76)
[6.393s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       49 us) (n =     1) (lvls, us =       49,       49,       49,       49,       49)
[6.393s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.393s][info][gc,stats    ] Concurrent Update Refs         =    0.017 s (a =    16757 us) (n =     1) (lvls, us =    16602,    16602,    16602,    16602,    16757)
[6.393s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      270 us) (n =     1) (lvls, us =      270,      270,      270,      270,      270)
[6.393s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      214 us) (n =     1) (lvls, us =      213,      213,      213,      213,      214)
[6.393s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      102 us) (n =     1) (lvls, us =      102,      102,      102,      102,      102)
[6.393s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       29 us) (n =     1) (lvls, us =       29,       29,       29,       29,       29)
[6.393s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.393s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       21 us) (n =     1) (lvls, us =       21,       21,       21,       21,       21)
[6.393s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      242 us) (n =     1) (lvls, us =      240,      240,      240,      240,      242)
[6.393s][info][gc,stats    ] 
[6.393s][info][gc,stats    ] 
[6.393s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.393s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.393s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.393s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.393s][info][gc,stats    ] 
[6.393s][info][gc,stats    ]     1 successful concurrent GCs
[6.393s][info][gc,stats    ]       0 invoked explicitly
[6.393s][info][gc,stats    ]       0 invoked implicitly
[6.393s][info][gc,stats    ] 
[6.393s][info][gc,stats    ]     0 Degenerated GCs
[6.393s][info][gc,stats    ]       0 caused by allocation failure
[6.393s][info][gc,stats    ]       0 upgraded to Full GC
[6.393s][info][gc,stats    ] 
[6.393s][info][gc,stats    ]     0 Full GCs
[6.393s][info][gc,stats    ]       0 invoked explicitly
[6.393s][info][gc,stats    ]       0 invoked implicitly
[6.393s][info][gc,stats    ]       0 caused by allocation failure
[6.393s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.393s][info][gc,stats    ] 
[6.393s][info][gc,stats    ] 
