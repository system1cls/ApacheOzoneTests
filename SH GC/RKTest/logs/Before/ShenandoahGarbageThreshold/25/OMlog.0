[0.017s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.017s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.018s][info][gc] Using Shenandoah
[0.019s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.020s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.020s][info][gc,init] CPUs: 4 total, 4 available
[0.020s][info][gc,init] Memory: 7937M
[0.020s][info][gc,init] Large Page Support: Disabled
[0.020s][info][gc,init] NUMA Support: Disabled
[0.020s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.020s][info][gc,init] Heap Min Capacity: 6656K
[0.020s][info][gc,init] Heap Initial Capacity: 127488K
[0.020s][info][gc,init] Heap Max Capacity: 2032128K
[0.020s][info][gc,init] Pre-touch: Disabled
[0.020s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.020s][info][gc,init] Heuristics: Adaptive
[0.020s][info][gc,init] Heap Region Count: 3969
[0.020s][info][gc,init] Heap Region Size: 512K
[0.020s][info][gc,init] TLAB Size Max: 512K
[0.020s][info][gc,init] Humongous Object Threshold: 512K
[0.020s][info][gc,init] Parallel Workers: 8
[0.020s][info][gc,init] Concurrent Workers: 2
[0.029s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f59ef000000-0x00007f59efc97000-0x00007f59efc97000), size 13201408, SharedBaseAddress: 0x00007f59ef000000, ArchiveRelocationMode: 1.
[0.030s][info][gc,metaspace] Compressed class space mapped at: 0x00007f59f0000000-0x00007f5a30000000, reserved size: 1073741824
[0.030s][info][gc,metaspace] Narrow klass base: 0x00007f59ef000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.844s][info][gc          ] Trigger: Metadata GC Threshold
[1.844s][info][gc,ergo     ] Free: 1747M, Max: 512K regular, 1747M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.844s][info][gc,start    ] GC(0) Concurrent reset
[1.845s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.845s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.845s][info][gc          ] GC(0) Concurrent reset 0.327ms
[1.845s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.846s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.846s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.846s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.644ms
[1.846s][info][gc,start    ] GC(0) Concurrent marking roots
[1.846s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.848s][info][gc          ] GC(0) Concurrent marking roots 2.173ms
[1.848s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.848s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.907s][info][gc          ] GC(0) Concurrent marking (unload classes) 58.705ms
[1.907s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.907s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.910s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1846M, Max CSet: 84672K, Min Garbage: 0B
[1.910s][info][gc,ergo     ] GC(0) Collectable Garbage: 72068K (98%), Immediate: 4847K (6%), CSet: 67221K (92%)
[1.910s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 75776K, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.910s][info][gc          ] GC(0) Pause Final Mark (unload classes) 3.473ms
[1.910s][info][gc,start    ] GC(0) Concurrent thread roots
[1.910s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.911s][info][gc          ] GC(0) Concurrent thread roots 0.549ms
[1.911s][info][gc,start    ] GC(0) Concurrent weak references
[1.911s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.911s][info][gc,ref      ] GC(0) Encountered references: Soft: 3954, Weak: 2096, Final: 4, Phantom: 820
[1.911s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1309, Final: 4, Phantom: 809
[1.911s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 497, Final: 0, Phantom: 230
[1.911s][info][gc          ] GC(0) Concurrent weak references 0.472ms
[1.911s][info][gc,start    ] GC(0) Concurrent weak roots
[1.911s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.915s][info][gc          ] GC(0) Concurrent weak roots 3.549ms
[1.915s][info][gc,start    ] GC(0) Concurrent cleanup
[1.915s][info][gc          ] GC(0) Concurrent cleanup 142M->137M(145M) 0.110ms
[1.915s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1741M humongous, Frag: 1% external, 0% internal; Reserve: 100980K, Max: 512K
[1.915s][info][gc,start    ] GC(0) Concurrent class unloading
[1.915s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.920s][info][gc          ] GC(0) Concurrent class unloading 5.102ms
[1.920s][info][gc,start    ] GC(0) Concurrent strong roots
[1.920s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.921s][info][gc          ] GC(0) Concurrent strong roots 1.166ms
[1.921s][info][gc,start    ] GC(0) Concurrent evacuation
[1.921s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.927s][info][gc          ] GC(0) Concurrent evacuation 6.080ms
[1.927s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.927s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 147M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.927s][info][gc          ] GC(0) Pause Init Update Refs 0.041ms
[1.927s][info][gc,start    ] GC(0) Concurrent update references
[1.927s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.947s][info][gc          ] GC(0) Concurrent update references 19.831ms
[1.947s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.948s][info][gc          ] GC(0) Concurrent update thread roots 0.388ms
[1.948s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.948s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.948s][info][gc          ] GC(0) Pause Final Update Refs 0.114ms
[1.948s][info][gc,start    ] GC(0) Concurrent cleanup
[1.948s][info][gc          ] GC(0) Concurrent cleanup 148M->74M(154M) 0.093ms
[1.948s][info][gc,ergo     ] Free: 1808M, Max: 512K regular, 1731M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.948s][info][gc,stats    ] 
[1.948s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.948s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.948s][info][gc,stats    ] 
[1.948s][info][gc,stats    ] Concurrent Reset                    341 us
[1.948s][info][gc,stats    ] Pause Init Mark (G)                 903 us
[1.948s][info][gc,stats    ] Pause Init Mark (N)                 667 us
[1.948s][info][gc,stats    ]   Update Region States               37 us
[1.948s][info][gc,stats    ] Concurrent Mark Roots              2194 us, parallelism: 1.76x
[1.948s][info][gc,stats    ]   CMR: <total>                     3865 us
[1.948s][info][gc,stats    ]   CMR: Thread Roots                1389 us, workers (us): 1389,   0, ---, ---, ---, ---, ---, ---, 
[1.948s][info][gc,stats    ]   CMR: VM Strong Roots              679 us, workers (us): 396, 284, ---, ---, ---, ---, ---, ---, 
[1.948s][info][gc,stats    ]   CMR: CLDG Roots                  1796 us, workers (us): ---, 1796, ---, ---, ---, ---, ---, ---, 
[1.948s][info][gc,stats    ] Concurrent Marking                58734 us
[1.948s][info][gc,stats    ] Pause Final Mark (G)               3598 us
[1.948s][info][gc,stats    ] Pause Final Mark (N)               3481 us
[1.948s][info][gc,stats    ]   Finish Mark                      3273 us
[1.948s][info][gc,stats    ]   Update Region States               40 us
[1.948s][info][gc,stats    ]   Choose Collection Set              89 us
[1.948s][info][gc,stats    ]   Rebuild Free Set                   18 us
[1.948s][info][gc,stats    ] Concurrent Thread Roots             566 us, parallelism: 1.09x
[1.948s][info][gc,stats    ]   CTR: <total>                      614 us
[1.948s][info][gc,stats    ]   CTR: Thread Roots                 614 us, workers (us): 502, 112, ---, ---, ---, ---, ---, ---, 
[1.948s][info][gc,stats    ] Concurrent Weak References          480 us, parallelism: 1.34x
[1.948s][info][gc,stats    ]   CWRF: <total>                     642 us
[1.948s][info][gc,stats    ]   CWRF: Weak References             642 us, workers (us): 272, 370, ---, ---, ---, ---, ---, ---, 
[1.948s][info][gc,stats    ] Concurrent Weak Roots              3567 us
[1.948s][info][gc,stats    ]   Roots                            3487 us, parallelism: 0.77x
[1.948s][info][gc,stats    ]     CWR: <total>                   2674 us
[1.948s][info][gc,stats    ]     CWR: Code Cache Roots           746 us, workers (us): 351, 395, ---, ---, ---, ---, ---, ---, 
[1.948s][info][gc,stats    ]     CWR: VM Weak Roots             1907 us, workers (us): 949, 958, ---, ---, ---, ---, ---, ---, 
[1.948s][info][gc,stats    ]     CWR: CLDG Roots                  21 us, workers (us):  21, ---, ---, ---, ---, ---, ---, ---, 
[1.948s][info][gc,stats    ]   Rendezvous                         45 us
[1.948s][info][gc,stats    ] Concurrent Cleanup                  119 us
[1.948s][info][gc,stats    ] Concurrent Class Unloading         5119 us
[1.948s][info][gc,stats    ]   Unlink Stale                     1671 us
[1.948s][info][gc,stats    ]     System Dictionary                39 us
[1.948s][info][gc,stats    ]     Weak Class Links                  0 us
[1.948s][info][gc,stats    ]     Code Roots                     1630 us
[1.948s][info][gc,stats    ]   Rendezvous                         29 us
[1.948s][info][gc,stats    ]   Purge Unlinked                   3384 us
[1.948s][info][gc,stats    ]     Code Roots                     3372 us
[1.948s][info][gc,stats    ]     CLDG                             11 us
[1.948s][info][gc,stats    ]     Exception Caches                  0 us
[1.948s][info][gc,stats    ] Concurrent Strong Roots            1193 us, parallelism: 0.94x
[1.948s][info][gc,stats    ]   CSR: <total>                     1123 us
[1.949s][info][gc,stats    ]   CSR: VM Strong Roots               22 us, workers (us):  22,   0, ---, ---, ---, ---, ---, ---, 
[1.949s][info][gc,stats    ]   CSR: CLDG Roots                  1100 us, workers (us): 1100, ---, ---, ---, ---, ---, ---, ---, 
[1.949s][info][gc,stats    ] Concurrent Evacuation              6103 us
[1.949s][info][gc,stats    ] Pause Init Update Refs (G)           85 us
[1.949s][info][gc,stats    ] Pause Init Update Refs (N)           48 us
[1.949s][info][gc,stats    ]   Manage GCLABs                       5 us
[1.949s][info][gc,stats    ] Concurrent Update Refs            19860 us
[1.949s][info][gc,stats    ] Concurrent Update Thread Roots      398 us
[1.949s][info][gc,stats    ] Pause Final Update Refs (G)         238 us
[1.949s][info][gc,stats    ] Pause Final Update Refs (N)         129 us
[1.949s][info][gc,stats    ]   Update Region States               32 us
[1.949s][info][gc,stats    ]   Trash Collection Set                5 us
[1.949s][info][gc,stats    ]   Rebuild Free Set                   26 us
[1.949s][info][gc,stats    ] Concurrent Cleanup                  103 us
[1.949s][info][gc,stats    ] 
[1.949s][info][gc,stats    ] Allocation pacing accrued:
[1.949s][info][gc,stats    ]       0 of  1930 ms (  0.0%): <total>
[1.949s][info][gc,stats    ]       0 of  1930 ms (  0.0%): <average total>
[1.949s][info][gc,stats    ] 
[1.949s][info][gc,metaspace] Metaspace: 21215K(21632K)->22567K(22912K) NonClass: 18863K(19072K)->20043K(20224K) Class: 2351K(2560K)->2523K(2688K)
[1.949s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.210s][info][gc          ] Cancelling GC: Stopping VM
[6.210s][info][gc,heap,exit] Heap
[6.210s][info][gc,heap,exit] Shenandoah Heap
[6.210s][info][gc,heap,exit]  1984M max, 1984M soft max, 154M committed, 86463K used
[6.211s][info][gc,heap,exit]  3969 x 512K regions
[6.211s][info][gc,heap,exit] Status: cancelled
[6.211s][info][gc,heap,exit] Reserved region:
[6.211s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.211s][info][gc,heap,exit] Collection set:
[6.211s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.211s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.211s][info][gc,heap,exit] 
[6.211s][info][gc,heap,exit]  Metaspace       used 25067K, committed 25408K, reserved 1114112K
[6.211s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.211s][info][gc,stats    ] 
[6.211s][info][gc,stats    ] GC STATISTICS:
[6.211s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.211s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.211s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.211s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.211s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.211s][info][gc,stats    ] 
[6.211s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.211s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.211s][info][gc,stats    ] 
[6.211s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.211s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.211s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.211s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.211s][info][gc,stats    ] 
[6.211s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.211s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.211s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.211s][info][gc,stats    ]   Raise max pacing delay with care.
[6.211s][info][gc,stats    ] 
[6.211s][info][gc,stats    ] Concurrent Reset               =    0.000 s (a =      341 us) (n =     1) (lvls, us =      340,      340,      340,      340,      341)
[6.211s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      903 us) (n =     1) (lvls, us =      902,      902,      902,      902,      903)
[6.211s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      667 us) (n =     1) (lvls, us =      666,      666,      666,      666,      667)
[6.211s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       37 us) (n =     1) (lvls, us =       37,       37,       37,       37,       37)
[6.211s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     2194 us) (n =     1) (lvls, us =     2188,     2188,     2188,     2188,     2194)
[6.211s][info][gc,stats    ]   CMR: <total>                 =    0.004 s (a =     3865 us) (n =     1) (lvls, us =     3848,     3848,     3848,     3848,     3865)
[6.211s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1389 us) (n =     1) (lvls, us =     1387,     1387,     1387,     1387,     1389)
[6.211s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      679 us) (n =     1) (lvls, us =      678,      678,      678,      678,      679)
[6.211s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     1796 us) (n =     1) (lvls, us =     1777,     1777,     1777,     1777,     1796)
[6.211s][info][gc,stats    ] Concurrent Marking             =    0.059 s (a =    58734 us) (n =     1) (lvls, us =    58594,    58594,    58594,    58594,    58734)
[6.211s][info][gc,stats    ] Pause Final Mark (G)           =    0.004 s (a =     3598 us) (n =     1) (lvls, us =     3594,     3594,     3594,     3594,     3598)
[6.211s][info][gc,stats    ] Pause Final Mark (N)           =    0.003 s (a =     3481 us) (n =     1) (lvls, us =     3477,     3477,     3477,     3477,     3481)
[6.211s][info][gc,stats    ]   Finish Mark                  =    0.003 s (a =     3273 us) (n =     1) (lvls, us =     3262,     3262,     3262,     3262,     3273)
[6.211s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       40 us) (n =     1) (lvls, us =       40,       40,       40,       40,       40)
[6.211s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       89 us) (n =     1) (lvls, us =       89,       89,       89,       89,       89)
[6.211s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[6.211s][info][gc,stats    ] Concurrent Thread Roots        =    0.001 s (a =      566 us) (n =     1) (lvls, us =      564,      564,      564,      564,      566)
[6.211s][info][gc,stats    ]   CTR: <total>                 =    0.001 s (a =      614 us) (n =     1) (lvls, us =      613,      613,      613,      613,      614)
[6.211s][info][gc,stats    ]   CTR: Thread Roots            =    0.001 s (a =      614 us) (n =     1) (lvls, us =      613,      613,      613,      613,      614)
[6.211s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      480 us) (n =     1) (lvls, us =      479,      479,      479,      479,      480)
[6.211s][info][gc,stats    ]   CWRF: <total>                =    0.001 s (a =      642 us) (n =     1) (lvls, us =      641,      641,      641,      641,      642)
[6.211s][info][gc,stats    ]   CWRF: Weak References        =    0.001 s (a =      642 us) (n =     1) (lvls, us =      641,      641,      641,      641,      642)
[6.212s][info][gc,stats    ] Concurrent Weak Roots          =    0.004 s (a =     3567 us) (n =     1) (lvls, us =     3555,     3555,     3555,     3555,     3567)
[6.212s][info][gc,stats    ]   Roots                        =    0.003 s (a =     3487 us) (n =     1) (lvls, us =     3477,     3477,     3477,     3477,     3487)
[6.212s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     2674 us) (n =     1) (lvls, us =     2656,     2656,     2656,     2656,     2674)
[6.212s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      746 us) (n =     1) (lvls, us =      744,      744,      744,      744,      746)
[6.212s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1907 us) (n =     1) (lvls, us =     1895,     1895,     1895,     1895,     1907)
[6.212s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       21 us) (n =     1) (lvls, us =       21,       21,       21,       21,       21)
[6.212s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       45 us) (n =     1) (lvls, us =       45,       45,       45,       45,       45)
[6.212s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      119 us) (n =     1) (lvls, us =      117,      117,      117,      117,      119)
[6.212s][info][gc,stats    ] Concurrent Class Unloading     =    0.005 s (a =     5119 us) (n =     1) (lvls, us =     5117,     5117,     5117,     5117,     5119)
[6.212s][info][gc,stats    ]   Unlink Stale                 =    0.002 s (a =     1671 us) (n =     1) (lvls, us =     1660,     1660,     1660,     1660,     1671)
[6.212s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       39 us) (n =     1) (lvls, us =       39,       39,       39,       39,       39)
[6.212s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.212s][info][gc,stats    ]     Code Roots                 =    0.002 s (a =     1630 us) (n =     1) (lvls, us =     1621,     1621,     1621,     1621,     1630)
[6.212s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       29 us) (n =     1) (lvls, us =       28,       28,       28,       28,       29)
[6.212s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     3384 us) (n =     1) (lvls, us =     3379,     3379,     3379,     3379,     3384)
[6.212s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     3372 us) (n =     1) (lvls, us =     3359,     3359,     3359,     3359,     3372)
[6.212s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       11 us) (n =     1) (lvls, us =       11,       11,       11,       11,       11)
[6.212s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.212s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1193 us) (n =     1) (lvls, us =     1191,     1191,     1191,     1191,     1193)
[6.212s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1123 us) (n =     1) (lvls, us =     1113,     1113,     1113,     1113,     1123)
[6.212s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       22 us) (n =     1) (lvls, us =       22,       22,       22,       22,       22)
[6.212s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1100 us) (n =     1) (lvls, us =     1094,     1094,     1094,     1094,     1100)
[6.212s][info][gc,stats    ] Concurrent Evacuation          =    0.006 s (a =     6103 us) (n =     1) (lvls, us =     6094,     6094,     6094,     6094,     6103)
[6.212s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =       85 us) (n =     1) (lvls, us =       85,       85,       85,       85,       85)
[6.212s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       48 us) (n =     1) (lvls, us =       48,       48,       48,       48,       48)
[6.212s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.212s][info][gc,stats    ] Concurrent Update Refs         =    0.020 s (a =    19860 us) (n =     1) (lvls, us =    19727,    19727,    19727,    19727,    19860)
[6.212s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      398 us) (n =     1) (lvls, us =      396,      396,      396,      396,      398)
[6.212s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      238 us) (n =     1) (lvls, us =      236,      236,      236,      236,      238)
[6.212s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      129 us) (n =     1) (lvls, us =      127,      127,      127,      127,      129)
[6.212s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       32 us) (n =     1) (lvls, us =       32,       32,       32,       32,       32)
[6.212s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.212s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       26 us) (n =     1) (lvls, us =       26,       26,       26,       26,       26)
[6.212s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      103 us) (n =     1) (lvls, us =      102,      102,      102,      102,      103)
[6.212s][info][gc,stats    ] 
[6.212s][info][gc,stats    ] 
[6.212s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.212s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.212s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.212s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.212s][info][gc,stats    ] 
[6.212s][info][gc,stats    ]     1 successful concurrent GCs
[6.212s][info][gc,stats    ]       0 invoked explicitly
[6.212s][info][gc,stats    ]       0 invoked implicitly
[6.212s][info][gc,stats    ] 
[6.212s][info][gc,stats    ]     0 Degenerated GCs
[6.212s][info][gc,stats    ]       0 caused by allocation failure
[6.212s][info][gc,stats    ]       0 upgraded to Full GC
[6.212s][info][gc,stats    ] 
[6.212s][info][gc,stats    ]     0 Full GCs
[6.212s][info][gc,stats    ]       0 invoked explicitly
[6.212s][info][gc,stats    ]       0 invoked implicitly
[6.212s][info][gc,stats    ]       0 caused by allocation failure
[6.212s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.212s][info][gc,stats    ] 
[6.212s][info][gc,stats    ] 
