[0.006s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.006s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.006s][info][gc] Using Shenandoah
[0.007s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.007s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.007s][info][gc,init] CPUs: 4 total, 4 available
[0.007s][info][gc,init] Memory: 7937M
[0.007s][info][gc,init] Large Page Support: Disabled
[0.007s][info][gc,init] NUMA Support: Disabled
[0.007s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.007s][info][gc,init] Heap Min Capacity: 6656K
[0.007s][info][gc,init] Heap Initial Capacity: 127488K
[0.007s][info][gc,init] Heap Max Capacity: 2032128K
[0.007s][info][gc,init] Pre-touch: Disabled
[0.007s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.007s][info][gc,init] Heuristics: Adaptive
[0.007s][info][gc,init] Heap Region Count: 3969
[0.007s][info][gc,init] Heap Region Size: 512K
[0.007s][info][gc,init] TLAB Size Max: 512K
[0.007s][info][gc,init] Humongous Object Threshold: 512K
[0.007s][info][gc,init] Parallel Workers: 8
[0.007s][info][gc,init] Concurrent Workers: 2
[0.016s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f87ff000000-0x00007f87ffc97000-0x00007f87ffc97000), size 13201408, SharedBaseAddress: 0x00007f87ff000000, ArchiveRelocationMode: 1.
[0.016s][info][gc,metaspace] Compressed class space mapped at: 0x00007f8800000000-0x00007f8840000000, reserved size: 1073741824
[0.016s][info][gc,metaspace] Narrow klass base: 0x00007f87ff000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.898s][info][gc          ] Trigger: Metadata GC Threshold
[1.898s][info][gc,ergo     ] Free: 1747M, Max: 512K regular, 1747M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.898s][info][gc,start    ] GC(0) Concurrent reset
[1.898s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.898s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.899s][info][gc          ] GC(0) Concurrent reset 0.719ms
[1.899s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.900s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.900s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.900s][info][gc          ] GC(0) Pause Init Mark (unload classes) 1.028ms
[1.900s][info][gc,start    ] GC(0) Concurrent marking roots
[1.900s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.903s][info][gc          ] GC(0) Concurrent marking roots 3.177ms
[1.903s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.904s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.949s][info][gc          ] GC(0) Concurrent marking (unload classes) 45.654ms
[1.949s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.949s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.951s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1846M, Max CSet: 84672K, Min Garbage: 0B
[1.951s][info][gc,ergo     ] GC(0) Collectable Garbage: 72560K (98%), Immediate: 5359K (7%), CSet: 67201K (91%)
[1.951s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 75264K, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.951s][info][gc          ] GC(0) Pause Final Mark (unload classes) 1.527ms
[1.951s][info][gc,start    ] GC(0) Concurrent thread roots
[1.951s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.951s][info][gc          ] GC(0) Concurrent thread roots 0.383ms
[1.951s][info][gc,start    ] GC(0) Concurrent weak references
[1.951s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.952s][info][gc,ref      ] GC(0) Encountered references: Soft: 3956, Weak: 2102, Final: 4, Phantom: 822
[1.952s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1315, Final: 4, Phantom: 563
[1.952s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 501, Final: 0, Phantom: 231
[1.952s][info][gc          ] GC(0) Concurrent weak references 0.443ms
[1.952s][info][gc,start    ] GC(0) Concurrent weak roots
[1.952s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.953s][info][gc          ] GC(0) Concurrent weak roots 1.547ms
[1.953s][info][gc,start    ] GC(0) Concurrent cleanup
[1.954s][info][gc          ] GC(0) Concurrent cleanup 142M->137M(145M) 0.147ms
[1.954s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1741M humongous, Frag: 1% external, 0% internal; Reserve: 100853K, Max: 512K
[1.954s][info][gc,start    ] GC(0) Concurrent class unloading
[1.954s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.965s][info][gc          ] GC(0) Concurrent class unloading 11.050ms
[1.965s][info][gc,start    ] GC(0) Concurrent strong roots
[1.965s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.966s][info][gc          ] GC(0) Concurrent strong roots 1.572ms
[1.966s][info][gc,start    ] GC(0) Concurrent evacuation
[1.966s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.972s][info][gc          ] GC(0) Concurrent evacuation 6.076ms
[1.973s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.973s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 146M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.973s][info][gc          ] GC(0) Pause Init Update Refs 0.047ms
[1.973s][info][gc,start    ] GC(0) Concurrent update references
[1.973s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.990s][info][gc          ] GC(0) Concurrent update references 17.622ms
[1.990s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.991s][info][gc          ] GC(0) Concurrent update thread roots 0.132ms
[1.991s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.991s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.991s][info][gc          ] GC(0) Pause Final Update Refs 0.097ms
[1.991s][info][gc,start    ] GC(0) Concurrent cleanup
[1.991s][info][gc          ] GC(0) Concurrent cleanup 146M->72M(153M) 0.105ms
[1.991s][info][gc,ergo     ] Free: 1809M, Max: 512K regular, 1731M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.991s][info][gc,stats    ] 
[1.991s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.991s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.991s][info][gc,stats    ] 
[1.991s][info][gc,stats    ] Concurrent Reset                    825 us
[1.991s][info][gc,stats    ] Pause Init Mark (G)                1414 us
[1.991s][info][gc,stats    ] Pause Init Mark (N)                1071 us
[1.991s][info][gc,stats    ]   Update Region States               47 us
[1.991s][info][gc,stats    ] Concurrent Mark Roots              3231 us, parallelism: 1.43x
[1.991s][info][gc,stats    ]   CMR: <total>                     4614 us
[1.991s][info][gc,stats    ]   CMR: Thread Roots                1287 us, workers (us): 1287,   0, ---, ---, ---, ---, ---, ---, 
[1.991s][info][gc,stats    ]   CMR: VM Strong Roots              823 us, workers (us): 417, 406, ---, ---, ---, ---, ---, ---, 
[1.991s][info][gc,stats    ]   CMR: CLDG Roots                  2504 us, workers (us): ---, 2504, ---, ---, ---, ---, ---, ---, 
[1.991s][info][gc,stats    ] Concurrent Marking                45721 us
[1.991s][info][gc,stats    ] Pause Final Mark (G)               1688 us
[1.991s][info][gc,stats    ] Pause Final Mark (N)               1570 us
[1.991s][info][gc,stats    ]   Finish Mark                      1153 us
[1.991s][info][gc,stats    ]   Update Region States               42 us
[1.991s][info][gc,stats    ]   Choose Collection Set             154 us
[1.991s][info][gc,stats    ]   Rebuild Free Set                   34 us
[1.991s][info][gc,stats    ] Concurrent Thread Roots             396 us, parallelism: 1.16x
[1.991s][info][gc,stats    ]   CTR: <total>                      461 us
[1.991s][info][gc,stats    ]   CTR: Thread Roots                 461 us, workers (us): 330, 130, ---, ---, ---, ---, ---, ---, 
[1.991s][info][gc,stats    ] Concurrent Weak References          454 us, parallelism: 0.98x
[1.991s][info][gc,stats    ]   CWRF: <total>                     444 us
[1.991s][info][gc,stats    ]   CWRF: Weak References             444 us, workers (us): 132, 311, ---, ---, ---, ---, ---, ---, 
[1.991s][info][gc,stats    ] Concurrent Weak Roots              1610 us
[1.991s][info][gc,stats    ]   Roots                            1491 us, parallelism: 1.89x
[1.991s][info][gc,stats    ]     CWR: <total>                   2817 us
[1.991s][info][gc,stats    ]     CWR: Code Cache Roots           796 us, workers (us): 422, 374, ---, ---, ---, ---, ---, ---, 
[1.991s][info][gc,stats    ]     CWR: VM Weak Roots             2002 us, workers (us): 1012, 991, ---, ---, ---, ---, ---, ---, 
[1.991s][info][gc,stats    ]     CWR: CLDG Roots                  18 us, workers (us): ---,  18, ---, ---, ---, ---, ---, ---, 
[1.991s][info][gc,stats    ]   Rendezvous                         37 us
[1.991s][info][gc,stats    ] Concurrent Cleanup                  187 us
[1.991s][info][gc,stats    ] Concurrent Class Unloading        11086 us
[1.991s][info][gc,stats    ]   Unlink Stale                     1671 us
[1.991s][info][gc,stats    ]     System Dictionary               191 us
[1.991s][info][gc,stats    ]     Weak Class Links                  1 us
[1.991s][info][gc,stats    ]     Code Roots                     1478 us
[1.991s][info][gc,stats    ]   Rendezvous                        145 us
[1.991s][info][gc,stats    ]   Purge Unlinked                   9085 us
[1.991s][info][gc,stats    ]     Code Roots                     9037 us
[1.991s][info][gc,stats    ]     CLDG                             47 us
[1.991s][info][gc,stats    ]     Exception Caches                  0 us
[1.991s][info][gc,stats    ] Concurrent Strong Roots            1608 us, parallelism: 0.70x
[1.991s][info][gc,stats    ]   CSR: <total>                     1126 us
[1.991s][info][gc,stats    ]   CSR: VM Strong Roots               18 us, workers (us):  17,   0, ---, ---, ---, ---, ---, ---, 
[1.991s][info][gc,stats    ]   CSR: CLDG Roots                  1108 us, workers (us): 1108, ---, ---, ---, ---, ---, ---, ---, 
[1.991s][info][gc,stats    ] Concurrent Evacuation              6105 us
[1.992s][info][gc,stats    ] Pause Init Update Refs (G)          322 us
[1.992s][info][gc,stats    ] Pause Init Update Refs (N)           57 us
[1.992s][info][gc,stats    ]   Manage GCLABs                       5 us
[1.992s][info][gc,stats    ] Concurrent Update Refs            17657 us
[1.992s][info][gc,stats    ] Concurrent Update Thread Roots      146 us
[1.992s][info][gc,stats    ] Pause Final Update Refs (G)         232 us
[1.992s][info][gc,stats    ] Pause Final Update Refs (N)         113 us
[1.992s][info][gc,stats    ]   Update Region States               29 us
[1.992s][info][gc,stats    ]   Trash Collection Set                4 us
[1.992s][info][gc,stats    ]   Rebuild Free Set                   21 us
[1.992s][info][gc,stats    ] Concurrent Cleanup                  129 us
[1.992s][info][gc,stats    ] 
[1.992s][info][gc,stats    ] Allocation pacing accrued:
[1.992s][info][gc,stats    ]       0 of  1985 ms (  0.0%): <total>
[1.992s][info][gc,stats    ]       0 of  1985 ms (  0.0%): <average total>
[1.992s][info][gc,stats    ] 
[1.992s][info][gc,metaspace] Metaspace: 21252K(21632K)->22213K(22528K) NonClass: 18901K(19072K)->19731K(19904K) Class: 2351K(2560K)->2481K(2624K)
[1.992s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.263s][info][gc          ] Cancelling GC: Stopping VM
[6.264s][info][gc,heap,exit] Heap
[6.264s][info][gc,heap,exit] Shenandoah Heap
[6.264s][info][gc,heap,exit]  1984M max, 1984M soft max, 153M committed, 86518K used
[6.264s][info][gc,heap,exit]  3969 x 512K regions
[6.264s][info][gc,heap,exit] Status: cancelled
[6.264s][info][gc,heap,exit] Reserved region:
[6.264s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.264s][info][gc,heap,exit] Collection set:
[6.264s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.264s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.264s][info][gc,heap,exit] 
[6.264s][info][gc,heap,exit]  Metaspace       used 25106K, committed 25408K, reserved 1114112K
[6.264s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.264s][info][gc,stats    ] 
[6.264s][info][gc,stats    ] GC STATISTICS:
[6.264s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.264s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.264s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.264s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.264s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.264s][info][gc,stats    ] 
[6.264s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.264s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.264s][info][gc,stats    ] 
[6.264s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.264s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.264s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.264s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.264s][info][gc,stats    ] 
[6.264s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.264s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.264s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.264s][info][gc,stats    ]   Raise max pacing delay with care.
[6.264s][info][gc,stats    ] 
[6.264s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      825 us) (n =     1) (lvls, us =      824,      824,      824,      824,      825)
[6.264s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =     1414 us) (n =     1) (lvls, us =     1406,     1406,     1406,     1406,     1414)
[6.264s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =     1071 us) (n =     1) (lvls, us =     1055,     1055,     1055,     1055,     1071)
[6.264s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       47 us) (n =     1) (lvls, us =       46,       46,       46,       46,       47)
[6.264s][info][gc,stats    ] Concurrent Mark Roots          =    0.003 s (a =     3231 us) (n =     1) (lvls, us =     3223,     3223,     3223,     3223,     3231)
[6.264s][info][gc,stats    ]   CMR: <total>                 =    0.005 s (a =     4614 us) (n =     1) (lvls, us =     4609,     4609,     4609,     4609,     4614)
[6.264s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1287 us) (n =     1) (lvls, us =     1270,     1270,     1270,     1270,     1287)
[6.264s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      823 us) (n =     1) (lvls, us =      822,      822,      822,      822,      823)
[6.264s][info][gc,stats    ]   CMR: CLDG Roots              =    0.003 s (a =     2504 us) (n =     1) (lvls, us =     2500,     2500,     2500,     2500,     2504)
[6.264s][info][gc,stats    ] Concurrent Marking             =    0.046 s (a =    45721 us) (n =     1) (lvls, us =    45703,    45703,    45703,    45703,    45721)
[6.264s][info][gc,stats    ] Pause Final Mark (G)           =    0.002 s (a =     1688 us) (n =     1) (lvls, us =     1680,     1680,     1680,     1680,     1688)
[6.264s][info][gc,stats    ] Pause Final Mark (N)           =    0.002 s (a =     1570 us) (n =     1) (lvls, us =     1562,     1562,     1562,     1562,     1570)
[6.264s][info][gc,stats    ]   Finish Mark                  =    0.001 s (a =     1153 us) (n =     1) (lvls, us =     1152,     1152,     1152,     1152,     1153)
[6.264s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       42 us) (n =     1) (lvls, us =       42,       42,       42,       42,       42)
[6.264s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =      154 us) (n =     1) (lvls, us =      152,      152,      152,      152,      154)
[6.264s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       34 us) (n =     1) (lvls, us =       34,       34,       34,       34,       34)
[6.264s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      396 us) (n =     1) (lvls, us =      395,      395,      395,      395,      396)
[6.264s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      461 us) (n =     1) (lvls, us =      459,      459,      459,      459,      461)
[6.264s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      461 us) (n =     1) (lvls, us =      459,      459,      459,      459,      461)
[6.264s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      454 us) (n =     1) (lvls, us =      453,      453,      453,      453,      454)
[6.264s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      444 us) (n =     1) (lvls, us =      443,      443,      443,      443,      444)
[6.264s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      444 us) (n =     1) (lvls, us =      443,      443,      443,      443,      444)
[6.264s][info][gc,stats    ] Concurrent Weak Roots          =    0.002 s (a =     1610 us) (n =     1) (lvls, us =     1602,     1602,     1602,     1602,     1610)
[6.264s][info][gc,stats    ]   Roots                        =    0.001 s (a =     1491 us) (n =     1) (lvls, us =     1484,     1484,     1484,     1484,     1491)
[6.264s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     2817 us) (n =     1) (lvls, us =     2812,     2812,     2812,     2812,     2817)
[6.264s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      796 us) (n =     1) (lvls, us =      795,      795,      795,      795,      796)
[6.264s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     2002 us) (n =     1) (lvls, us =     1992,     1992,     1992,     1992,     2002)
[6.264s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[6.264s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       37 us) (n =     1) (lvls, us =       37,       37,       37,       37,       37)
[6.264s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      187 us) (n =     1) (lvls, us =      186,      186,      186,      186,      187)
[6.264s][info][gc,stats    ] Concurrent Class Unloading     =    0.011 s (a =    11086 us) (n =     1) (lvls, us =    10938,    10938,    10938,    10938,    11086)
[6.264s][info][gc,stats    ]   Unlink Stale                 =    0.002 s (a =     1671 us) (n =     1) (lvls, us =     1660,     1660,     1660,     1660,     1671)
[6.264s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =      191 us) (n =     1) (lvls, us =      191,      191,      191,      191,      191)
[6.264s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        1 us) (n =     1) (lvls, us =        1,        1,        1,        1,        1)
[6.264s][info][gc,stats    ]     Code Roots                 =    0.001 s (a =     1478 us) (n =     1) (lvls, us =     1465,     1465,     1465,     1465,     1478)
[6.264s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      145 us) (n =     1) (lvls, us =      145,      145,      145,      145,      145)
[6.264s][info][gc,stats    ]   Purge Unlinked               =    0.009 s (a =     9085 us) (n =     1) (lvls, us =     9082,     9082,     9082,     9082,     9085)
[6.264s][info][gc,stats    ]     Code Roots                 =    0.009 s (a =     9037 us) (n =     1) (lvls, us =     9023,     9023,     9023,     9023,     9037)
[6.264s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       47 us) (n =     1) (lvls, us =       46,       46,       46,       46,       47)
[6.264s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.264s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     1608 us) (n =     1) (lvls, us =     1602,     1602,     1602,     1602,     1608)
[6.264s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1126 us) (n =     1) (lvls, us =     1113,     1113,     1113,     1113,     1126)
[6.264s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[6.264s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1108 us) (n =     1) (lvls, us =     1094,     1094,     1094,     1094,     1108)
[6.264s][info][gc,stats    ] Concurrent Evacuation          =    0.006 s (a =     6105 us) (n =     1) (lvls, us =     6094,     6094,     6094,     6094,     6105)
[6.264s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      322 us) (n =     1) (lvls, us =      320,      320,      320,      320,      322)
[6.264s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       57 us) (n =     1) (lvls, us =       56,       56,       56,       56,       57)
[6.264s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.264s][info][gc,stats    ] Concurrent Update Refs         =    0.018 s (a =    17657 us) (n =     1) (lvls, us =    17578,    17578,    17578,    17578,    17657)
[6.264s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      146 us) (n =     1) (lvls, us =      145,      145,      145,      145,      146)
[6.264s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      232 us) (n =     1) (lvls, us =      230,      230,      230,      230,      232)
[6.264s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      113 us) (n =     1) (lvls, us =      111,      111,      111,      111,      113)
[6.264s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       29 us) (n =     1) (lvls, us =       29,       29,       29,       29,       29)
[6.264s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.264s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       21 us) (n =     1) (lvls, us =       21,       21,       21,       21,       21)
[6.264s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      129 us) (n =     1) (lvls, us =      127,      127,      127,      127,      129)
[6.264s][info][gc,stats    ] 
[6.264s][info][gc,stats    ] 
[6.264s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.264s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.264s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.265s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.265s][info][gc,stats    ] 
[6.265s][info][gc,stats    ]     1 successful concurrent GCs
[6.265s][info][gc,stats    ]       0 invoked explicitly
[6.265s][info][gc,stats    ]       0 invoked implicitly
[6.265s][info][gc,stats    ] 
[6.265s][info][gc,stats    ]     0 Degenerated GCs
[6.265s][info][gc,stats    ]       0 caused by allocation failure
[6.265s][info][gc,stats    ]       0 upgraded to Full GC
[6.265s][info][gc,stats    ] 
[6.265s][info][gc,stats    ]     0 Full GCs
[6.265s][info][gc,stats    ]       0 invoked explicitly
[6.265s][info][gc,stats    ]       0 invoked implicitly
[6.265s][info][gc,stats    ]       0 caused by allocation failure
[6.265s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.265s][info][gc,stats    ] 
[6.265s][info][gc,stats    ] 
