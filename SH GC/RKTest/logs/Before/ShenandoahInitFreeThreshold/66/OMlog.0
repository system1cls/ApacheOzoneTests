[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.004s][info][gc] Using Shenandoah
[0.005s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.005s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.005s][info][gc,init] CPUs: 4 total, 4 available
[0.005s][info][gc,init] Memory: 7937M
[0.005s][info][gc,init] Large Page Support: Disabled
[0.005s][info][gc,init] NUMA Support: Disabled
[0.005s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.005s][info][gc,init] Heap Min Capacity: 6656K
[0.005s][info][gc,init] Heap Initial Capacity: 127488K
[0.005s][info][gc,init] Heap Max Capacity: 2032128K
[0.005s][info][gc,init] Pre-touch: Disabled
[0.005s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.005s][info][gc,init] Heuristics: Adaptive
[0.005s][info][gc,init] Heap Region Count: 3969
[0.005s][info][gc,init] Heap Region Size: 512K
[0.005s][info][gc,init] TLAB Size Max: 512K
[0.005s][info][gc,init] Humongous Object Threshold: 512K
[0.005s][info][gc,init] Parallel Workers: 8
[0.005s][info][gc,init] Concurrent Workers: 2
[0.013s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f8c2b000000-0x00007f8c2bc97000-0x00007f8c2bc97000), size 13201408, SharedBaseAddress: 0x00007f8c2b000000, ArchiveRelocationMode: 1.
[0.013s][info][gc,metaspace] Compressed class space mapped at: 0x00007f8c2c000000-0x00007f8c6c000000, reserved size: 1073741824
[0.013s][info][gc,metaspace] Narrow klass base: 0x00007f8c2b000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.831s][info][gc          ] Trigger: Metadata GC Threshold
[1.831s][info][gc,ergo     ] Free: 1745M, Max: 512K regular, 1745M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.832s][info][gc,start    ] GC(0) Concurrent reset
[1.832s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.832s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.832s][info][gc          ] GC(0) Concurrent reset 0.613ms
[1.832s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.833s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.833s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.833s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.504ms
[1.833s][info][gc,start    ] GC(0) Concurrent marking roots
[1.833s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.835s][info][gc          ] GC(0) Concurrent marking roots 1.912ms
[1.835s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.835s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.873s][info][gc          ] GC(0) Concurrent marking (unload classes) 38.071ms
[1.873s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.873s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.874s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1844M, Max CSet: 84672K, Min Garbage: 0B
[1.874s][info][gc,ergo     ] GC(0) Collectable Garbage: 73653K (98%), Immediate: 3823K (5%), CSet: 69830K (93%)
[1.874s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 78336K, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.874s][info][gc          ] GC(0) Pause Final Mark (unload classes) 1.338ms
[1.874s][info][gc,start    ] GC(0) Concurrent thread roots
[1.874s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.875s][info][gc          ] GC(0) Concurrent thread roots 0.834ms
[1.875s][info][gc,start    ] GC(0) Concurrent weak references
[1.875s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.876s][info][gc,ref      ] GC(0) Encountered references: Soft: 3956, Weak: 2096, Final: 4, Phantom: 820
[1.876s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1280, Final: 1, Phantom: 613
[1.876s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 498, Final: 0, Phantom: 230
[1.876s][info][gc          ] GC(0) Concurrent weak references 0.583ms
[1.876s][info][gc,start    ] GC(0) Concurrent weak roots
[1.876s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.883s][info][gc          ] GC(0) Concurrent weak roots 6.898ms
[1.883s][info][gc,start    ] GC(0) Concurrent cleanup
[1.883s][info][gc          ] GC(0) Concurrent cleanup 143M->139M(146M) 0.184ms
[1.883s][info][gc,ergo     ] GC(0) Free: 1744M, Max: 512K regular, 1740M humongous, Frag: 1% external, 0% internal; Reserve: 100722K, Max: 512K
[1.883s][info][gc,start    ] GC(0) Concurrent class unloading
[1.883s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.896s][info][gc          ] GC(0) Concurrent class unloading 12.253ms
[1.896s][info][gc,start    ] GC(0) Concurrent strong roots
[1.896s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.898s][info][gc          ] GC(0) Concurrent strong roots 1.668ms
[1.898s][info][gc,start    ] GC(0) Concurrent evacuation
[1.898s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.905s][info][gc          ] GC(0) Concurrent evacuation 6.961ms
[1.905s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.905s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 147M, Free: 1743M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.905s][info][gc          ] GC(0) Pause Init Update Refs 0.041ms
[1.905s][info][gc,start    ] GC(0) Concurrent update references
[1.905s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.923s][info][gc          ] GC(0) Concurrent update references 18.304ms
[1.924s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.924s][info][gc          ] GC(0) Concurrent update thread roots 0.377ms
[1.924s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.924s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.924s][info][gc          ] GC(0) Pause Final Update Refs 0.161ms
[1.924s][info][gc,start    ] GC(0) Concurrent cleanup
[1.925s][info][gc          ] GC(0) Concurrent cleanup 147M->71M(154M) 0.073ms
[1.925s][info][gc,ergo     ] Free: 1811M, Max: 512K regular, 1731M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.925s][info][gc,stats    ] 
[1.925s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.925s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.925s][info][gc,stats    ] 
[1.925s][info][gc,stats    ] Concurrent Reset                    641 us
[1.925s][info][gc,stats    ] Pause Init Mark (G)                 696 us
[1.925s][info][gc,stats    ] Pause Init Mark (N)                 518 us
[1.925s][info][gc,stats    ]   Update Region States               27 us
[1.925s][info][gc,stats    ] Concurrent Mark Roots              1934 us, parallelism: 1.78x
[1.925s][info][gc,stats    ]   CMR: <total>                     3452 us
[1.925s][info][gc,stats    ]   CMR: Thread Roots                1594 us, workers (us): 1453, 141, ---, ---, ---, ---, ---, ---, 
[1.925s][info][gc,stats    ]   CMR: VM Strong Roots              503 us, workers (us): 335, 168, ---, ---, ---, ---, ---, ---, 
[1.925s][info][gc,stats    ]   CMR: CLDG Roots                  1355 us, workers (us): ---, 1355, ---, ---, ---, ---, ---, ---, 
[1.925s][info][gc,stats    ] Concurrent Marking                38100 us
[1.925s][info][gc,stats    ] Pause Final Mark (G)               1485 us
[1.925s][info][gc,stats    ] Pause Final Mark (N)               1345 us
[1.925s][info][gc,stats    ]   Finish Mark                      1135 us
[1.925s][info][gc,stats    ]   Update Region States               39 us
[1.925s][info][gc,stats    ]   Choose Collection Set              99 us
[1.925s][info][gc,stats    ]   Rebuild Free Set                   28 us
[1.925s][info][gc,stats    ] Concurrent Thread Roots             855 us, parallelism: 1.21x
[1.925s][info][gc,stats    ]   CTR: <total>                     1036 us
[1.925s][info][gc,stats    ]   CTR: Thread Roots                1036 us, workers (us): 282, 754, ---, ---, ---, ---, ---, ---, 
[1.925s][info][gc,stats    ] Concurrent Weak References          840 us, parallelism: 0.51x
[1.925s][info][gc,stats    ]   CWRF: <total>                     424 us
[1.925s][info][gc,stats    ]   CWRF: Weak References             424 us, workers (us): 388,  36, ---, ---, ---, ---, ---, ---, 
[1.925s][info][gc,stats    ] Concurrent Weak Roots              6954 us
[1.925s][info][gc,stats    ]   Roots                            6441 us, parallelism: 1.98x
[1.925s][info][gc,stats    ]     CWR: <total>                  12723 us
[1.925s][info][gc,stats    ]     CWR: Code Cache Roots           711 us, workers (us): 458, 252, ---, ---, ---, ---, ---, ---, 
[1.925s][info][gc,stats    ]     CWR: VM Weak Roots            11994 us, workers (us): 5902, 6092, ---, ---, ---, ---, ---, ---, 
[1.925s][info][gc,stats    ]     CWR: CLDG Roots                  19 us, workers (us):  19, ---, ---, ---, ---, ---, ---, ---, 
[1.925s][info][gc,stats    ]   Rendezvous                        364 us
[1.925s][info][gc,stats    ] Concurrent Cleanup                  225 us
[1.926s][info][gc,stats    ] Concurrent Class Unloading        12670 us
[1.926s][info][gc,stats    ]   Unlink Stale                     2098 us
[1.926s][info][gc,stats    ]     System Dictionary               182 us
[1.926s][info][gc,stats    ]     Weak Class Links                  0 us
[1.926s][info][gc,stats    ]     Code Roots                     1914 us
[1.926s][info][gc,stats    ]   Rendezvous                        103 us
[1.926s][info][gc,stats    ]   Purge Unlinked                   9867 us
[1.926s][info][gc,stats    ]     Code Roots                     9821 us
[1.926s][info][gc,stats    ]     CLDG                             46 us
[1.926s][info][gc,stats    ]     Exception Caches                  0 us
[1.926s][info][gc,stats    ] Concurrent Strong Roots            1753 us, parallelism: 0.88x
[1.926s][info][gc,stats    ]   CSR: <total>                     1547 us
[1.926s][info][gc,stats    ]   CSR: VM Strong Roots               31 us, workers (us):  24,   7, ---, ---, ---, ---, ---, ---, 
[1.926s][info][gc,stats    ]   CSR: CLDG Roots                  1516 us, workers (us): ---, 1516, ---, ---, ---, ---, ---, ---, 
[1.926s][info][gc,stats    ] Concurrent Evacuation              7084 us
[1.926s][info][gc,stats    ] Pause Init Update Refs (G)          174 us
[1.926s][info][gc,stats    ] Pause Init Update Refs (N)           52 us
[1.926s][info][gc,stats    ]   Manage GCLABs                       6 us
[1.926s][info][gc,stats    ] Concurrent Update Refs            18740 us
[1.926s][info][gc,stats    ] Concurrent Update Thread Roots      427 us
[1.926s][info][gc,stats    ] Pause Final Update Refs (G)         243 us
[1.926s][info][gc,stats    ] Pause Final Update Refs (N)         205 us
[1.926s][info][gc,stats    ]   Update Region States               37 us
[1.926s][info][gc,stats    ]   Trash Collection Set                4 us
[1.926s][info][gc,stats    ]   Rebuild Free Set                   21 us
[1.926s][info][gc,stats    ] Concurrent Cleanup                  102 us
[1.926s][info][gc,stats    ] 
[1.926s][info][gc,stats    ] Allocation pacing accrued:
[1.926s][info][gc,stats    ]       0 of  1921 ms (  0.0%): <total>
[1.926s][info][gc,stats    ]       0 of  1921 ms (  0.0%): <average total>
[1.926s][info][gc,stats    ] 
[1.926s][info][gc,metaspace] Metaspace: 21200K(21632K)->22000K(22336K) NonClass: 18849K(19072K)->19547K(19712K) Class: 2351K(2560K)->2453K(2624K)
[1.926s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.209s][info][gc          ] Cancelling GC: Stopping VM
[6.210s][info][gc,heap,exit] Heap
[6.210s][info][gc,heap,exit] Shenandoah Heap
[6.210s][info][gc,heap,exit]  1984M max, 1984M soft max, 154M committed, 84986K used
[6.210s][info][gc,heap,exit]  3969 x 512K regions
[6.210s][info][gc,heap,exit] Status: cancelled
[6.210s][info][gc,heap,exit] Reserved region:
[6.210s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.210s][info][gc,heap,exit] Collection set:
[6.210s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.210s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.210s][info][gc,heap,exit] 
[6.210s][info][gc,heap,exit]  Metaspace       used 25053K, committed 25344K, reserved 1114112K
[6.210s][info][gc,heap,exit]   class space    used 2776K, committed 2880K, reserved 1048576K
[6.210s][info][gc,stats    ] 
[6.210s][info][gc,stats    ] GC STATISTICS:
[6.210s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.210s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.210s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.210s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.210s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.210s][info][gc,stats    ] 
[6.210s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.210s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.210s][info][gc,stats    ] 
[6.210s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.210s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.210s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.210s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.210s][info][gc,stats    ] 
[6.210s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.210s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.210s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.210s][info][gc,stats    ]   Raise max pacing delay with care.
[6.210s][info][gc,stats    ] 
[6.210s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      641 us) (n =     1) (lvls, us =      641,      641,      641,      641,      641)
[6.210s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      696 us) (n =     1) (lvls, us =      695,      695,      695,      695,      696)
[6.210s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      518 us) (n =     1) (lvls, us =      518,      518,      518,      518,      518)
[6.210s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       27 us) (n =     1) (lvls, us =       27,       27,       27,       27,       27)
[6.210s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     1934 us) (n =     1) (lvls, us =     1934,     1934,     1934,     1934,     1934)
[6.210s][info][gc,stats    ]   CMR: <total>                 =    0.003 s (a =     3452 us) (n =     1) (lvls, us =     3438,     3438,     3438,     3438,     3452)
[6.210s][info][gc,stats    ]   CMR: Thread Roots            =    0.002 s (a =     1594 us) (n =     1) (lvls, us =     1582,     1582,     1582,     1582,     1594)
[6.210s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      503 us) (n =     1) (lvls, us =      502,      502,      502,      502,      503)
[6.210s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1355 us) (n =     1) (lvls, us =     1348,     1348,     1348,     1348,     1355)
[6.210s][info][gc,stats    ] Concurrent Marking             =    0.038 s (a =    38100 us) (n =     1) (lvls, us =    38086,    38086,    38086,    38086,    38100)
[6.210s][info][gc,stats    ] Pause Final Mark (G)           =    0.001 s (a =     1485 us) (n =     1) (lvls, us =     1484,     1484,     1484,     1484,     1485)
[6.210s][info][gc,stats    ] Pause Final Mark (N)           =    0.001 s (a =     1345 us) (n =     1) (lvls, us =     1328,     1328,     1328,     1328,     1345)
[6.210s][info][gc,stats    ]   Finish Mark                  =    0.001 s (a =     1135 us) (n =     1) (lvls, us =     1133,     1133,     1133,     1133,     1135)
[6.210s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       39 us) (n =     1) (lvls, us =       39,       39,       39,       39,       39)
[6.210s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       99 us) (n =     1) (lvls, us =       99,       99,       99,       99,       99)
[6.210s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       28 us) (n =     1) (lvls, us =       28,       28,       28,       28,       28)
[6.210s][info][gc,stats    ] Concurrent Thread Roots        =    0.001 s (a =      855 us) (n =     1) (lvls, us =      854,      854,      854,      854,      855)
[6.210s][info][gc,stats    ]   CTR: <total>                 =    0.001 s (a =     1036 us) (n =     1) (lvls, us =     1035,     1035,     1035,     1035,     1036)
[6.210s][info][gc,stats    ]   CTR: Thread Roots            =    0.001 s (a =     1036 us) (n =     1) (lvls, us =     1035,     1035,     1035,     1035,     1036)
[6.210s][info][gc,stats    ] Concurrent Weak References     =    0.001 s (a =      840 us) (n =     1) (lvls, us =      838,      838,      838,      838,      840)
[6.210s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      424 us) (n =     1) (lvls, us =      424,      424,      424,      424,      424)
[6.210s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      424 us) (n =     1) (lvls, us =      424,      424,      424,      424,      424)
[6.210s][info][gc,stats    ] Concurrent Weak Roots          =    0.007 s (a =     6954 us) (n =     1) (lvls, us =     6953,     6953,     6953,     6953,     6954)
[6.210s][info][gc,stats    ]   Roots                        =    0.006 s (a =     6441 us) (n =     1) (lvls, us =     6426,     6426,     6426,     6426,     6441)
[6.211s][info][gc,stats    ]     CWR: <total>               =    0.013 s (a =    12723 us) (n =     1) (lvls, us =    12695,    12695,    12695,    12695,    12723)
[6.211s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      711 us) (n =     1) (lvls, us =      709,      709,      709,      709,      711)
[6.211s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.012 s (a =    11994 us) (n =     1) (lvls, us =    11914,    11914,    11914,    11914,    11994)
[6.211s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[6.211s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      364 us) (n =     1) (lvls, us =      363,      363,      363,      363,      364)
[6.211s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      225 us) (n =     1) (lvls, us =      225,      225,      225,      225,      225)
[6.211s][info][gc,stats    ] Concurrent Class Unloading     =    0.013 s (a =    12670 us) (n =     1) (lvls, us =    12500,    12500,    12500,    12500,    12670)
[6.211s][info][gc,stats    ]   Unlink Stale                 =    0.002 s (a =     2098 us) (n =     1) (lvls, us =     2090,     2090,     2090,     2090,     2098)
[6.211s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =      182 us) (n =     1) (lvls, us =      182,      182,      182,      182,      182)
[6.211s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.211s][info][gc,stats    ]     Code Roots                 =    0.002 s (a =     1914 us) (n =     1) (lvls, us =     1914,     1914,     1914,     1914,     1914)
[6.211s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      103 us) (n =     1) (lvls, us =      102,      102,      102,      102,      103)
[6.211s][info][gc,stats    ]   Purge Unlinked               =    0.010 s (a =     9867 us) (n =     1) (lvls, us =     9863,     9863,     9863,     9863,     9867)
[6.211s][info][gc,stats    ]     Code Roots                 =    0.010 s (a =     9821 us) (n =     1) (lvls, us =     9805,     9805,     9805,     9805,     9821)
[6.211s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       46 us) (n =     1) (lvls, us =       46,       46,       46,       46,       46)
[6.211s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.211s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     1753 us) (n =     1) (lvls, us =     1738,     1738,     1738,     1738,     1753)
[6.211s][info][gc,stats    ]   CSR: <total>                 =    0.002 s (a =     1547 us) (n =     1) (lvls, us =     1543,     1543,     1543,     1543,     1547)
[6.211s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       31 us) (n =     1) (lvls, us =       31,       31,       31,       31,       31)
[6.211s][info][gc,stats    ]   CSR: CLDG Roots              =    0.002 s (a =     1516 us) (n =     1) (lvls, us =     1504,     1504,     1504,     1504,     1516)
[6.211s][info][gc,stats    ] Concurrent Evacuation          =    0.007 s (a =     7084 us) (n =     1) (lvls, us =     7070,     7070,     7070,     7070,     7084)
[6.211s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      174 us) (n =     1) (lvls, us =      174,      174,      174,      174,      174)
[6.211s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       52 us) (n =     1) (lvls, us =       52,       52,       52,       52,       52)
[6.211s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        6 us) (n =     1) (lvls, us =        6,        6,        6,        6,        6)
[6.211s][info][gc,stats    ] Concurrent Update Refs         =    0.019 s (a =    18740 us) (n =     1) (lvls, us =    18555,    18555,    18555,    18555,    18740)
[6.211s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      427 us) (n =     1) (lvls, us =      426,      426,      426,      426,      427)
[6.211s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      243 us) (n =     1) (lvls, us =      242,      242,      242,      242,      243)
[6.211s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      205 us) (n =     1) (lvls, us =      205,      205,      205,      205,      205)
[6.211s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       37 us) (n =     1) (lvls, us =       37,       37,       37,       37,       37)
[6.211s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.211s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       21 us) (n =     1) (lvls, us =       21,       21,       21,       21,       21)
[6.211s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      102 us) (n =     1) (lvls, us =      102,      102,      102,      102,      102)
[6.211s][info][gc,stats    ] 
[6.211s][info][gc,stats    ] 
[6.211s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.211s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.211s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.211s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.211s][info][gc,stats    ] 
[6.211s][info][gc,stats    ]     1 successful concurrent GCs
[6.211s][info][gc,stats    ]       0 invoked explicitly
[6.211s][info][gc,stats    ]       0 invoked implicitly
[6.211s][info][gc,stats    ] 
[6.211s][info][gc,stats    ]     0 Degenerated GCs
[6.211s][info][gc,stats    ]       0 caused by allocation failure
[6.211s][info][gc,stats    ]       0 upgraded to Full GC
[6.211s][info][gc,stats    ] 
[6.211s][info][gc,stats    ]     0 Full GCs
[6.211s][info][gc,stats    ]       0 invoked explicitly
[6.211s][info][gc,stats    ]       0 invoked implicitly
[6.211s][info][gc,stats    ]       0 caused by allocation failure
[6.211s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.211s][info][gc,stats    ] 
[6.211s][info][gc,stats    ] 
