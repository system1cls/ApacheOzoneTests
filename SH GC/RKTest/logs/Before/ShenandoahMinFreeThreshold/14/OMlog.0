[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.008s][info][gc] Using Shenandoah
[0.009s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.012s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.012s][info][gc,init] CPUs: 4 total, 4 available
[0.012s][info][gc,init] Memory: 7937M
[0.012s][info][gc,init] Large Page Support: Disabled
[0.012s][info][gc,init] NUMA Support: Disabled
[0.012s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.012s][info][gc,init] Heap Min Capacity: 6656K
[0.012s][info][gc,init] Heap Initial Capacity: 127488K
[0.012s][info][gc,init] Heap Max Capacity: 2032128K
[0.012s][info][gc,init] Pre-touch: Disabled
[0.012s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.012s][info][gc,init] Heuristics: Adaptive
[0.012s][info][gc,init] Heap Region Count: 3969
[0.012s][info][gc,init] Heap Region Size: 512K
[0.012s][info][gc,init] TLAB Size Max: 512K
[0.012s][info][gc,init] Humongous Object Threshold: 512K
[0.012s][info][gc,init] Parallel Workers: 8
[0.012s][info][gc,init] Concurrent Workers: 2
[0.019s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007fe153000000-0x00007fe153c97000-0x00007fe153c97000), size 13201408, SharedBaseAddress: 0x00007fe153000000, ArchiveRelocationMode: 1.
[0.020s][info][gc,metaspace] Compressed class space mapped at: 0x00007fe154000000-0x00007fe194000000, reserved size: 1073741824
[0.020s][info][gc,metaspace] Narrow klass base: 0x00007fe153000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.975s][info][gc          ] Trigger: Metadata GC Threshold
[1.975s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.975s][info][gc,start    ] GC(0) Concurrent reset
[1.975s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.975s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.976s][info][gc          ] GC(0) Concurrent reset 0.443ms
[1.976s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.976s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.976s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.976s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.496ms
[1.976s][info][gc,start    ] GC(0) Concurrent marking roots
[1.976s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.978s][info][gc          ] GC(0) Concurrent marking roots 1.494ms
[1.978s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.978s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[2.020s][info][gc          ] GC(0) Concurrent marking (unload classes) 41.648ms
[2.020s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[2.020s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[2.022s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 360M, Actual Free: 1846M, Max CSet: 84672K, Min Garbage: 0B
[2.022s][info][gc,ergo     ] GC(0) Collectable Garbage: 72544K (98%), Immediate: 4335K (5%), CSet: 68209K (92%)
[2.022s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 76800K, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.022s][info][gc          ] GC(0) Pause Final Mark (unload classes) 2.394ms
[2.022s][info][gc,start    ] GC(0) Concurrent thread roots
[2.022s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[2.022s][info][gc          ] GC(0) Concurrent thread roots 0.137ms
[2.022s][info][gc,start    ] GC(0) Concurrent weak references
[2.022s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[2.023s][info][gc,ref      ] GC(0) Encountered references: Soft: 3954, Weak: 2100, Final: 4, Phantom: 821
[2.023s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1194, Final: 0, Phantom: 433
[2.023s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 498, Final: 0, Phantom: 230
[2.023s][info][gc          ] GC(0) Concurrent weak references 0.387ms
[2.023s][info][gc,start    ] GC(0) Concurrent weak roots
[2.023s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[2.028s][info][gc          ] GC(0) Concurrent weak roots 4.910ms
[2.028s][info][gc,start    ] GC(0) Concurrent cleanup
[2.028s][info][gc          ] GC(0) Concurrent cleanup 141M->136M(144M) 0.115ms
[2.028s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1742M humongous, Frag: 1% external, 0% internal; Reserve: 100906K, Max: 512K
[2.028s][info][gc,start    ] GC(0) Concurrent class unloading
[2.028s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[2.033s][info][gc          ] GC(0) Concurrent class unloading 5.217ms
[2.033s][info][gc,start    ] GC(0) Concurrent strong roots
[2.033s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[2.036s][info][gc          ] GC(0) Concurrent strong roots 2.661ms
[2.036s][info][gc,start    ] GC(0) Concurrent evacuation
[2.036s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[2.051s][info][gc          ] GC(0) Concurrent evacuation 15.440ms
[2.051s][info][gc,start    ] GC(0) Pause Init Update Refs
[2.051s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 146M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.051s][info][gc          ] GC(0) Pause Init Update Refs 0.046ms
[2.051s][info][gc,start    ] GC(0) Concurrent update references
[2.051s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[2.068s][info][gc          ] GC(0) Concurrent update references 17.047ms
[2.068s][info][gc,start    ] GC(0) Concurrent update thread roots
[2.069s][info][gc          ] GC(0) Concurrent update thread roots 0.572ms
[2.069s][info][gc,start    ] GC(0) Pause Final Update Refs
[2.069s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[2.069s][info][gc          ] GC(0) Pause Final Update Refs 0.094ms
[2.069s][info][gc,start    ] GC(0) Concurrent cleanup
[2.069s][info][gc          ] GC(0) Concurrent cleanup 147M->72M(152M) 0.090ms
[2.069s][info][gc,ergo     ] Free: 1810M, Max: 512K regular, 1732M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[2.069s][info][gc,stats    ] 
[2.069s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[2.069s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[2.069s][info][gc,stats    ] 
[2.069s][info][gc,stats    ] Concurrent Reset                    464 us
[2.069s][info][gc,stats    ] Pause Init Mark (G)                 683 us
[2.069s][info][gc,stats    ] Pause Init Mark (N)                 510 us
[2.069s][info][gc,stats    ]   Update Region States               25 us
[2.069s][info][gc,stats    ] Concurrent Mark Roots              1505 us, parallelism: 1.87x
[2.069s][info][gc,stats    ]   CMR: <total>                     2808 us
[2.069s][info][gc,stats    ]   CMR: Thread Roots                1253 us, workers (us): 1080, 172, ---, ---, ---, ---, ---, ---, 
[2.070s][info][gc,stats    ]   CMR: VM Strong Roots              516 us, workers (us): 328, 187, ---, ---, ---, ---, ---, ---, 
[2.070s][info][gc,stats    ]   CMR: CLDG Roots                  1040 us, workers (us): ---, 1040, ---, ---, ---, ---, ---, ---, 
[2.070s][info][gc,stats    ] Concurrent Marking                41674 us
[2.070s][info][gc,stats    ] Pause Final Mark (G)               2575 us
[2.070s][info][gc,stats    ] Pause Final Mark (N)               2405 us
[2.070s][info][gc,stats    ]   Finish Mark                      2190 us
[2.070s][info][gc,stats    ]   Update Region States               35 us
[2.070s][info][gc,stats    ]   Choose Collection Set              87 us
[2.070s][info][gc,stats    ]   Rebuild Free Set                   18 us
[2.070s][info][gc,stats    ] Concurrent Thread Roots             148 us, parallelism: 1.22x
[2.070s][info][gc,stats    ]   CTR: <total>                      180 us
[2.070s][info][gc,stats    ]   CTR: Thread Roots                 180 us, workers (us):  90,  90, ---, ---, ---, ---, ---, ---, 
[2.070s][info][gc,stats    ] Concurrent Weak References          395 us, parallelism: 0.76x
[2.070s][info][gc,stats    ]   CWRF: <total>                     299 us
[2.070s][info][gc,stats    ]   CWRF: Weak References             299 us, workers (us): 299,   0, ---, ---, ---, ---, ---, ---, 
[2.070s][info][gc,stats    ] Concurrent Weak Roots              4940 us
[2.070s][info][gc,stats    ]   Roots                            4855 us, parallelism: 1.34x
[2.070s][info][gc,stats    ]     CWR: <total>                   6514 us
[2.070s][info][gc,stats    ]     CWR: Code Cache Roots          3941 us, workers (us): 581, 3360, ---, ---, ---, ---, ---, ---, 
[2.070s][info][gc,stats    ]     CWR: VM Weak Roots             2540 us, workers (us): 1277, 1263, ---, ---, ---, ---, ---, ---, 
[2.070s][info][gc,stats    ]     CWR: CLDG Roots                  32 us, workers (us):  32, ---, ---, ---, ---, ---, ---, ---, 
[2.070s][info][gc,stats    ]   Rendezvous                         38 us
[2.070s][info][gc,stats    ] Concurrent Cleanup                  126 us
[2.070s][info][gc,stats    ] Concurrent Class Unloading         5239 us
[2.070s][info][gc,stats    ]   Unlink Stale                     1508 us
[2.070s][info][gc,stats    ]     System Dictionary                47 us
[2.070s][info][gc,stats    ]     Weak Class Links                  0 us
[2.070s][info][gc,stats    ]     Code Roots                     1460 us
[2.070s][info][gc,stats    ]   Rendezvous                         32 us
[2.070s][info][gc,stats    ]   Purge Unlinked                   3652 us
[2.070s][info][gc,stats    ]     Code Roots                     3616 us
[2.070s][info][gc,stats    ]     CLDG                             35 us
[2.070s][info][gc,stats    ]     Exception Caches                  0 us
[2.070s][info][gc,stats    ] Concurrent Strong Roots            2678 us, parallelism: 0.43x
[2.070s][info][gc,stats    ]   CSR: <total>                     1146 us
[2.070s][info][gc,stats    ]   CSR: VM Strong Roots               19 us, workers (us):  19,   0, ---, ---, ---, ---, ---, ---, 
[2.070s][info][gc,stats    ]   CSR: CLDG Roots                  1126 us, workers (us): 1126, ---, ---, ---, ---, ---, ---, ---, 
[2.070s][info][gc,stats    ] Concurrent Evacuation             15468 us
[2.070s][info][gc,stats    ] Pause Init Update Refs (G)          215 us
[2.070s][info][gc,stats    ] Pause Init Update Refs (N)           57 us
[2.070s][info][gc,stats    ]   Manage GCLABs                       5 us
[2.070s][info][gc,stats    ] Concurrent Update Refs            17073 us
[2.070s][info][gc,stats    ] Concurrent Update Thread Roots      581 us
[2.070s][info][gc,stats    ] Pause Final Update Refs (G)         205 us
[2.070s][info][gc,stats    ] Pause Final Update Refs (N)         105 us
[2.070s][info][gc,stats    ]   Update Region States               30 us
[2.070s][info][gc,stats    ]   Trash Collection Set                3 us
[2.070s][info][gc,stats    ]   Rebuild Free Set                   24 us
[2.070s][info][gc,stats    ] Concurrent Cleanup                   99 us
[2.070s][info][gc,stats    ] 
[2.070s][info][gc,stats    ] Allocation pacing accrued:
[2.070s][info][gc,stats    ]       0 of  2061 ms (  0.0%): <total>
[2.070s][info][gc,stats    ]       0 of  2061 ms (  0.0%): <average total>
[2.070s][info][gc,stats    ] 
[2.070s][info][gc,metaspace] Metaspace: 21245K(21632K)->21982K(22400K) NonClass: 18894K(19072K)->19537K(19776K) Class: 2350K(2560K)->2445K(2624K)
[2.070s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.377s][info][gc          ] Cancelling GC: Stopping VM
[6.378s][info][gc,heap,exit] Heap
[6.378s][info][gc,heap,exit] Shenandoah Heap
[6.378s][info][gc,heap,exit]  1984M max, 1984M soft max, 152M committed, 85920K used
[6.378s][info][gc,heap,exit]  3969 x 512K regions
[6.378s][info][gc,heap,exit] Status: cancelled
[6.378s][info][gc,heap,exit] Reserved region:
[6.378s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.378s][info][gc,heap,exit] Collection set:
[6.378s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.378s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.378s][info][gc,heap,exit] 
[6.378s][info][gc,heap,exit]  Metaspace       used 25109K, committed 25408K, reserved 1114112K
[6.378s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.378s][info][gc,stats    ] 
[6.378s][info][gc,stats    ] GC STATISTICS:
[6.378s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.378s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.378s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.378s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.378s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.378s][info][gc,stats    ] 
[6.378s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.378s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.378s][info][gc,stats    ] 
[6.378s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.378s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.378s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.378s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.378s][info][gc,stats    ] 
[6.378s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.378s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.378s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.378s][info][gc,stats    ]   Raise max pacing delay with care.
[6.378s][info][gc,stats    ] 
[6.378s][info][gc,stats    ] Concurrent Reset               =    0.000 s (a =      464 us) (n =     1) (lvls, us =      463,      463,      463,      463,      464)
[6.378s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      683 us) (n =     1) (lvls, us =      682,      682,      682,      682,      683)
[6.378s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      510 us) (n =     1) (lvls, us =      508,      508,      508,      508,      510)
[6.378s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       25 us) (n =     1) (lvls, us =       24,       24,       24,       24,       25)
[6.378s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     1505 us) (n =     1) (lvls, us =     1504,     1504,     1504,     1504,     1505)
[6.378s][info][gc,stats    ]   CMR: <total>                 =    0.003 s (a =     2808 us) (n =     1) (lvls, us =     2793,     2793,     2793,     2793,     2808)
[6.378s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1253 us) (n =     1) (lvls, us =     1250,     1250,     1250,     1250,     1253)
[6.378s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      516 us) (n =     1) (lvls, us =      516,      516,      516,      516,      516)
[6.378s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1040 us) (n =     1) (lvls, us =     1035,     1035,     1035,     1035,     1040)
[6.378s][info][gc,stats    ] Concurrent Marking             =    0.042 s (a =    41674 us) (n =     1) (lvls, us =    41602,    41602,    41602,    41602,    41674)
[6.378s][info][gc,stats    ] Pause Final Mark (G)           =    0.003 s (a =     2575 us) (n =     1) (lvls, us =     2559,     2559,     2559,     2559,     2575)
[6.378s][info][gc,stats    ] Pause Final Mark (N)           =    0.002 s (a =     2405 us) (n =     1) (lvls, us =     2402,     2402,     2402,     2402,     2405)
[6.378s][info][gc,stats    ]   Finish Mark                  =    0.002 s (a =     2190 us) (n =     1) (lvls, us =     2188,     2188,     2188,     2188,     2190)
[6.378s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       35 us) (n =     1) (lvls, us =       35,       35,       35,       35,       35)
[6.378s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       87 us) (n =     1) (lvls, us =       87,       87,       87,       87,       87)
[6.378s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[6.378s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      148 us) (n =     1) (lvls, us =      146,      146,      146,      146,      148)
[6.378s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      180 us) (n =     1) (lvls, us =      180,      180,      180,      180,      180)
[6.378s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      180 us) (n =     1) (lvls, us =      180,      180,      180,      180,      180)
[6.378s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      395 us) (n =     1) (lvls, us =      395,      395,      395,      395,      395)
[6.378s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      299 us) (n =     1) (lvls, us =      297,      297,      297,      297,      299)
[6.378s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      299 us) (n =     1) (lvls, us =      297,      297,      297,      297,      299)
[6.378s][info][gc,stats    ] Concurrent Weak Roots          =    0.005 s (a =     4940 us) (n =     1) (lvls, us =     4922,     4922,     4922,     4922,     4940)
[6.378s][info][gc,stats    ]   Roots                        =    0.005 s (a =     4855 us) (n =     1) (lvls, us =     4844,     4844,     4844,     4844,     4855)
[6.378s][info][gc,stats    ]     CWR: <total>               =    0.007 s (a =     6514 us) (n =     1) (lvls, us =     6504,     6504,     6504,     6504,     6514)
[6.378s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.004 s (a =     3941 us) (n =     1) (lvls, us =     3926,     3926,     3926,     3926,     3941)
[6.378s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.003 s (a =     2540 us) (n =     1) (lvls, us =     2539,     2539,     2539,     2539,     2540)
[6.378s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       32 us) (n =     1) (lvls, us =       32,       32,       32,       32,       32)
[6.378s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       38 us) (n =     1) (lvls, us =       38,       38,       38,       38,       38)
[6.378s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      126 us) (n =     1) (lvls, us =      125,      125,      125,      125,      126)
[6.378s][info][gc,stats    ] Concurrent Class Unloading     =    0.005 s (a =     5239 us) (n =     1) (lvls, us =     5234,     5234,     5234,     5234,     5239)
[6.378s][info][gc,stats    ]   Unlink Stale                 =    0.002 s (a =     1508 us) (n =     1) (lvls, us =     1504,     1504,     1504,     1504,     1508)
[6.378s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       47 us) (n =     1) (lvls, us =       47,       47,       47,       47,       47)
[6.378s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.378s][info][gc,stats    ]     Code Roots                 =    0.001 s (a =     1460 us) (n =     1) (lvls, us =     1445,     1445,     1445,     1445,     1460)
[6.378s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       32 us) (n =     1) (lvls, us =       32,       32,       32,       32,       32)
[6.378s][info][gc,stats    ]   Purge Unlinked               =    0.004 s (a =     3652 us) (n =     1) (lvls, us =     3633,     3633,     3633,     3633,     3652)
[6.379s][info][gc,stats    ]     Code Roots                 =    0.004 s (a =     3616 us) (n =     1) (lvls, us =     3613,     3613,     3613,     3613,     3616)
[6.379s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       35 us) (n =     1) (lvls, us =       35,       35,       35,       35,       35)
[6.379s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.379s][info][gc,stats    ] Concurrent Strong Roots        =    0.003 s (a =     2678 us) (n =     1) (lvls, us =     2676,     2676,     2676,     2676,     2678)
[6.379s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1146 us) (n =     1) (lvls, us =     1133,     1133,     1133,     1133,     1146)
[6.379s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[6.379s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1126 us) (n =     1) (lvls, us =     1113,     1113,     1113,     1113,     1126)
[6.379s][info][gc,stats    ] Concurrent Evacuation          =    0.015 s (a =    15468 us) (n =     1) (lvls, us =    15430,    15430,    15430,    15430,    15468)
[6.379s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      215 us) (n =     1) (lvls, us =      215,      215,      215,      215,      215)
[6.379s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       57 us) (n =     1) (lvls, us =       57,       57,       57,       57,       57)
[6.379s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.379s][info][gc,stats    ] Concurrent Update Refs         =    0.017 s (a =    17073 us) (n =     1) (lvls, us =    16992,    16992,    16992,    16992,    17073)
[6.379s][info][gc,stats    ] Concurrent Update Thread Roots =    0.001 s (a =      581 us) (n =     1) (lvls, us =      580,      580,      580,      580,      581)
[6.379s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      205 us) (n =     1) (lvls, us =      203,      203,      203,      203,      205)
[6.379s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      105 us) (n =     1) (lvls, us =      104,      104,      104,      104,      105)
[6.379s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       30 us) (n =     1) (lvls, us =       30,       30,       30,       30,       30)
[6.379s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        3 us) (n =     1) (lvls, us =        3,        3,        3,        3,        3)
[6.379s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       24 us) (n =     1) (lvls, us =       24,       24,       24,       24,       24)
[6.379s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       99 us) (n =     1) (lvls, us =       99,       99,       99,       99,       99)
[6.379s][info][gc,stats    ] 
[6.379s][info][gc,stats    ] 
[6.379s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.379s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.379s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.379s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.379s][info][gc,stats    ] 
[6.379s][info][gc,stats    ]     1 successful concurrent GCs
[6.379s][info][gc,stats    ]       0 invoked explicitly
[6.379s][info][gc,stats    ]       0 invoked implicitly
[6.379s][info][gc,stats    ] 
[6.379s][info][gc,stats    ]     0 Degenerated GCs
[6.379s][info][gc,stats    ]       0 caused by allocation failure
[6.379s][info][gc,stats    ]       0 upgraded to Full GC
[6.379s][info][gc,stats    ] 
[6.379s][info][gc,stats    ]     0 Full GCs
[6.379s][info][gc,stats    ]       0 invoked explicitly
[6.379s][info][gc,stats    ]       0 invoked implicitly
[6.379s][info][gc,stats    ]       0 caused by allocation failure
[6.379s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.379s][info][gc,stats    ] 
[6.379s][info][gc,stats    ] 
