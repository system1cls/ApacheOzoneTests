[0.007s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.007s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.008s][info][gc] Using Shenandoah
[0.009s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.009s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.009s][info][gc,init] CPUs: 4 total, 4 available
[0.009s][info][gc,init] Memory: 7937M
[0.009s][info][gc,init] Large Page Support: Disabled
[0.009s][info][gc,init] NUMA Support: Disabled
[0.009s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.009s][info][gc,init] Heap Min Capacity: 6656K
[0.009s][info][gc,init] Heap Initial Capacity: 127488K
[0.009s][info][gc,init] Heap Max Capacity: 2032128K
[0.009s][info][gc,init] Pre-touch: Disabled
[0.009s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.009s][info][gc,init] Heuristics: Adaptive
[0.009s][info][gc,init] Heap Region Count: 3969
[0.009s][info][gc,init] Heap Region Size: 512K
[0.009s][info][gc,init] TLAB Size Max: 512K
[0.009s][info][gc,init] Humongous Object Threshold: 512K
[0.009s][info][gc,init] Parallel Workers: 8
[0.009s][info][gc,init] Concurrent Workers: 2
[0.021s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f6a8e000000-0x00007f6a8ec97000-0x00007f6a8ec97000), size 13201408, SharedBaseAddress: 0x00007f6a8e000000, ArchiveRelocationMode: 1.
[0.021s][info][gc,metaspace] Compressed class space mapped at: 0x00007f6a8f000000-0x00007f6acf000000, reserved size: 1073741824
[0.021s][info][gc,metaspace] Narrow klass base: 0x00007f6a8e000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.392s][info][gc          ] Trigger: Metadata GC Threshold
[1.393s][info][gc,ergo     ] Free: 1790M, Max: 512K regular, 1790M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.393s][info][gc,start    ] GC(0) Concurrent reset
[1.393s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.393s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.393s][info][gc          ] GC(0) Concurrent reset 0.567ms
[1.394s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.394s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.395s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1789M, Non-Taxable: 178M, Alloc Tax Rate: 0.1x
[1.395s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.640ms
[1.396s][info][gc,start    ] GC(0) Concurrent marking roots
[1.396s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.400s][info][gc          ] GC(0) Concurrent marking roots 4.352ms
[1.400s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.400s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.410s][info][gc          ] GC(0) Concurrent marking (unload classes) 10.010ms
[1.410s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.411s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.411s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 380M, Actual Free: 1894M, Max CSet: 84672K, Min Garbage: 0B
[1.411s][info][gc,ergo     ] GC(0) Collectable Garbage: 82591K (99%), Immediate: 6367K (7%), CSet: 76223K (91%)
[1.411s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 83968K, Free: 1795M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.411s][info][gc          ] GC(0) Pause Final Mark (unload classes) 0.491ms
[1.411s][info][gc,start    ] GC(0) Concurrent thread roots
[1.411s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.411s][info][gc          ] GC(0) Concurrent thread roots 0.163ms
[1.411s][info][gc,start    ] GC(0) Concurrent weak references
[1.411s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.411s][info][gc,ref      ] GC(0) Encountered references: Soft: 3956, Weak: 2150, Final: 20, Phantom: 799
[1.411s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 881, Final: 0, Phantom: 531
[1.411s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 488, Final: 0, Phantom: 320
[1.411s][info][gc          ] GC(0) Concurrent weak references 0.233ms
[1.411s][info][gc,start    ] GC(0) Concurrent weak roots
[1.411s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.416s][info][gc          ] GC(0) Concurrent weak roots 4.387ms
[1.416s][info][gc,start    ] GC(0) Concurrent cleanup
[1.416s][info][gc          ] GC(0) Concurrent cleanup 97M->91M(125M) 0.099ms
[1.416s][info][gc,ergo     ] GC(0) Free: 1794M, Max: 512K regular, 1788M humongous, Frag: 1% external, 0% internal; Reserve: 100876K, Max: 512K
[1.416s][info][gc,start    ] GC(0) Concurrent class unloading
[1.416s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.425s][info][gc          ] GC(0) Concurrent class unloading 9.110ms
[1.425s][info][gc,start    ] GC(0) Concurrent strong roots
[1.425s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.428s][info][gc          ] GC(0) Concurrent strong roots 2.656ms
[1.428s][info][gc,start    ] GC(0) Concurrent evacuation
[1.428s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.435s][info][gc          ] GC(0) Concurrent evacuation 7.597ms
[1.436s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.436s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 101910K, Free: 1794M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.436s][info][gc          ] GC(0) Pause Init Update Refs 0.047ms
[1.436s][info][gc,start    ] GC(0) Concurrent update references
[1.436s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.441s][info][gc          ] GC(0) Concurrent update references 5.001ms
[1.441s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.441s][info][gc          ] GC(0) Concurrent update thread roots 0.158ms
[1.441s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.441s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.441s][info][gc          ] GC(0) Pause Final Update Refs 0.082ms
[1.441s][info][gc,start    ] GC(0) Concurrent cleanup
[1.441s][info][gc          ] GC(0) Concurrent cleanup 99M->17M(133M) 0.111ms
[1.441s][info][gc,ergo     ] Free: 1867M, Max: 512K regular, 1779M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.441s][info][gc,stats    ] 
[1.441s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.441s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.441s][info][gc,stats    ] 
[1.441s][info][gc,stats    ] Concurrent Reset                    953 us
[1.441s][info][gc,stats    ] Pause Init Mark (G)                2264 us
[1.441s][info][gc,stats    ] Pause Init Mark (N)                 669 us
[1.441s][info][gc,stats    ]   Update Region States               34 us
[1.441s][info][gc,stats    ] Concurrent Mark Roots              4373 us, parallelism: 0.95x
[1.441s][info][gc,stats    ]   CMR: <total>                     4159 us
[1.441s][info][gc,stats    ]   CMR: Thread Roots                1297 us, workers (us): 1297,   0, ---, ---, ---, ---, ---, ---, 
[1.441s][info][gc,stats    ]   CMR: VM Strong Roots              763 us, workers (us): 762,   0, ---, ---, ---, ---, ---, ---, 
[1.441s][info][gc,stats    ]   CMR: CLDG Roots                  2099 us, workers (us): 2099, ---, ---, ---, ---, ---, ---, ---, 
[1.441s][info][gc,stats    ] Concurrent Marking                10037 us
[1.441s][info][gc,stats    ] Pause Final Mark (G)                650 us
[1.441s][info][gc,stats    ] Pause Final Mark (N)                508 us
[1.441s][info][gc,stats    ]   Finish Mark                       175 us
[1.441s][info][gc,stats    ]   Update Region States               36 us
[1.441s][info][gc,stats    ]   Choose Collection Set             147 us
[1.441s][info][gc,stats    ]   Rebuild Free Set                   37 us
[1.441s][info][gc,stats    ] Concurrent Thread Roots             176 us, parallelism: 1.21x
[1.441s][info][gc,stats    ]   CTR: <total>                      212 us
[1.441s][info][gc,stats    ]   CTR: Thread Roots                 212 us, workers (us): 123,  89, ---, ---, ---, ---, ---, ---, 
[1.441s][info][gc,stats    ] Concurrent Weak References          240 us, parallelism: 1.13x
[1.441s][info][gc,stats    ]   CWRF: <total>                     272 us
[1.442s][info][gc,stats    ]   CWRF: Weak References             272 us, workers (us): 168, 104, ---, ---, ---, ---, ---, ---, 
[1.442s][info][gc,stats    ] Concurrent Weak Roots              4406 us
[1.442s][info][gc,stats    ]   Roots                            4009 us, parallelism: 1.85x
[1.442s][info][gc,stats    ]     CWR: <total>                   7411 us
[1.442s][info][gc,stats    ]     CWR: Code Cache Roots          1213 us, workers (us): 639, 574, ---, ---, ---, ---, ---, ---, 
[1.442s][info][gc,stats    ]     CWR: VM Weak Roots             6184 us, workers (us): 3318, 2866, ---, ---, ---, ---, ---, ---, 
[1.442s][info][gc,stats    ]     CWR: CLDG Roots                  14 us, workers (us):  14, ---, ---, ---, ---, ---, ---, ---, 
[1.442s][info][gc,stats    ]   Rendezvous                        363 us
[1.442s][info][gc,stats    ] Concurrent Cleanup                  110 us
[1.442s][info][gc,stats    ] Concurrent Class Unloading         9131 us
[1.442s][info][gc,stats    ]   Unlink Stale                     5736 us
[1.442s][info][gc,stats    ]     System Dictionary                37 us
[1.442s][info][gc,stats    ]     Weak Class Links                  0 us
[1.442s][info][gc,stats    ]     Code Roots                     5697 us
[1.442s][info][gc,stats    ]   Rendezvous                         39 us
[1.442s][info][gc,stats    ]   Purge Unlinked                   3316 us
[1.442s][info][gc,stats    ]     Code Roots                     3302 us
[1.442s][info][gc,stats    ]     CLDG                             13 us
[1.442s][info][gc,stats    ]     Exception Caches                  0 us
[1.442s][info][gc,stats    ] Concurrent Strong Roots            2675 us, parallelism: 0.97x
[1.442s][info][gc,stats    ]   CSR: <total>                     2602 us
[1.442s][info][gc,stats    ]   CSR: VM Strong Roots               29 us, workers (us):  21,   8, ---, ---, ---, ---, ---, ---, 
[1.442s][info][gc,stats    ]   CSR: CLDG Roots                  2574 us, workers (us): ---, 2574, ---, ---, ---, ---, ---, ---, 
[1.442s][info][gc,stats    ] Concurrent Evacuation              7627 us
[1.442s][info][gc,stats    ] Pause Init Update Refs (G)          184 us
[1.442s][info][gc,stats    ] Pause Init Update Refs (N)           57 us
[1.442s][info][gc,stats    ]   Manage GCLABs                       5 us
[1.442s][info][gc,stats    ] Concurrent Update Refs             5029 us
[1.442s][info][gc,stats    ] Concurrent Update Thread Roots      169 us
[1.442s][info][gc,stats    ] Pause Final Update Refs (G)         194 us
[1.442s][info][gc,stats    ] Pause Final Update Refs (N)          92 us
[1.442s][info][gc,stats    ]   Update Region States               28 us
[1.442s][info][gc,stats    ]   Trash Collection Set                4 us
[1.442s][info][gc,stats    ]   Rebuild Free Set                   19 us
[1.442s][info][gc,stats    ] Concurrent Cleanup                  123 us
[1.442s][info][gc,stats    ] 
[1.442s][info][gc,stats    ] Allocation pacing accrued:
[1.442s][info][gc,stats    ]       0 of  1433 ms (  0.0%): <total>
[1.442s][info][gc,stats    ]       0 of  1433 ms (  0.0%): <average total>
[1.442s][info][gc,stats    ] 
[1.442s][info][gc,metaspace] Metaspace: 21243K(21568K)->21459K(21824K) NonClass: 18901K(19072K)->19084K(19264K) Class: 2342K(2496K)->2375K(2560K)
[1.442s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[7.865s][info][gc          ] Cancelling GC: Stopping VM
[7.866s][info][gc,heap,exit] Heap
[7.866s][info][gc,heap,exit] Shenandoah Heap
[7.866s][info][gc,heap,exit]  1984M max, 1984M soft max, 133M committed, 37403K used
[7.866s][info][gc,heap,exit]  3969 x 512K regions
[7.866s][info][gc,heap,exit] Status: cancelled
[7.866s][info][gc,heap,exit] Reserved region:
[7.866s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[7.866s][info][gc,heap,exit] Collection set:
[7.866s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[7.866s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[7.866s][info][gc,heap,exit] 
[7.866s][info][gc,heap,exit]  Metaspace       used 25407K, committed 25792K, reserved 1114112K
[7.866s][info][gc,heap,exit]   class space    used 2926K, committed 3072K, reserved 1048576K
[7.867s][info][gc,stats    ] 
[7.867s][info][gc,stats    ] GC STATISTICS:
[7.867s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[7.867s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[7.867s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[7.867s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[7.867s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[7.867s][info][gc,stats    ] 
[7.867s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[7.867s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[7.867s][info][gc,stats    ] 
[7.867s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[7.867s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[7.867s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[7.867s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[7.867s][info][gc,stats    ] 
[7.867s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[7.867s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[7.867s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[7.867s][info][gc,stats    ]   Raise max pacing delay with care.
[7.867s][info][gc,stats    ] 
[7.867s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      953 us) (n =     1) (lvls, us =      951,      951,      951,      951,      953)
[7.867s][info][gc,stats    ] Pause Init Mark (G)            =    0.002 s (a =     2264 us) (n =     1) (lvls, us =     2246,     2246,     2246,     2246,     2264)
[7.867s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      669 us) (n =     1) (lvls, us =      668,      668,      668,      668,      669)
[7.867s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       34 us) (n =     1) (lvls, us =       34,       34,       34,       34,       34)
[7.867s][info][gc,stats    ] Concurrent Mark Roots          =    0.004 s (a =     4373 us) (n =     1) (lvls, us =     4355,     4355,     4355,     4355,     4373)
[7.867s][info][gc,stats    ]   CMR: <total>                 =    0.004 s (a =     4159 us) (n =     1) (lvls, us =     4141,     4141,     4141,     4141,     4159)
[7.867s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1297 us) (n =     1) (lvls, us =     1289,     1289,     1289,     1289,     1297)
[7.867s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      763 us) (n =     1) (lvls, us =      762,      762,      762,      762,      763)
[7.867s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     2099 us) (n =     1) (lvls, us =     2090,     2090,     2090,     2090,     2099)
[7.867s][info][gc,stats    ] Concurrent Marking             =    0.010 s (a =    10037 us) (n =     1) (lvls, us =     9961,     9961,     9961,     9961,    10037)
[7.867s][info][gc,stats    ] Pause Final Mark (G)           =    0.001 s (a =      650 us) (n =     1) (lvls, us =      650,      650,      650,      650,      650)
[7.867s][info][gc,stats    ] Pause Final Mark (N)           =    0.001 s (a =      508 us) (n =     1) (lvls, us =      508,      508,      508,      508,      508)
[7.867s][info][gc,stats    ]   Finish Mark                  =    0.000 s (a =      175 us) (n =     1) (lvls, us =      174,      174,      174,      174,      175)
[7.867s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       36 us) (n =     1) (lvls, us =       36,       36,       36,       36,       36)
[7.867s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =      147 us) (n =     1) (lvls, us =      146,      146,      146,      146,      147)
[7.867s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       37 us) (n =     1) (lvls, us =       36,       36,       36,       36,       37)
[7.867s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      176 us) (n =     1) (lvls, us =      174,      174,      174,      174,      176)
[7.867s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      212 us) (n =     1) (lvls, us =      211,      211,      211,      211,      212)
[7.867s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      212 us) (n =     1) (lvls, us =      211,      211,      211,      211,      212)
[7.867s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      240 us) (n =     1) (lvls, us =      238,      238,      238,      238,      240)
[7.867s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      272 us) (n =     1) (lvls, us =      271,      271,      271,      271,      272)
[7.867s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      272 us) (n =     1) (lvls, us =      271,      271,      271,      271,      272)
[7.867s][info][gc,stats    ] Concurrent Weak Roots          =    0.004 s (a =     4406 us) (n =     1) (lvls, us =     4395,     4395,     4395,     4395,     4406)
[7.867s][info][gc,stats    ]   Roots                        =    0.004 s (a =     4009 us) (n =     1) (lvls, us =     4004,     4004,     4004,     4004,     4009)
[7.867s][info][gc,stats    ]     CWR: <total>               =    0.007 s (a =     7411 us) (n =     1) (lvls, us =     7402,     7402,     7402,     7402,     7411)
[7.867s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =     1213 us) (n =     1) (lvls, us =     1211,     1211,     1211,     1211,     1213)
[7.867s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.006 s (a =     6184 us) (n =     1) (lvls, us =     6172,     6172,     6172,     6172,     6184)
[7.867s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       14 us) (n =     1) (lvls, us =       14,       14,       14,       14,       14)
[7.867s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      363 us) (n =     1) (lvls, us =      361,      361,      361,      361,      363)
[7.867s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      110 us) (n =     1) (lvls, us =      109,      109,      109,      109,      110)
[7.867s][info][gc,stats    ] Concurrent Class Unloading     =    0.009 s (a =     9131 us) (n =     1) (lvls, us =     9121,     9121,     9121,     9121,     9131)
[7.867s][info][gc,stats    ]   Unlink Stale                 =    0.006 s (a =     5736 us) (n =     1) (lvls, us =     5723,     5723,     5723,     5723,     5736)
[7.867s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       37 us) (n =     1) (lvls, us =       37,       37,       37,       37,       37)
[7.867s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.867s][info][gc,stats    ]     Code Roots                 =    0.006 s (a =     5697 us) (n =     1) (lvls, us =     5684,     5684,     5684,     5684,     5697)
[7.867s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       39 us) (n =     1) (lvls, us =       39,       39,       39,       39,       39)
[7.867s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     3316 us) (n =     1) (lvls, us =     3301,     3301,     3301,     3301,     3316)
[7.867s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     3302 us) (n =     1) (lvls, us =     3301,     3301,     3301,     3301,     3302)
[7.867s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       13 us) (n =     1) (lvls, us =       13,       13,       13,       13,       13)
[7.867s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.867s][info][gc,stats    ] Concurrent Strong Roots        =    0.003 s (a =     2675 us) (n =     1) (lvls, us =     2656,     2656,     2656,     2656,     2675)
[7.867s][info][gc,stats    ]   CSR: <total>                 =    0.003 s (a =     2602 us) (n =     1) (lvls, us =     2598,     2598,     2598,     2598,     2602)
[7.867s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       29 us) (n =     1) (lvls, us =       29,       29,       29,       29,       29)
[7.867s][info][gc,stats    ]   CSR: CLDG Roots              =    0.003 s (a =     2574 us) (n =     1) (lvls, us =     2559,     2559,     2559,     2559,     2574)
[7.867s][info][gc,stats    ] Concurrent Evacuation          =    0.008 s (a =     7627 us) (n =     1) (lvls, us =     7617,     7617,     7617,     7617,     7627)
[7.867s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      184 us) (n =     1) (lvls, us =      184,      184,      184,      184,      184)
[7.867s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       57 us) (n =     1) (lvls, us =       57,       57,       57,       57,       57)
[7.867s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[7.867s][info][gc,stats    ] Concurrent Update Refs         =    0.005 s (a =     5029 us) (n =     1) (lvls, us =     5020,     5020,     5020,     5020,     5029)
[7.867s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      169 us) (n =     1) (lvls, us =      168,      168,      168,      168,      169)
[7.867s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      194 us) (n =     1) (lvls, us =      193,      193,      193,      193,      194)
[7.867s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =       92 us) (n =     1) (lvls, us =       92,       92,       92,       92,       92)
[7.867s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       28 us) (n =     1) (lvls, us =       28,       28,       28,       28,       28)
[7.867s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[7.867s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[7.867s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      123 us) (n =     1) (lvls, us =      123,      123,      123,      123,      123)
[7.867s][info][gc,stats    ] 
[7.867s][info][gc,stats    ] 
[7.867s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[7.867s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[7.867s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[7.867s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[7.867s][info][gc,stats    ] 
[7.867s][info][gc,stats    ]     1 successful concurrent GCs
[7.867s][info][gc,stats    ]       0 invoked explicitly
[7.867s][info][gc,stats    ]       0 invoked implicitly
[7.867s][info][gc,stats    ] 
[7.867s][info][gc,stats    ]     0 Degenerated GCs
[7.867s][info][gc,stats    ]       0 caused by allocation failure
[7.867s][info][gc,stats    ]       0 upgraded to Full GC
[7.867s][info][gc,stats    ] 
[7.867s][info][gc,stats    ]     0 Full GCs
[7.867s][info][gc,stats    ]       0 invoked explicitly
[7.867s][info][gc,stats    ]       0 invoked implicitly
[7.868s][info][gc,stats    ]       0 caused by allocation failure
[7.868s][info][gc,stats    ]       0 upgraded from Degenerated GC
[7.868s][info][gc,stats    ] 
[7.868s][info][gc,stats    ] 
