[0.011s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.011s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.011s][info][gc] Using Shenandoah
[0.013s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.013s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.013s][info][gc,init] CPUs: 4 total, 4 available
[0.013s][info][gc,init] Memory: 7937M
[0.013s][info][gc,init] Large Page Support: Disabled
[0.013s][info][gc,init] NUMA Support: Disabled
[0.013s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.013s][info][gc,init] Heap Min Capacity: 6656K
[0.013s][info][gc,init] Heap Initial Capacity: 127488K
[0.013s][info][gc,init] Heap Max Capacity: 2032128K
[0.013s][info][gc,init] Pre-touch: Disabled
[0.013s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.013s][info][gc,init] Heuristics: Adaptive
[0.014s][info][gc,init] Heap Region Count: 3969
[0.014s][info][gc,init] Heap Region Size: 512K
[0.014s][info][gc,init] TLAB Size Max: 512K
[0.014s][info][gc,init] Humongous Object Threshold: 512K
[0.014s][info][gc,init] Parallel Workers: 8
[0.014s][info][gc,init] Concurrent Workers: 2
[0.030s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f7563000000-0x00007f7563c97000-0x00007f7563c97000), size 13201408, SharedBaseAddress: 0x00007f7563000000, ArchiveRelocationMode: 1.
[0.030s][info][gc,metaspace] Compressed class space mapped at: 0x00007f7564000000-0x00007f75a4000000, reserved size: 1073741824
[0.030s][info][gc,metaspace] Narrow klass base: 0x00007f7563000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.335s][info][gc          ] Trigger: Metadata GC Threshold
[1.335s][info][gc,ergo     ] Free: 1789M, Max: 512K regular, 1789M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.335s][info][gc,start    ] GC(0) Concurrent reset
[1.336s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.336s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.336s][info][gc          ] GC(0) Concurrent reset 0.815ms
[1.337s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.337s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.337s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1789M, Non-Taxable: 178M, Alloc Tax Rate: 0.1x
[1.337s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.790ms
[1.337s][info][gc,start    ] GC(0) Concurrent marking roots
[1.337s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.343s][info][gc          ] GC(0) Concurrent marking roots 5.286ms
[1.343s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.343s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.358s][info][gc          ] GC(0) Concurrent marking (unload classes) 15.684ms
[1.359s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.359s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.362s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 340M, Actual Free: 1893M, Max CSet: 84672K, Min Garbage: 0B
[1.362s][info][gc,ergo     ] GC(0) Collectable Garbage: 82567K (99%), Immediate: 5855K (7%), CSet: 76712K (91%)
[1.362s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 84480K, Free: 1794M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.362s][info][gc          ] GC(0) Pause Final Mark (unload classes) 3.646ms
[1.362s][info][gc,start    ] GC(0) Concurrent thread roots
[1.362s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.363s][info][gc          ] GC(0) Concurrent thread roots 0.433ms
[1.363s][info][gc,start    ] GC(0) Concurrent weak references
[1.363s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.363s][info][gc,ref      ] GC(0) Encountered references: Soft: 3956, Weak: 2152, Final: 20, Phantom: 800
[1.363s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1097, Final: 16, Phantom: 787
[1.364s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 489, Final: 0, Phantom: 321
[1.364s][info][gc          ] GC(0) Concurrent weak references 0.784ms
[1.364s][info][gc,start    ] GC(0) Concurrent weak roots
[1.364s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.370s][info][gc          ] GC(0) Concurrent weak roots 6.493ms
[1.370s][info][gc,start    ] GC(0) Concurrent cleanup
[1.370s][info][gc          ] GC(0) Concurrent cleanup 98M->92M(126M) 0.208ms
[1.370s][info][gc,ergo     ] GC(0) Free: 1793M, Max: 512K regular, 1787M humongous, Frag: 1% external, 0% internal; Reserve: 100601K, Max: 512K
[1.370s][info][gc,start    ] GC(0) Concurrent class unloading
[1.370s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.379s][info][gc          ] GC(0) Concurrent class unloading 8.128ms
[1.379s][info][gc,start    ] GC(0) Concurrent strong roots
[1.379s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.381s][info][gc          ] GC(0) Concurrent strong roots 2.135ms
[1.381s][info][gc,start    ] GC(0) Concurrent evacuation
[1.381s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.397s][info][gc          ] GC(0) Concurrent evacuation 16.124ms
[1.397s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.397s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 100M, Free: 1792M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.397s][info][gc          ] GC(0) Pause Init Update Refs 0.059ms
[1.397s][info][gc,start    ] GC(0) Concurrent update references
[1.397s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.404s][info][gc          ] GC(0) Concurrent update references 6.788ms
[1.404s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.404s][info][gc          ] GC(0) Concurrent update thread roots 0.326ms
[1.405s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.405s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.405s][info][gc          ] GC(0) Pause Final Update Refs 0.101ms
[1.405s][info][gc,start    ] GC(0) Concurrent cleanup
[1.405s][info][gc          ] GC(0) Concurrent cleanup 101M->18M(133M) 0.149ms
[1.405s][info][gc,ergo     ] Free: 1866M, Max: 512K regular, 1779M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.405s][info][gc,stats    ] 
[1.405s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.405s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.405s][info][gc,stats    ] 
[1.405s][info][gc,stats    ] Concurrent Reset                    861 us
[1.405s][info][gc,stats    ] Pause Init Mark (G)                1085 us
[1.405s][info][gc,stats    ] Pause Init Mark (N)                 826 us
[1.405s][info][gc,stats    ]   Update Region States               55 us
[1.405s][info][gc,stats    ] Concurrent Mark Roots              5362 us, parallelism: 1.23x
[1.405s][info][gc,stats    ]   CMR: <total>                     6578 us
[1.405s][info][gc,stats    ]   CMR: Thread Roots                1664 us, workers (us):   0, 1664, ---, ---, ---, ---, ---, ---, 
[1.405s][info][gc,stats    ]   CMR: VM Strong Roots              899 us, workers (us): 899,   0, ---, ---, ---, ---, ---, ---, 
[1.405s][info][gc,stats    ]   CMR: CLDG Roots                  4014 us, workers (us): 4014, ---, ---, ---, ---, ---, ---, ---, 
[1.405s][info][gc,stats    ] Concurrent Marking                15715 us
[1.405s][info][gc,stats    ] Pause Final Mark (G)               3832 us
[1.405s][info][gc,stats    ] Pause Final Mark (N)               3657 us
[1.405s][info][gc,stats    ]   Finish Mark                      3384 us
[1.405s][info][gc,stats    ]   Update Region States               35 us
[1.405s][info][gc,stats    ]   Choose Collection Set             115 us
[1.405s][info][gc,stats    ]   Rebuild Free Set                   22 us
[1.405s][info][gc,stats    ] Concurrent Thread Roots             453 us, parallelism: 0.95x
[1.405s][info][gc,stats    ]   CTR: <total>                      428 us
[1.405s][info][gc,stats    ]   CTR: Thread Roots                 428 us, workers (us): 348,  81, ---, ---, ---, ---, ---, ---, 
[1.405s][info][gc,stats    ] Concurrent Weak References          799 us, parallelism: 0.74x
[1.405s][info][gc,stats    ]   CWRF: <total>                     593 us
[1.405s][info][gc,stats    ]   CWRF: Weak References             593 us, workers (us): 593,   0, ---, ---, ---, ---, ---, ---, 
[1.405s][info][gc,stats    ] Concurrent Weak Roots              6573 us
[1.405s][info][gc,stats    ]   Roots                            3194 us, parallelism: 1.49x
[1.406s][info][gc,stats    ]     CWR: <total>                   4768 us
[1.406s][info][gc,stats    ]     CWR: Code Cache Roots          1159 us, workers (us): 617, 542, ---, ---, ---, ---, ---, ---, 
[1.406s][info][gc,stats    ]     CWR: VM Weak Roots             3584 us, workers (us): 2257, 1327, ---, ---, ---, ---, ---, ---, 
[1.406s][info][gc,stats    ]     CWR: CLDG Roots                  25 us, workers (us):  25, ---, ---, ---, ---, ---, ---, ---, 
[1.406s][info][gc,stats    ]   Rendezvous                       3263 us
[1.406s][info][gc,stats    ] Concurrent Cleanup                  226 us
[1.406s][info][gc,stats    ] Concurrent Class Unloading         8145 us
[1.406s][info][gc,stats    ]   Unlink Stale                     4140 us
[1.406s][info][gc,stats    ]     System Dictionary                61 us
[1.406s][info][gc,stats    ]     Weak Class Links                  0 us
[1.406s][info][gc,stats    ]     Code Roots                     4076 us
[1.406s][info][gc,stats    ]   Rendezvous                        410 us
[1.406s][info][gc,stats    ]   Purge Unlinked                   3542 us
[1.406s][info][gc,stats    ]     Code Roots                     3529 us
[1.406s][info][gc,stats    ]     CLDG                             12 us
[1.406s][info][gc,stats    ]     Exception Caches                  0 us
[1.406s][info][gc,stats    ] Concurrent Strong Roots            2214 us, parallelism: 0.85x
[1.406s][info][gc,stats    ]   CSR: <total>                     1888 us
[1.406s][info][gc,stats    ]   CSR: VM Strong Roots               37 us, workers (us):  30,   7, ---, ---, ---, ---, ---, ---, 
[1.406s][info][gc,stats    ]   CSR: CLDG Roots                  1852 us, workers (us): ---, 1852, ---, ---, ---, ---, ---, ---, 
[1.406s][info][gc,stats    ] Concurrent Evacuation             16204 us
[1.406s][info][gc,stats    ] Pause Init Update Refs (G)          227 us
[1.406s][info][gc,stats    ] Pause Init Update Refs (N)           71 us
[1.406s][info][gc,stats    ]   Manage GCLABs                       8 us
[1.406s][info][gc,stats    ] Concurrent Update Refs             6833 us
[1.406s][info][gc,stats    ] Concurrent Update Thread Roots      349 us
[1.406s][info][gc,stats    ] Pause Final Update Refs (G)         254 us
[1.406s][info][gc,stats    ] Pause Final Update Refs (N)         116 us
[1.406s][info][gc,stats    ]   Update Region States               23 us
[1.406s][info][gc,stats    ]   Trash Collection Set                8 us
[1.406s][info][gc,stats    ]   Rebuild Free Set                   22 us
[1.406s][info][gc,stats    ] Concurrent Cleanup                  170 us
[1.406s][info][gc,stats    ] 
[1.406s][info][gc,stats    ] Allocation pacing accrued:
[1.406s][info][gc,stats    ]       0 of  1393 ms (  0.0%): <total>
[1.406s][info][gc,stats    ]       0 of  1393 ms (  0.0%): <average total>
[1.406s][info][gc,stats    ] 
[1.406s][info][gc,metaspace] Metaspace: 21254K(21568K)->21756K(22144K) NonClass: 18911K(19072K)->19329K(19520K) Class: 2343K(2496K)->2427K(2624K)
[1.406s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[7.869s][info][gc          ] Cancelling GC: Stopping VM
[7.870s][info][gc,heap,exit] Heap
[7.870s][info][gc,heap,exit] Shenandoah Heap
[7.870s][info][gc,heap,exit]  1984M max, 1984M soft max, 133M committed, 37394K used
[7.870s][info][gc,heap,exit]  3969 x 512K regions
[7.870s][info][gc,heap,exit] Status: cancelled
[7.870s][info][gc,heap,exit] Reserved region:
[7.870s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[7.870s][info][gc,heap,exit] Collection set:
[7.870s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[7.870s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[7.870s][info][gc,heap,exit] 
[7.870s][info][gc,heap,exit]  Metaspace       used 25397K, committed 25792K, reserved 1114112K
[7.870s][info][gc,heap,exit]   class space    used 2924K, committed 3072K, reserved 1048576K
[7.870s][info][gc,stats    ] 
[7.870s][info][gc,stats    ] GC STATISTICS:
[7.870s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[7.870s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[7.870s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[7.870s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[7.870s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[7.870s][info][gc,stats    ] 
[7.870s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[7.870s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[7.870s][info][gc,stats    ] 
[7.871s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[7.871s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[7.871s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[7.871s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[7.871s][info][gc,stats    ] 
[7.871s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[7.871s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[7.871s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[7.871s][info][gc,stats    ]   Raise max pacing delay with care.
[7.871s][info][gc,stats    ] 
[7.871s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      861 us) (n =     1) (lvls, us =      861,      861,      861,      861,      861)
[7.871s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =     1085 us) (n =     1) (lvls, us =     1074,     1074,     1074,     1074,     1085)
[7.871s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      826 us) (n =     1) (lvls, us =      824,      824,      824,      824,      826)
[7.871s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       55 us) (n =     1) (lvls, us =       55,       55,       55,       55,       55)
[7.871s][info][gc,stats    ] Concurrent Mark Roots          =    0.005 s (a =     5362 us) (n =     1) (lvls, us =     5352,     5352,     5352,     5352,     5362)
[7.871s][info][gc,stats    ]   CMR: <total>                 =    0.007 s (a =     6578 us) (n =     1) (lvls, us =     6562,     6562,     6562,     6562,     6578)
[7.871s][info][gc,stats    ]   CMR: Thread Roots            =    0.002 s (a =     1664 us) (n =     1) (lvls, us =     1660,     1660,     1660,     1660,     1664)
[7.871s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      899 us) (n =     1) (lvls, us =      898,      898,      898,      898,      899)
[7.871s][info][gc,stats    ]   CMR: CLDG Roots              =    0.004 s (a =     4014 us) (n =     1) (lvls, us =     4004,     4004,     4004,     4004,     4014)
[7.871s][info][gc,stats    ] Concurrent Marking             =    0.016 s (a =    15715 us) (n =     1) (lvls, us =    15625,    15625,    15625,    15625,    15715)
[7.871s][info][gc,stats    ] Pause Final Mark (G)           =    0.004 s (a =     3832 us) (n =     1) (lvls, us =     3828,     3828,     3828,     3828,     3832)
[7.871s][info][gc,stats    ] Pause Final Mark (N)           =    0.004 s (a =     3657 us) (n =     1) (lvls, us =     3652,     3652,     3652,     3652,     3657)
[7.871s][info][gc,stats    ]   Finish Mark                  =    0.003 s (a =     3384 us) (n =     1) (lvls, us =     3379,     3379,     3379,     3379,     3384)
[7.871s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       35 us) (n =     1) (lvls, us =       35,       35,       35,       35,       35)
[7.871s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =      115 us) (n =     1) (lvls, us =      113,      113,      113,      113,      115)
[7.871s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       22 us) (n =     1) (lvls, us =       21,       21,       21,       21,       22)
[7.871s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      453 us) (n =     1) (lvls, us =      451,      451,      451,      451,      453)
[7.871s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      428 us) (n =     1) (lvls, us =      428,      428,      428,      428,      428)
[7.871s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      428 us) (n =     1) (lvls, us =      428,      428,      428,      428,      428)
[7.871s][info][gc,stats    ] Concurrent Weak References     =    0.001 s (a =      799 us) (n =     1) (lvls, us =      799,      799,      799,      799,      799)
[7.871s][info][gc,stats    ]   CWRF: <total>                =    0.001 s (a =      593 us) (n =     1) (lvls, us =      592,      592,      592,      592,      593)
[7.871s][info][gc,stats    ]   CWRF: Weak References        =    0.001 s (a =      593 us) (n =     1) (lvls, us =      592,      592,      592,      592,      593)
[7.871s][info][gc,stats    ] Concurrent Weak Roots          =    0.007 s (a =     6573 us) (n =     1) (lvls, us =     6562,     6562,     6562,     6562,     6573)
[7.871s][info][gc,stats    ]   Roots                        =    0.003 s (a =     3194 us) (n =     1) (lvls, us =     3184,     3184,     3184,     3184,     3194)
[7.871s][info][gc,stats    ]     CWR: <total>               =    0.005 s (a =     4768 us) (n =     1) (lvls, us =     4766,     4766,     4766,     4766,     4768)
[7.871s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =     1159 us) (n =     1) (lvls, us =     1152,     1152,     1152,     1152,     1159)
[7.871s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.004 s (a =     3584 us) (n =     1) (lvls, us =     3574,     3574,     3574,     3574,     3584)
[7.871s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       25 us) (n =     1) (lvls, us =       25,       25,       25,       25,       25)
[7.871s][info][gc,stats    ]   Rendezvous                   =    0.003 s (a =     3263 us) (n =     1) (lvls, us =     3262,     3262,     3262,     3262,     3263)
[7.871s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      226 us) (n =     1) (lvls, us =      225,      225,      225,      225,      226)
[7.871s][info][gc,stats    ] Concurrent Class Unloading     =    0.008 s (a =     8145 us) (n =     1) (lvls, us =     8145,     8145,     8145,     8145,     8145)
[7.871s][info][gc,stats    ]   Unlink Stale                 =    0.004 s (a =     4140 us) (n =     1) (lvls, us =     4121,     4121,     4121,     4121,     4140)
[7.871s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       61 us) (n =     1) (lvls, us =       61,       61,       61,       61,       61)
[7.871s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.871s][info][gc,stats    ]     Code Roots                 =    0.004 s (a =     4076 us) (n =     1) (lvls, us =     4062,     4062,     4062,     4062,     4076)
[7.871s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      410 us) (n =     1) (lvls, us =      408,      408,      408,      408,      410)
[7.871s][info][gc,stats    ]   Purge Unlinked               =    0.004 s (a =     3542 us) (n =     1) (lvls, us =     3535,     3535,     3535,     3535,     3542)
[7.871s][info][gc,stats    ]     Code Roots                 =    0.004 s (a =     3529 us) (n =     1) (lvls, us =     3516,     3516,     3516,     3516,     3529)
[7.871s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       12 us) (n =     1) (lvls, us =       12,       12,       12,       12,       12)
[7.871s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.871s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     2214 us) (n =     1) (lvls, us =     2207,     2207,     2207,     2207,     2214)
[7.871s][info][gc,stats    ]   CSR: <total>                 =    0.002 s (a =     1888 us) (n =     1) (lvls, us =     1875,     1875,     1875,     1875,     1888)
[7.871s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       37 us) (n =     1) (lvls, us =       37,       37,       37,       37,       37)
[7.871s][info][gc,stats    ]   CSR: CLDG Roots              =    0.002 s (a =     1852 us) (n =     1) (lvls, us =     1836,     1836,     1836,     1836,     1852)
[7.871s][info][gc,stats    ] Concurrent Evacuation          =    0.016 s (a =    16204 us) (n =     1) (lvls, us =    16016,    16016,    16016,    16016,    16204)
[7.871s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      227 us) (n =     1) (lvls, us =      227,      227,      227,      227,      227)
[7.871s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       71 us) (n =     1) (lvls, us =       71,       71,       71,       71,       71)
[7.871s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        8 us) (n =     1) (lvls, us =        8,        8,        8,        8,        8)
[7.871s][info][gc,stats    ] Concurrent Update Refs         =    0.007 s (a =     6833 us) (n =     1) (lvls, us =     6816,     6816,     6816,     6816,     6833)
[7.871s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      349 us) (n =     1) (lvls, us =      348,      348,      348,      348,      349)
[7.871s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      254 us) (n =     1) (lvls, us =      252,      252,      252,      252,      254)
[7.871s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      116 us) (n =     1) (lvls, us =      115,      115,      115,      115,      116)
[7.871s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       23 us) (n =     1) (lvls, us =       23,       23,       23,       23,       23)
[7.871s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        8 us) (n =     1) (lvls, us =        8,        8,        8,        8,        8)
[7.872s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       22 us) (n =     1) (lvls, us =       21,       21,       21,       21,       22)
[7.872s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      170 us) (n =     1) (lvls, us =      170,      170,      170,      170,      170)
[7.872s][info][gc,stats    ] 
[7.872s][info][gc,stats    ] 
[7.872s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[7.872s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[7.872s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[7.872s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[7.872s][info][gc,stats    ] 
[7.872s][info][gc,stats    ]     1 successful concurrent GCs
[7.872s][info][gc,stats    ]       0 invoked explicitly
[7.872s][info][gc,stats    ]       0 invoked implicitly
[7.872s][info][gc,stats    ] 
[7.872s][info][gc,stats    ]     0 Degenerated GCs
[7.872s][info][gc,stats    ]       0 caused by allocation failure
[7.872s][info][gc,stats    ]       0 upgraded to Full GC
[7.872s][info][gc,stats    ] 
[7.872s][info][gc,stats    ]     0 Full GCs
[7.872s][info][gc,stats    ]       0 invoked explicitly
[7.872s][info][gc,stats    ]       0 invoked implicitly
[7.872s][info][gc,stats    ]       0 caused by allocation failure
[7.872s][info][gc,stats    ]       0 upgraded from Degenerated GC
[7.872s][info][gc,stats    ] 
[7.872s][info][gc,stats    ] 
