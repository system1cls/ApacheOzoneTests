[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.006s][info][gc] Using Shenandoah
[0.007s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.012s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.012s][info][gc,init] CPUs: 4 total, 4 available
[0.012s][info][gc,init] Memory: 7937M
[0.012s][info][gc,init] Large Page Support: Disabled
[0.012s][info][gc,init] NUMA Support: Disabled
[0.012s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.012s][info][gc,init] Heap Min Capacity: 6656K
[0.012s][info][gc,init] Heap Initial Capacity: 127488K
[0.012s][info][gc,init] Heap Max Capacity: 2032128K
[0.012s][info][gc,init] Pre-touch: Disabled
[0.012s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.012s][info][gc,init] Heuristics: Adaptive
[0.012s][info][gc,init] Heap Region Count: 3969
[0.012s][info][gc,init] Heap Region Size: 512K
[0.012s][info][gc,init] TLAB Size Max: 512K
[0.012s][info][gc,init] Humongous Object Threshold: 512K
[0.012s][info][gc,init] Parallel Workers: 8
[0.012s][info][gc,init] Concurrent Workers: 2
[0.020s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f5c0f000000-0x00007f5c0fc97000-0x00007f5c0fc97000), size 13201408, SharedBaseAddress: 0x00007f5c0f000000, ArchiveRelocationMode: 1.
[0.020s][info][gc,metaspace] Compressed class space mapped at: 0x00007f5c10000000-0x00007f5c50000000, reserved size: 1073741824
[0.021s][info][gc,metaspace] Narrow klass base: 0x00007f5c0f000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[2.101s][info][gc          ] Trigger: Metadata GC Threshold
[2.101s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[2.101s][info][gc,start    ] GC(0) Concurrent reset
[2.101s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[2.101s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[2.102s][info][gc          ] GC(0) Concurrent reset 0.541ms
[2.102s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[2.102s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[2.102s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[2.102s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.582ms
[2.102s][info][gc,start    ] GC(0) Concurrent marking roots
[2.102s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[2.105s][info][gc          ] GC(0) Concurrent marking roots 2.467ms
[2.105s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[2.105s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[2.155s][info][gc          ] GC(0) Concurrent marking (unload classes) 50.361ms
[2.155s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[2.155s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[2.159s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 241M, Actual Free: 1847M, Max CSet: 84672K, Min Garbage: 0B
[2.159s][info][gc,ergo     ] GC(0) Collectable Garbage: 72645K (98%), Immediate: 5871K (7%), CSet: 66774K (90%)
[2.159s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 75776K, Free: 1748M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.159s][info][gc          ] GC(0) Pause Final Mark (unload classes) 3.626ms
[2.159s][info][gc,start    ] GC(0) Concurrent thread roots
[2.159s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[2.159s][info][gc          ] GC(0) Concurrent thread roots 0.197ms
[2.159s][info][gc,start    ] GC(0) Concurrent weak references
[2.159s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[2.160s][info][gc,ref      ] GC(0) Encountered references: Soft: 3953, Weak: 2098, Final: 4, Phantom: 820
[2.160s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1273, Final: 0, Phantom: 478
[2.160s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 498, Final: 0, Phantom: 230
[2.160s][info][gc          ] GC(0) Concurrent weak references 0.513ms
[2.160s][info][gc,start    ] GC(0) Concurrent weak roots
[2.160s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[2.162s][info][gc          ] GC(0) Concurrent weak roots 1.708ms
[2.162s][info][gc,start    ] GC(0) Concurrent cleanup
[2.162s][info][gc          ] GC(0) Concurrent cleanup 142M->136M(145M) 0.100ms
[2.162s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1740M humongous, Frag: 1% external, 0% internal; Reserve: 100976K, Max: 512K
[2.162s][info][gc,start    ] GC(0) Concurrent class unloading
[2.162s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[2.168s][info][gc          ] GC(0) Concurrent class unloading 6.049ms
[2.168s][info][gc,start    ] GC(0) Concurrent strong roots
[2.168s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[2.169s][info][gc          ] GC(0) Concurrent strong roots 1.087ms
[2.169s][info][gc,start    ] GC(0) Concurrent evacuation
[2.169s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[2.181s][info][gc          ] GC(0) Concurrent evacuation 12.440ms
[2.181s][info][gc,start    ] GC(0) Pause Init Update Refs
[2.181s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 146M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.181s][info][gc          ] GC(0) Pause Init Update Refs 0.074ms
[2.182s][info][gc,start    ] GC(0) Concurrent update references
[2.182s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[2.199s][info][gc          ] GC(0) Concurrent update references 17.678ms
[2.199s][info][gc,start    ] GC(0) Concurrent update thread roots
[2.200s][info][gc          ] GC(0) Concurrent update thread roots 0.300ms
[2.200s][info][gc,start    ] GC(0) Pause Final Update Refs
[2.200s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[2.200s][info][gc          ] GC(0) Pause Final Update Refs 0.103ms
[2.200s][info][gc,start    ] GC(0) Concurrent cleanup
[2.200s][info][gc          ] GC(0) Concurrent cleanup 147M->73M(154M) 0.128ms
[2.200s][info][gc,ergo     ] Free: 1809M, Max: 512K regular, 1730M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[2.200s][info][gc,stats    ] 
[2.200s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[2.200s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[2.200s][info][gc,stats    ] 
[2.200s][info][gc,stats    ] Concurrent Reset                    557 us
[2.200s][info][gc,stats    ] Pause Init Mark (G)                 720 us
[2.200s][info][gc,stats    ] Pause Init Mark (N)                 613 us
[2.200s][info][gc,stats    ]   Update Region States               23 us
[2.200s][info][gc,stats    ] Concurrent Mark Roots              2481 us, parallelism: 1.86x
[2.200s][info][gc,stats    ]   CMR: <total>                     4622 us
[2.200s][info][gc,stats    ]   CMR: Thread Roots                2566 us, workers (us): 631, 1935, ---, ---, ---, ---, ---, ---, 
[2.200s][info][gc,stats    ]   CMR: VM Strong Roots              812 us, workers (us): 406, 407, ---, ---, ---, ---, ---, ---, 
[2.200s][info][gc,stats    ]   CMR: CLDG Roots                  1244 us, workers (us): 1244, ---, ---, ---, ---, ---, ---, ---, 
[2.200s][info][gc,stats    ] Concurrent Marking                50392 us
[2.200s][info][gc,stats    ] Pause Final Mark (G)               3820 us
[2.200s][info][gc,stats    ] Pause Final Mark (N)               3635 us
[2.200s][info][gc,stats    ]   Finish Mark                      3426 us
[2.200s][info][gc,stats    ]   Update Region States               36 us
[2.200s][info][gc,stats    ]   Choose Collection Set              97 us
[2.200s][info][gc,stats    ]   Rebuild Free Set                   16 us
[2.200s][info][gc,stats    ] Concurrent Thread Roots             211 us, parallelism: 1.24x
[2.200s][info][gc,stats    ]   CTR: <total>                      261 us
[2.200s][info][gc,stats    ]   CTR: Thread Roots                 261 us, workers (us): 135, 126, ---, ---, ---, ---, ---, ---, 
[2.200s][info][gc,stats    ] Concurrent Weak References          522 us, parallelism: 0.78x
[2.200s][info][gc,stats    ]   CWRF: <total>                     406 us
[2.200s][info][gc,stats    ]   CWRF: Weak References             406 us, workers (us): 406,   0, ---, ---, ---, ---, ---, ---, 
[2.200s][info][gc,stats    ] Concurrent Weak Roots              1729 us
[2.200s][info][gc,stats    ]   Roots                            1574 us, parallelism: 1.56x
[2.200s][info][gc,stats    ]     CWR: <total>                   2455 us
[2.201s][info][gc,stats    ]     CWR: Code Cache Roots           704 us, workers (us): 323, 380, ---, ---, ---, ---, ---, ---, 
[2.201s][info][gc,stats    ]     CWR: VM Weak Roots             1739 us, workers (us): 1131, 609, ---, ---, ---, ---, ---, ---, 
[2.201s][info][gc,stats    ]     CWR: CLDG Roots                  12 us, workers (us): ---,  12, ---, ---, ---, ---, ---, ---, 
[2.201s][info][gc,stats    ]   Rendezvous                        116 us
[2.201s][info][gc,stats    ] Concurrent Cleanup                  109 us
[2.201s][info][gc,stats    ] Concurrent Class Unloading         6068 us
[2.201s][info][gc,stats    ]   Unlink Stale                     2638 us
[2.201s][info][gc,stats    ]     System Dictionary                33 us
[2.201s][info][gc,stats    ]     Weak Class Links                  0 us
[2.201s][info][gc,stats    ]     Code Roots                     2604 us
[2.201s][info][gc,stats    ]   Rendezvous                        122 us
[2.201s][info][gc,stats    ]   Purge Unlinked                   3270 us
[2.201s][info][gc,stats    ]     Code Roots                     3259 us
[2.201s][info][gc,stats    ]     CLDG                             11 us
[2.201s][info][gc,stats    ]     Exception Caches                  0 us
[2.201s][info][gc,stats    ] Concurrent Strong Roots            1110 us, parallelism: 0.96x
[2.201s][info][gc,stats    ]   CSR: <total>                     1061 us
[2.201s][info][gc,stats    ]   CSR: VM Strong Roots               32 us, workers (us):  27,   5, ---, ---, ---, ---, ---, ---, 
[2.201s][info][gc,stats    ]   CSR: CLDG Roots                  1028 us, workers (us): ---, 1028, ---, ---, ---, ---, ---, ---, 
[2.201s][info][gc,stats    ] Concurrent Evacuation             12464 us
[2.201s][info][gc,stats    ] Pause Init Update Refs (G)          206 us
[2.201s][info][gc,stats    ] Pause Init Update Refs (N)           86 us
[2.201s][info][gc,stats    ]   Manage GCLABs                       5 us
[2.201s][info][gc,stats    ] Concurrent Update Refs            17711 us
[2.201s][info][gc,stats    ] Concurrent Update Thread Roots      316 us
[2.201s][info][gc,stats    ] Pause Final Update Refs (G)         347 us
[2.201s][info][gc,stats    ] Pause Final Update Refs (N)         129 us
[2.201s][info][gc,stats    ]   Update Region States               36 us
[2.201s][info][gc,stats    ]   Trash Collection Set                3 us
[2.201s][info][gc,stats    ]   Rebuild Free Set                   17 us
[2.201s][info][gc,stats    ] Concurrent Cleanup                  142 us
[2.201s][info][gc,stats    ] 
[2.201s][info][gc,stats    ] Allocation pacing accrued:
[2.201s][info][gc,stats    ]       0 of  2194 ms (  0.0%): <total>
[2.201s][info][gc,stats    ]       0 of  2194 ms (  0.0%): <average total>
[2.201s][info][gc,stats    ] 
[2.201s][info][gc,metaspace] Metaspace: 21248K(21568K)->22198K(22528K) NonClass: 18900K(19072K)->19720K(19904K) Class: 2348K(2496K)->2478K(2624K)
[2.201s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.525s][info][gc          ] Cancelling GC: Stopping VM
[6.526s][info][gc,heap,exit] Heap
[6.526s][info][gc,heap,exit] Shenandoah Heap
[6.526s][info][gc,heap,exit]  1984M max, 1984M soft max, 154M committed, 86536K used
[6.526s][info][gc,heap,exit]  3969 x 512K regions
[6.526s][info][gc,heap,exit] Status: cancelled
[6.526s][info][gc,heap,exit] Reserved region:
[6.526s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.526s][info][gc,heap,exit] Collection set:
[6.526s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.526s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.526s][info][gc,heap,exit] 
[6.526s][info][gc,heap,exit]  Metaspace       used 25111K, committed 25408K, reserved 1114112K
[6.526s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.526s][info][gc,stats    ] 
[6.526s][info][gc,stats    ] GC STATISTICS:
[6.526s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.526s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.526s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.526s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.526s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.526s][info][gc,stats    ] 
[6.526s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.526s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.526s][info][gc,stats    ] 
[6.526s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.526s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.526s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.526s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.526s][info][gc,stats    ] 
[6.526s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.526s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.526s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.526s][info][gc,stats    ]   Raise max pacing delay with care.
[6.526s][info][gc,stats    ] 
[6.526s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      557 us) (n =     1) (lvls, us =      557,      557,      557,      557,      557)
[6.526s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      720 us) (n =     1) (lvls, us =      719,      719,      719,      719,      720)
[6.526s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      613 us) (n =     1) (lvls, us =      611,      611,      611,      611,      613)
[6.526s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       23 us) (n =     1) (lvls, us =       23,       23,       23,       23,       23)
[6.526s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     2481 us) (n =     1) (lvls, us =     2480,     2480,     2480,     2480,     2481)
[6.526s][info][gc,stats    ]   CMR: <total>                 =    0.005 s (a =     4622 us) (n =     1) (lvls, us =     4609,     4609,     4609,     4609,     4622)
[6.526s][info][gc,stats    ]   CMR: Thread Roots            =    0.003 s (a =     2566 us) (n =     1) (lvls, us =     2559,     2559,     2559,     2559,     2566)
[6.526s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      812 us) (n =     1) (lvls, us =      811,      811,      811,      811,      812)
[6.526s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1244 us) (n =     1) (lvls, us =     1230,     1230,     1230,     1230,     1244)
[6.527s][info][gc,stats    ] Concurrent Marking             =    0.050 s (a =    50392 us) (n =     1) (lvls, us =    50391,    50391,    50391,    50391,    50392)
[6.527s][info][gc,stats    ] Pause Final Mark (G)           =    0.004 s (a =     3820 us) (n =     1) (lvls, us =     3809,     3809,     3809,     3809,     3820)
[6.527s][info][gc,stats    ] Pause Final Mark (N)           =    0.004 s (a =     3635 us) (n =     1) (lvls, us =     3633,     3633,     3633,     3633,     3635)
[6.527s][info][gc,stats    ]   Finish Mark                  =    0.003 s (a =     3426 us) (n =     1) (lvls, us =     3418,     3418,     3418,     3418,     3426)
[6.527s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       36 us) (n =     1) (lvls, us =       36,       36,       36,       36,       36)
[6.527s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       97 us) (n =     1) (lvls, us =       97,       97,       97,       97,       97)
[6.527s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[6.527s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      211 us) (n =     1) (lvls, us =      209,      209,      209,      209,      211)
[6.527s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      261 us) (n =     1) (lvls, us =      260,      260,      260,      260,      261)
[6.527s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      261 us) (n =     1) (lvls, us =      260,      260,      260,      260,      261)
[6.527s][info][gc,stats    ] Concurrent Weak References     =    0.001 s (a =      522 us) (n =     1) (lvls, us =      521,      521,      521,      521,      522)
[6.527s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      406 us) (n =     1) (lvls, us =      404,      404,      404,      404,      406)
[6.527s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      406 us) (n =     1) (lvls, us =      404,      404,      404,      404,      406)
[6.527s][info][gc,stats    ] Concurrent Weak Roots          =    0.002 s (a =     1729 us) (n =     1) (lvls, us =     1719,     1719,     1719,     1719,     1729)
[6.527s][info][gc,stats    ]   Roots                        =    0.002 s (a =     1574 us) (n =     1) (lvls, us =     1562,     1562,     1562,     1562,     1574)
[6.527s][info][gc,stats    ]     CWR: <total>               =    0.002 s (a =     2455 us) (n =     1) (lvls, us =     2441,     2441,     2441,     2441,     2455)
[6.527s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      704 us) (n =     1) (lvls, us =      703,      703,      703,      703,      704)
[6.527s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1739 us) (n =     1) (lvls, us =     1738,     1738,     1738,     1738,     1739)
[6.527s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       12 us) (n =     1) (lvls, us =       12,       12,       12,       12,       12)
[6.527s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      116 us) (n =     1) (lvls, us =      115,      115,      115,      115,      116)
[6.527s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      109 us) (n =     1) (lvls, us =      107,      107,      107,      107,      109)
[6.527s][info][gc,stats    ] Concurrent Class Unloading     =    0.006 s (a =     6068 us) (n =     1) (lvls, us =     6055,     6055,     6055,     6055,     6068)
[6.527s][info][gc,stats    ]   Unlink Stale                 =    0.003 s (a =     2638 us) (n =     1) (lvls, us =     2637,     2637,     2637,     2637,     2638)
[6.527s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       33 us) (n =     1) (lvls, us =       32,       32,       32,       32,       33)
[6.527s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.527s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2604 us) (n =     1) (lvls, us =     2598,     2598,     2598,     2598,     2604)
[6.527s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      122 us) (n =     1) (lvls, us =      121,      121,      121,      121,      122)
[6.527s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     3270 us) (n =     1) (lvls, us =     3262,     3262,     3262,     3262,     3270)
[6.527s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     3259 us) (n =     1) (lvls, us =     3242,     3242,     3242,     3242,     3259)
[6.527s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       11 us) (n =     1) (lvls, us =       11,       11,       11,       11,       11)
[6.527s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.527s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1110 us) (n =     1) (lvls, us =     1094,     1094,     1094,     1094,     1110)
[6.527s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1061 us) (n =     1) (lvls, us =     1055,     1055,     1055,     1055,     1061)
[6.527s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       32 us) (n =     1) (lvls, us =       32,       32,       32,       32,       32)
[6.527s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1028 us) (n =     1) (lvls, us =     1016,     1016,     1016,     1016,     1028)
[6.527s][info][gc,stats    ] Concurrent Evacuation          =    0.012 s (a =    12464 us) (n =     1) (lvls, us =    12305,    12305,    12305,    12305,    12464)
[6.527s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      206 us) (n =     1) (lvls, us =      205,      205,      205,      205,      206)
[6.527s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       86 us) (n =     1) (lvls, us =       86,       86,       86,       86,       86)
[6.527s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.527s][info][gc,stats    ] Concurrent Update Refs         =    0.018 s (a =    17711 us) (n =     1) (lvls, us =    17578,    17578,    17578,    17578,    17711)
[6.527s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      316 us) (n =     1) (lvls, us =      314,      314,      314,      314,      316)
[6.527s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      347 us) (n =     1) (lvls, us =      346,      346,      346,      346,      347)
[6.527s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      129 us) (n =     1) (lvls, us =      129,      129,      129,      129,      129)
[6.527s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       36 us) (n =     1) (lvls, us =       36,       36,       36,       36,       36)
[6.527s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        3 us) (n =     1) (lvls, us =        3,        3,        3,        3,        3)
[6.527s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[6.527s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      142 us) (n =     1) (lvls, us =      141,      141,      141,      141,      142)
[6.527s][info][gc,stats    ] 
[6.527s][info][gc,stats    ] 
[6.527s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.528s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.528s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.528s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.528s][info][gc,stats    ] 
[6.528s][info][gc,stats    ]     1 successful concurrent GCs
[6.528s][info][gc,stats    ]       0 invoked explicitly
[6.528s][info][gc,stats    ]       0 invoked implicitly
[6.528s][info][gc,stats    ] 
[6.528s][info][gc,stats    ]     0 Degenerated GCs
[6.528s][info][gc,stats    ]       0 caused by allocation failure
[6.528s][info][gc,stats    ]       0 upgraded to Full GC
[6.528s][info][gc,stats    ] 
[6.528s][info][gc,stats    ]     0 Full GCs
[6.528s][info][gc,stats    ]       0 invoked explicitly
[6.528s][info][gc,stats    ]       0 invoked implicitly
[6.528s][info][gc,stats    ]       0 caused by allocation failure
[6.528s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.528s][info][gc,stats    ] 
[6.528s][info][gc,stats    ] 
