[0.010s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.010s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.010s][info][gc] Using Shenandoah
[0.011s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.011s][info][gc,init] CPUs: 4 total, 4 available
[0.011s][info][gc,init] Memory: 7937M
[0.011s][info][gc,init] Large Page Support: Disabled
[0.011s][info][gc,init] NUMA Support: Disabled
[0.011s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.011s][info][gc,init] Heap Min Capacity: 6656K
[0.011s][info][gc,init] Heap Initial Capacity: 127488K
[0.011s][info][gc,init] Heap Max Capacity: 2032128K
[0.011s][info][gc,init] Pre-touch: Disabled
[0.011s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.011s][info][gc,init] Heuristics: Adaptive
[0.011s][info][gc,init] Heap Region Count: 3969
[0.011s][info][gc,init] Heap Region Size: 512K
[0.011s][info][gc,init] TLAB Size Max: 512K
[0.011s][info][gc,init] Humongous Object Threshold: 512K
[0.011s][info][gc,init] Parallel Workers: 8
[0.011s][info][gc,init] Concurrent Workers: 2
[0.030s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f2a3b000000-0x00007f2a3bc97000-0x00007f2a3bc97000), size 13201408, SharedBaseAddress: 0x00007f2a3b000000, ArchiveRelocationMode: 1.
[0.030s][info][gc,metaspace] Compressed class space mapped at: 0x00007f2a3c000000-0x00007f2a7c000000, reserved size: 1073741824
[0.030s][info][gc,metaspace] Narrow klass base: 0x00007f2a3b000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.959s][info][gc          ] Trigger: Metadata GC Threshold
[1.960s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.960s][info][gc,start    ] GC(0) Concurrent reset
[1.960s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.960s][info][gc          ] GC(0) Concurrent reset 0.495ms
[1.960s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.961s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.961s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.616ms
[1.961s][info][gc,start    ] GC(0) Concurrent marking roots
[1.961s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.963s][info][gc          ] GC(0) Concurrent marking roots 2.119ms
[1.963s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.963s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[2.017s][info][gc          ] GC(0) Concurrent marking (unload classes) 53.482ms
[2.017s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[2.017s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[2.017s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1845M, Max CSet: 84672K, Min Garbage: 0B
[2.017s][info][gc,ergo     ] GC(0) Collectable Garbage: 72556K (98%), Immediate: 4335K (5%), CSet: 68221K (92%)
[2.017s][info][gc          ] GC(0) Pause Final Mark (unload classes) 0.314ms
[2.017s][info][gc,start    ] GC(0) Concurrent thread roots
[2.017s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[2.019s][info][gc          ] GC(0) Concurrent thread roots 2.001ms
[2.019s][info][gc,start    ] GC(0) Concurrent weak references
[2.019s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[2.020s][info][gc,ref      ] GC(0) Encountered references: Soft: 3953, Weak: 2096, Final: 4, Phantom: 820
[2.020s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1353, Final: 0, Phantom: 478
[2.020s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 498, Final: 0, Phantom: 230
[2.020s][info][gc          ] GC(0) Concurrent weak references 0.424ms
[2.020s][info][gc,start    ] GC(0) Concurrent weak roots
[2.020s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[2.022s][info][gc          ] GC(0) Concurrent weak roots 1.945ms
[2.022s][info][gc,start    ] GC(0) Concurrent cleanup
[2.022s][info][gc          ] GC(0) Concurrent cleanup 142M->137M(145M) 0.109ms
[2.022s][info][gc,ergo     ] GC(0) Free: 1745M, Max: 512K regular, 1741M humongous, Frag: 1% external, 0% internal; Reserve: 101039K, Max: 512K
[2.022s][info][gc,start    ] GC(0) Concurrent class unloading
[2.022s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[2.027s][info][gc          ] GC(0) Concurrent class unloading 4.968ms
[2.027s][info][gc,start    ] GC(0) Concurrent strong roots
[2.027s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[2.028s][info][gc          ] GC(0) Concurrent strong roots 1.199ms
[2.028s][info][gc,start    ] GC(0) Concurrent evacuation
[2.028s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[2.038s][info][gc          ] GC(0) Concurrent evacuation 9.838ms
[2.038s][info][gc,start    ] GC(0) Pause Init Update Refs
[2.038s][info][gc          ] GC(0) Pause Init Update Refs 0.033ms
[2.038s][info][gc,start    ] GC(0) Concurrent update references
[2.038s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[2.057s][info][gc          ] GC(0) Concurrent update references 18.816ms
[2.057s][info][gc,start    ] GC(0) Concurrent update thread roots
[2.057s][info][gc          ] GC(0) Concurrent update thread roots 0.227ms
[2.057s][info][gc,start    ] GC(0) Pause Final Update Refs
[2.057s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[2.057s][info][gc          ] GC(0) Pause Final Update Refs 0.073ms
[2.057s][info][gc,start    ] GC(0) Concurrent cleanup
[2.057s][info][gc          ] GC(0) Concurrent cleanup 147M->72M(153M) 0.087ms
[2.057s][info][gc,ergo     ] Free: 1810M, Max: 512K regular, 1731M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[2.057s][info][gc,stats    ] 
[2.057s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[2.058s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[2.058s][info][gc,stats    ] 
[2.058s][info][gc,stats    ] Concurrent Reset                    542 us
[2.058s][info][gc,stats    ] Pause Init Mark (G)                 916 us
[2.058s][info][gc,stats    ] Pause Init Mark (N)                 634 us
[2.058s][info][gc,stats    ]   Update Region States               39 us
[2.058s][info][gc,stats    ] Concurrent Mark Roots              2196 us, parallelism: 1.52x
[2.058s][info][gc,stats    ]   CMR: <total>                     3340 us
[2.058s][info][gc,stats    ]   CMR: Thread Roots                1941 us, workers (us): 467, 1473, ---, ---, ---, ---, ---, ---, 
[2.058s][info][gc,stats    ]   CMR: VM Strong Roots              363 us, workers (us): 363,   0, ---, ---, ---, ---, ---, ---, 
[2.058s][info][gc,stats    ]   CMR: CLDG Roots                  1036 us, workers (us): 1036, ---, ---, ---, ---, ---, ---, ---, 
[2.058s][info][gc,stats    ] Concurrent Marking                53508 us
[2.058s][info][gc,stats    ] Pause Final Mark (G)                437 us
[2.058s][info][gc,stats    ] Pause Final Mark (N)                328 us
[2.058s][info][gc,stats    ]   Finish Mark                       115 us
[2.058s][info][gc,stats    ]   Update Region States               35 us
[2.058s][info][gc,stats    ]   Choose Collection Set              91 us
[2.058s][info][gc,stats    ]   Rebuild Free Set                   19 us
[2.058s][info][gc,stats    ] Concurrent Thread Roots            2016 us, parallelism: 1.06x
[2.058s][info][gc,stats    ]   CTR: <total>                     2131 us
[2.058s][info][gc,stats    ]   CTR: Thread Roots                2131 us, workers (us): 271, 1860, ---, ---, ---, ---, ---, ---, 
[2.058s][info][gc,stats    ] Concurrent Weak References          433 us, parallelism: 0.83x
[2.058s][info][gc,stats    ]   CWRF: <total>                     361 us
[2.058s][info][gc,stats    ]   CWRF: Weak References             361 us, workers (us): 360,   1, ---, ---, ---, ---, ---, ---, 
[2.058s][info][gc,stats    ] Concurrent Weak Roots              1968 us
[2.058s][info][gc,stats    ]   Roots                            1788 us, parallelism: 1.87x
[2.058s][info][gc,stats    ]     CWR: <total>                   3341 us
[2.058s][info][gc,stats    ]     CWR: Code Cache Roots          1636 us, workers (us): 841, 795, ---, ---, ---, ---, ---, ---, 
[2.058s][info][gc,stats    ]     CWR: VM Weak Roots             1688 us, workers (us): 889, 799, ---, ---, ---, ---, ---, ---, 
[2.058s][info][gc,stats    ]     CWR: CLDG Roots                  17 us, workers (us):  17, ---, ---, ---, ---, ---, ---, ---, 
[2.058s][info][gc,stats    ]   Rendezvous                        139 us
[2.058s][info][gc,stats    ] Concurrent Cleanup                  129 us
[2.058s][info][gc,stats    ] Concurrent Class Unloading         4984 us
[2.058s][info][gc,stats    ]   Unlink Stale                     1464 us
[2.058s][info][gc,stats    ]     System Dictionary                49 us
[2.058s][info][gc,stats    ]     Weak Class Links                  0 us
[2.058s][info][gc,stats    ]     Code Roots                     1414 us
[2.058s][info][gc,stats    ]   Rendezvous                        112 us
[2.058s][info][gc,stats    ]   Purge Unlinked                   3374 us
[2.058s][info][gc,stats    ]     Code Roots                     3364 us
[2.058s][info][gc,stats    ]     CLDG                              9 us
[2.058s][info][gc,stats    ]     Exception Caches                  0 us
[2.058s][info][gc,stats    ] Concurrent Strong Roots            1210 us, parallelism: 0.95x
[2.058s][info][gc,stats    ]   CSR: <total>                     1150 us
[2.058s][info][gc,stats    ]   CSR: VM Strong Roots               22 us, workers (us):  22,   0, ---, ---, ---, ---, ---, ---, 
[2.058s][info][gc,stats    ]   CSR: CLDG Roots                  1128 us, workers (us): 1128, ---, ---, ---, ---, ---, ---, ---, 
[2.058s][info][gc,stats    ] Concurrent Evacuation              9895 us
[2.058s][info][gc,stats    ] Pause Init Update Refs (G)          221 us
[2.058s][info][gc,stats    ] Pause Init Update Refs (N)           44 us
[2.058s][info][gc,stats    ]   Manage GCLABs                       4 us
[2.058s][info][gc,stats    ] Concurrent Update Refs            18846 us
[2.058s][info][gc,stats    ] Concurrent Update Thread Roots      242 us
[2.058s][info][gc,stats    ] Pause Final Update Refs (G)         176 us
[2.058s][info][gc,stats    ] Pause Final Update Refs (N)          83 us
[2.058s][info][gc,stats    ]   Update Region States               27 us
[2.058s][info][gc,stats    ]   Trash Collection Set                6 us
[2.058s][info][gc,stats    ]   Rebuild Free Set                   16 us
[2.058s][info][gc,stats    ] Concurrent Cleanup                   97 us
[2.058s][info][gc,metaspace] Metaspace: 21233K(21568K)->22214K(22592K) NonClass: 18888K(19072K)->19734K(19968K) Class: 2345K(2496K)->2479K(2624K)
[6.363s][info][gc          ] Cancelling GC: Stopping VM
[6.364s][info][gc,heap,exit] Heap
[6.364s][info][gc,heap,exit] Shenandoah Heap
[6.364s][info][gc,heap,exit]  1984M max, 1984M soft max, 153M committed, 86020K used
[6.364s][info][gc,heap,exit]  3969 x 512K regions
[6.364s][info][gc,heap,exit] Status: cancelled
[6.364s][info][gc,heap,exit] Reserved region:
[6.364s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.364s][info][gc,heap,exit] Collection set:
[6.364s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.364s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.364s][info][gc,heap,exit] 
[6.364s][info][gc,heap,exit]  Metaspace       used 25108K, committed 25408K, reserved 1114112K
[6.364s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.364s][info][gc,stats    ] 
[6.364s][info][gc,stats    ] GC STATISTICS:
[6.364s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.364s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.364s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.364s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.364s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.364s][info][gc,stats    ] 
[6.364s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.364s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.364s][info][gc,stats    ] 
[6.364s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.364s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.364s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.364s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.364s][info][gc,stats    ] 
[6.364s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.364s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.364s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.364s][info][gc,stats    ]   Raise max pacing delay with care.
[6.364s][info][gc,stats    ] 
[6.364s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      542 us) (n =     1) (lvls, us =      541,      541,      541,      541,      542)
[6.364s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      916 us) (n =     1) (lvls, us =      914,      914,      914,      914,      916)
[6.364s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      634 us) (n =     1) (lvls, us =      633,      633,      633,      633,      634)
[6.364s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       39 us) (n =     1) (lvls, us =       39,       39,       39,       39,       39)
[6.364s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     2196 us) (n =     1) (lvls, us =     2188,     2188,     2188,     2188,     2196)
[6.364s][info][gc,stats    ]   CMR: <total>                 =    0.003 s (a =     3340 us) (n =     1) (lvls, us =     3320,     3320,     3320,     3320,     3340)
[6.364s][info][gc,stats    ]   CMR: Thread Roots            =    0.002 s (a =     1941 us) (n =     1) (lvls, us =     1934,     1934,     1934,     1934,     1941)
[6.364s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.000 s (a =      363 us) (n =     1) (lvls, us =      361,      361,      361,      361,      363)
[6.364s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1036 us) (n =     1) (lvls, us =     1035,     1035,     1035,     1035,     1036)
[6.364s][info][gc,stats    ] Concurrent Marking             =    0.054 s (a =    53508 us) (n =     1) (lvls, us =    53320,    53320,    53320,    53320,    53508)
[6.364s][info][gc,stats    ] Pause Final Mark (G)           =    0.000 s (a =      437 us) (n =     1) (lvls, us =      436,      436,      436,      436,      437)
[6.364s][info][gc,stats    ] Pause Final Mark (N)           =    0.000 s (a =      328 us) (n =     1) (lvls, us =      328,      328,      328,      328,      328)
[6.364s][info][gc,stats    ]   Finish Mark                  =    0.000 s (a =      115 us) (n =     1) (lvls, us =      113,      113,      113,      113,      115)
[6.364s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       35 us) (n =     1) (lvls, us =       35,       35,       35,       35,       35)
[6.364s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       91 us) (n =     1) (lvls, us =       91,       91,       91,       91,       91)
[6.364s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[6.364s][info][gc,stats    ] Concurrent Thread Roots        =    0.002 s (a =     2016 us) (n =     1) (lvls, us =     2012,     2012,     2012,     2012,     2016)
[6.364s][info][gc,stats    ]   CTR: <total>                 =    0.002 s (a =     2131 us) (n =     1) (lvls, us =     2129,     2129,     2129,     2129,     2131)
[6.364s][info][gc,stats    ]   CTR: Thread Roots            =    0.002 s (a =     2131 us) (n =     1) (lvls, us =     2129,     2129,     2129,     2129,     2131)
[6.364s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      433 us) (n =     1) (lvls, us =      432,      432,      432,      432,      433)
[6.364s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      361 us) (n =     1) (lvls, us =      359,      359,      359,      359,      361)
[6.364s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      361 us) (n =     1) (lvls, us =      359,      359,      359,      359,      361)
[6.364s][info][gc,stats    ] Concurrent Weak Roots          =    0.002 s (a =     1968 us) (n =     1) (lvls, us =     1953,     1953,     1953,     1953,     1968)
[6.364s][info][gc,stats    ]   Roots                        =    0.002 s (a =     1788 us) (n =     1) (lvls, us =     1777,     1777,     1777,     1777,     1788)
[6.364s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     3341 us) (n =     1) (lvls, us =     3340,     3340,     3340,     3340,     3341)
[6.364s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.002 s (a =     1636 us) (n =     1) (lvls, us =     1621,     1621,     1621,     1621,     1636)
[6.364s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1688 us) (n =     1) (lvls, us =     1680,     1680,     1680,     1680,     1688)
[6.364s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[6.365s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      139 us) (n =     1) (lvls, us =      139,      139,      139,      139,      139)
[6.365s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      129 us) (n =     1) (lvls, us =      129,      129,      129,      129,      129)
[6.365s][info][gc,stats    ] Concurrent Class Unloading     =    0.005 s (a =     4984 us) (n =     1) (lvls, us =     4980,     4980,     4980,     4980,     4984)
[6.365s][info][gc,stats    ]   Unlink Stale                 =    0.001 s (a =     1464 us) (n =     1) (lvls, us =     1445,     1445,     1445,     1445,     1464)
[6.365s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       49 us) (n =     1) (lvls, us =       49,       49,       49,       49,       49)
[6.365s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.365s][info][gc,stats    ]     Code Roots                 =    0.001 s (a =     1414 us) (n =     1) (lvls, us =     1406,     1406,     1406,     1406,     1414)
[6.365s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      112 us) (n =     1) (lvls, us =      111,      111,      111,      111,      112)
[6.365s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     3374 us) (n =     1) (lvls, us =     3359,     3359,     3359,     3359,     3374)
[6.365s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     3364 us) (n =     1) (lvls, us =     3359,     3359,     3359,     3359,     3364)
[6.365s][info][gc,stats    ]     CLDG                       =    0.000 s (a =        9 us) (n =     1) (lvls, us =        9,        9,        9,        9,        9)
[6.365s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.365s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1210 us) (n =     1) (lvls, us =     1191,     1191,     1191,     1191,     1210)
[6.365s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1150 us) (n =     1) (lvls, us =     1133,     1133,     1133,     1133,     1150)
[6.365s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       22 us) (n =     1) (lvls, us =       22,       22,       22,       22,       22)
[6.365s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1128 us) (n =     1) (lvls, us =     1113,     1113,     1113,     1113,     1128)
[6.365s][info][gc,stats    ] Concurrent Evacuation          =    0.010 s (a =     9895 us) (n =     1) (lvls, us =     9883,     9883,     9883,     9883,     9895)
[6.365s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      221 us) (n =     1) (lvls, us =      221,      221,      221,      221,      221)
[6.365s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       44 us) (n =     1) (lvls, us =       44,       44,       44,       44,       44)
[6.365s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.365s][info][gc,stats    ] Concurrent Update Refs         =    0.019 s (a =    18846 us) (n =     1) (lvls, us =    18750,    18750,    18750,    18750,    18846)
[6.365s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      242 us) (n =     1) (lvls, us =      240,      240,      240,      240,      242)
[6.365s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      176 us) (n =     1) (lvls, us =      176,      176,      176,      176,      176)
[6.365s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =       83 us) (n =     1) (lvls, us =       83,       83,       83,       83,       83)
[6.365s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       27 us) (n =     1) (lvls, us =       27,       27,       27,       27,       27)
[6.365s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        6 us) (n =     1) (lvls, us =        6,        6,        6,        6,        6)
[6.365s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[6.365s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       97 us) (n =     1) (lvls, us =       97,       97,       97,       97,       97)
[6.365s][info][gc,stats    ] 
[6.365s][info][gc,stats    ] 
[6.365s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.365s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.365s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.365s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.365s][info][gc,stats    ] 
[6.365s][info][gc,stats    ]     1 successful concurrent GCs
[6.365s][info][gc,stats    ]       0 invoked explicitly
[6.365s][info][gc,stats    ]       0 invoked implicitly
[6.365s][info][gc,stats    ] 
[6.365s][info][gc,stats    ]     0 Degenerated GCs
[6.365s][info][gc,stats    ]       0 caused by allocation failure
[6.365s][info][gc,stats    ]       0 upgraded to Full GC
[6.365s][info][gc,stats    ] 
[6.365s][info][gc,stats    ]     0 Full GCs
[6.365s][info][gc,stats    ]       0 invoked explicitly
[6.365s][info][gc,stats    ]       0 invoked implicitly
[6.365s][info][gc,stats    ]       0 caused by allocation failure
[6.365s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.365s][info][gc,stats    ] 
[6.365s][info][gc,stats    ] 
