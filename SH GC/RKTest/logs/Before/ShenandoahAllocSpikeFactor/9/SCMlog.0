[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.005s][info][gc] Using Shenandoah
[0.005s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.006s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.006s][info][gc,init] CPUs: 4 total, 4 available
[0.006s][info][gc,init] Memory: 7937M
[0.006s][info][gc,init] Large Page Support: Disabled
[0.006s][info][gc,init] NUMA Support: Disabled
[0.006s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.006s][info][gc,init] Heap Min Capacity: 6656K
[0.006s][info][gc,init] Heap Initial Capacity: 127488K
[0.006s][info][gc,init] Heap Max Capacity: 2032128K
[0.006s][info][gc,init] Pre-touch: Disabled
[0.006s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.006s][info][gc,init] Heuristics: Adaptive
[0.006s][info][gc,init] Heap Region Count: 3969
[0.006s][info][gc,init] Heap Region Size: 512K
[0.006s][info][gc,init] TLAB Size Max: 512K
[0.006s][info][gc,init] Humongous Object Threshold: 512K
[0.006s][info][gc,init] Parallel Workers: 8
[0.006s][info][gc,init] Concurrent Workers: 2
[0.014s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007efec7000000-0x00007efec7c97000-0x00007efec7c97000), size 13201408, SharedBaseAddress: 0x00007efec7000000, ArchiveRelocationMode: 1.
[0.014s][info][gc,metaspace] Compressed class space mapped at: 0x00007efec8000000-0x00007eff08000000, reserved size: 1073741824
[0.014s][info][gc,metaspace] Narrow klass base: 0x00007efec7000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.469s][info][gc          ] Trigger: Metadata GC Threshold
[1.469s][info][gc,ergo     ] Free: 1790M, Max: 512K regular, 1790M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.469s][info][gc,start    ] GC(0) Concurrent reset
[1.469s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.469s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.469s][info][gc          ] GC(0) Concurrent reset 0.290ms
[1.470s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.470s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.470s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1790M, Non-Taxable: 179M, Alloc Tax Rate: 0.1x
[1.470s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.589ms
[1.470s][info][gc,start    ] GC(0) Concurrent marking roots
[1.470s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.473s][info][gc          ] GC(0) Concurrent marking roots 3.047ms
[1.473s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.473s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.486s][info][gc          ] GC(0) Concurrent marking (unload classes) 12.433ms
[1.486s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.486s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.489s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1893M, Max CSet: 84672K, Min Garbage: 0B
[1.489s][info][gc,ergo     ] GC(0) Collectable Garbage: 82092K (99%), Immediate: 5855K (7%), CSet: 76237K (91%)
[1.490s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 83968K, Free: 1794M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.490s][info][gc          ] GC(0) Pause Final Mark (unload classes) 3.669ms
[1.490s][info][gc,start    ] GC(0) Concurrent thread roots
[1.490s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.490s][info][gc          ] GC(0) Concurrent thread roots 0.262ms
[1.490s][info][gc,start    ] GC(0) Concurrent weak references
[1.490s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.490s][info][gc,ref      ] GC(0) Encountered references: Soft: 3955, Weak: 2117, Final: 20, Phantom: 791
[1.490s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 966, Final: 0, Phantom: 526
[1.490s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 477, Final: 0, Phantom: 312
[1.490s][info][gc          ] GC(0) Concurrent weak references 0.247ms
[1.490s][info][gc,start    ] GC(0) Concurrent weak roots
[1.490s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.495s][info][gc          ] GC(0) Concurrent weak roots 5.188ms
[1.495s][info][gc,start    ] GC(0) Concurrent cleanup
[1.495s][info][gc          ] GC(0) Concurrent cleanup 97M->91M(125M) 0.082ms
[1.495s][info][gc,ergo     ] GC(0) Free: 1793M, Max: 512K regular, 1787M humongous, Frag: 1% external, 0% internal; Reserve: 101081K, Max: 512K
[1.495s][info][gc,start    ] GC(0) Concurrent class unloading
[1.495s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.505s][info][gc          ] GC(0) Concurrent class unloading 9.374ms
[1.505s][info][gc,start    ] GC(0) Concurrent strong roots
[1.505s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.506s][info][gc          ] GC(0) Concurrent strong roots 1.237ms
[1.506s][info][gc,start    ] GC(0) Concurrent evacuation
[1.506s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.511s][info][gc          ] GC(0) Concurrent evacuation 4.688ms
[1.511s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.511s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 100M, Free: 1793M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.511s][info][gc          ] GC(0) Pause Init Update Refs 0.047ms
[1.511s][info][gc,start    ] GC(0) Concurrent update references
[1.511s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.516s][info][gc          ] GC(0) Concurrent update references 5.209ms
[1.516s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.516s][info][gc          ] GC(0) Concurrent update thread roots 0.149ms
[1.517s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.517s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.517s][info][gc          ] GC(0) Pause Final Update Refs 0.087ms
[1.517s][info][gc,start    ] GC(0) Concurrent cleanup
[1.517s][info][gc          ] GC(0) Concurrent cleanup 100M->18M(133M) 0.087ms
[1.517s][info][gc,ergo     ] Free: 1866M, Max: 512K regular, 1778M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.517s][info][gc,stats    ] 
[1.517s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.517s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.517s][info][gc,stats    ] 
[1.517s][info][gc,stats    ] Concurrent Reset                    318 us
[1.517s][info][gc,stats    ] Pause Init Mark (G)                 827 us
[1.517s][info][gc,stats    ] Pause Init Mark (N)                 606 us
[1.517s][info][gc,stats    ]   Update Region States               28 us
[1.517s][info][gc,stats    ] Concurrent Mark Roots              3075 us, parallelism: 1.05x
[1.517s][info][gc,stats    ]   CMR: <total>                     3232 us
[1.517s][info][gc,stats    ]   CMR: Thread Roots                1004 us, workers (us): 723, 282, ---, ---, ---, ---, ---, ---, 
[1.517s][info][gc,stats    ]   CMR: VM Strong Roots              563 us, workers (us): 562,   1, ---, ---, ---, ---, ---, ---, 
[1.517s][info][gc,stats    ]   CMR: CLDG Roots                  1665 us, workers (us): 1665, ---, ---, ---, ---, ---, ---, ---, 
[1.517s][info][gc,stats    ] Concurrent Marking                12462 us
[1.517s][info][gc,stats    ] Pause Final Mark (G)               3814 us
[1.517s][info][gc,stats    ] Pause Final Mark (N)               3686 us
[1.517s][info][gc,stats    ]   Finish Mark                      3344 us
[1.517s][info][gc,stats    ]   Update Region States               36 us
[1.517s][info][gc,stats    ]   Choose Collection Set             161 us
[1.517s][info][gc,stats    ]   Rebuild Free Set                   36 us
[1.517s][info][gc,stats    ] Concurrent Thread Roots             273 us, parallelism: 0.77x
[1.517s][info][gc,stats    ]   CTR: <total>                      209 us
[1.517s][info][gc,stats    ]   CTR: Thread Roots                 209 us, workers (us): 209,   0, ---, ---, ---, ---, ---, ---, 
[1.517s][info][gc,stats    ] Concurrent Weak References          255 us, parallelism: 1.18x
[1.517s][info][gc,stats    ]   CWRF: <total>                     301 us
[1.517s][info][gc,stats    ]   CWRF: Weak References             301 us, workers (us): 178, 123, ---, ---, ---, ---, ---, ---, 
[1.517s][info][gc,stats    ] Concurrent Weak Roots              5215 us
[1.517s][info][gc,stats    ]   Roots                            2544 us, parallelism: 1.88x
[1.517s][info][gc,stats    ]     CWR: <total>                   4770 us
[1.517s][info][gc,stats    ]     CWR: Code Cache Roots           761 us, workers (us): 402, 360, ---, ---, ---, ---, ---, ---, 
[1.517s][info][gc,stats    ]     CWR: VM Weak Roots             3993 us, workers (us): 2076, 1917, ---, ---, ---, ---, ---, ---, 
[1.517s][info][gc,stats    ]     CWR: CLDG Roots                  16 us, workers (us): ---,  16, ---, ---, ---, ---, ---, ---, 
[1.517s][info][gc,stats    ]   Rendezvous                       2626 us
[1.517s][info][gc,stats    ] Concurrent Cleanup                   92 us
[1.517s][info][gc,stats    ] Concurrent Class Unloading         9393 us
[1.517s][info][gc,stats    ]   Unlink Stale                     6426 us
[1.517s][info][gc,stats    ]     System Dictionary                34 us
[1.517s][info][gc,stats    ]     Weak Class Links                  0 us
[1.517s][info][gc,stats    ]     Code Roots                     6390 us
[1.517s][info][gc,stats    ]   Rendezvous                         41 us
[1.517s][info][gc,stats    ]   Purge Unlinked                   2889 us
[1.517s][info][gc,stats    ]     Code Roots                     2877 us
[1.517s][info][gc,stats    ]     CLDG                             12 us
[1.517s][info][gc,stats    ]     Exception Caches                  0 us
[1.517s][info][gc,stats    ] Concurrent Strong Roots            1248 us, parallelism: 0.93x
[1.517s][info][gc,stats    ]   CSR: <total>                     1166 us
[1.517s][info][gc,stats    ]   CSR: VM Strong Roots               30 us, workers (us):  30,   0, ---, ---, ---, ---, ---, ---, 
[1.517s][info][gc,stats    ]   CSR: CLDG Roots                  1136 us, workers (us): 1136, ---, ---, ---, ---, ---, ---, ---, 
[1.517s][info][gc,stats    ] Concurrent Evacuation              4713 us
[1.517s][info][gc,stats    ] Pause Init Update Refs (G)          244 us
[1.517s][info][gc,stats    ] Pause Init Update Refs (N)           57 us
[1.517s][info][gc,stats    ]   Manage GCLABs                       6 us
[1.517s][info][gc,stats    ] Concurrent Update Refs             5234 us
[1.517s][info][gc,stats    ] Concurrent Update Thread Roots      158 us
[1.517s][info][gc,stats    ] Pause Final Update Refs (G)         278 us
[1.517s][info][gc,stats    ] Pause Final Update Refs (N)          99 us
[1.517s][info][gc,stats    ]   Update Region States               28 us
[1.517s][info][gc,stats    ]   Trash Collection Set                4 us
[1.517s][info][gc,stats    ]   Rebuild Free Set                   18 us
[1.517s][info][gc,stats    ] Concurrent Cleanup                   96 us
[1.517s][info][gc,stats    ] 
[1.517s][info][gc,stats    ] Allocation pacing accrued:
[1.517s][info][gc,stats    ]       0 of  1512 ms (  0.0%): <total>
[1.517s][info][gc,stats    ]       0 of  1512 ms (  0.0%): <average total>
[1.517s][info][gc,stats    ] 
[1.517s][info][gc,metaspace] Metaspace: 21185K(21568K)->21520K(21888K) NonClass: 18851K(19072K)->19145K(19328K) Class: 2334K(2496K)->2375K(2560K)
[1.517s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[7.979s][info][gc          ] Cancelling GC: Stopping VM
[7.979s][info][gc,heap,exit] Heap
[7.979s][info][gc,heap,exit] Shenandoah Heap
[7.979s][info][gc,heap,exit]  1984M max, 1984M soft max, 133M committed, 38442K used
[7.979s][info][gc,heap,exit]  3969 x 512K regions
[7.979s][info][gc,heap,exit] Status: cancelled
[7.979s][info][gc,heap,exit] Reserved region:
[7.979s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[7.979s][info][gc,heap,exit] Collection set:
[7.979s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[7.979s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[7.979s][info][gc,heap,exit] 
[7.979s][info][gc,heap,exit]  Metaspace       used 25454K, committed 25792K, reserved 1114112K
[7.979s][info][gc,heap,exit]   class space    used 2924K, committed 3072K, reserved 1048576K
[7.979s][info][gc,stats    ] 
[7.979s][info][gc,stats    ] GC STATISTICS:
[7.979s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[7.979s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[7.979s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[7.979s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[7.979s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[7.979s][info][gc,stats    ] 
[7.979s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[7.979s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[7.979s][info][gc,stats    ] 
[7.979s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[7.980s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[7.980s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[7.980s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[7.980s][info][gc,stats    ] 
[7.980s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[7.980s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[7.980s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[7.980s][info][gc,stats    ]   Raise max pacing delay with care.
[7.980s][info][gc,stats    ] 
[7.980s][info][gc,stats    ] Concurrent Reset               =    0.000 s (a =      318 us) (n =     1) (lvls, us =      316,      316,      316,      316,      318)
[7.980s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      827 us) (n =     1) (lvls, us =      826,      826,      826,      826,      827)
[7.980s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      606 us) (n =     1) (lvls, us =      605,      605,      605,      605,      606)
[7.980s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       28 us) (n =     1) (lvls, us =       28,       28,       28,       28,       28)
[7.980s][info][gc,stats    ] Concurrent Mark Roots          =    0.003 s (a =     3075 us) (n =     1) (lvls, us =     3066,     3066,     3066,     3066,     3075)
[7.980s][info][gc,stats    ]   CMR: <total>                 =    0.003 s (a =     3232 us) (n =     1) (lvls, us =     3223,     3223,     3223,     3223,     3232)
[7.980s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1004 us) (n =     1) (lvls, us =      996,      996,      996,      996,     1004)
[7.980s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      563 us) (n =     1) (lvls, us =      563,      563,      563,      563,      563)
[7.980s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     1665 us) (n =     1) (lvls, us =     1660,     1660,     1660,     1660,     1665)
[7.980s][info][gc,stats    ] Concurrent Marking             =    0.012 s (a =    12462 us) (n =     1) (lvls, us =    12305,    12305,    12305,    12305,    12462)
[7.980s][info][gc,stats    ] Pause Final Mark (G)           =    0.004 s (a =     3814 us) (n =     1) (lvls, us =     3809,     3809,     3809,     3809,     3814)
[7.980s][info][gc,stats    ] Pause Final Mark (N)           =    0.004 s (a =     3686 us) (n =     1) (lvls, us =     3672,     3672,     3672,     3672,     3686)
[7.980s][info][gc,stats    ]   Finish Mark                  =    0.003 s (a =     3344 us) (n =     1) (lvls, us =     3340,     3340,     3340,     3340,     3344)
[7.980s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       36 us) (n =     1) (lvls, us =       36,       36,       36,       36,       36)
[7.980s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =      161 us) (n =     1) (lvls, us =      160,      160,      160,      160,      161)
[7.980s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       36 us) (n =     1) (lvls, us =       35,       35,       35,       35,       36)
[7.980s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      273 us) (n =     1) (lvls, us =      271,      271,      271,      271,      273)
[7.980s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      209 us) (n =     1) (lvls, us =      209,      209,      209,      209,      209)
[7.980s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      209 us) (n =     1) (lvls, us =      209,      209,      209,      209,      209)
[7.980s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      255 us) (n =     1) (lvls, us =      254,      254,      254,      254,      255)
[7.980s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      301 us) (n =     1) (lvls, us =      299,      299,      299,      299,      301)
[7.980s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      301 us) (n =     1) (lvls, us =      299,      299,      299,      299,      301)
[7.980s][info][gc,stats    ] Concurrent Weak Roots          =    0.005 s (a =     5215 us) (n =     1) (lvls, us =     5215,     5215,     5215,     5215,     5215)
[7.980s][info][gc,stats    ]   Roots                        =    0.003 s (a =     2544 us) (n =     1) (lvls, us =     2539,     2539,     2539,     2539,     2544)
[7.980s][info][gc,stats    ]     CWR: <total>               =    0.005 s (a =     4770 us) (n =     1) (lvls, us =     4766,     4766,     4766,     4766,     4770)
[7.980s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      761 us) (n =     1) (lvls, us =      760,      760,      760,      760,      761)
[7.980s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.004 s (a =     3993 us) (n =     1) (lvls, us =     3984,     3984,     3984,     3984,     3993)
[7.980s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[7.980s][info][gc,stats    ]   Rendezvous                   =    0.003 s (a =     2626 us) (n =     1) (lvls, us =     2617,     2617,     2617,     2617,     2626)
[7.980s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       92 us) (n =     1) (lvls, us =       92,       92,       92,       92,       92)
[7.980s][info][gc,stats    ] Concurrent Class Unloading     =    0.009 s (a =     9393 us) (n =     1) (lvls, us =     9375,     9375,     9375,     9375,     9393)
[7.980s][info][gc,stats    ]   Unlink Stale                 =    0.006 s (a =     6426 us) (n =     1) (lvls, us =     6406,     6406,     6406,     6406,     6426)
[7.980s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       34 us) (n =     1) (lvls, us =       34,       34,       34,       34,       34)
[7.980s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.980s][info][gc,stats    ]     Code Roots                 =    0.006 s (a =     6390 us) (n =     1) (lvls, us =     6387,     6387,     6387,     6387,     6390)
[7.980s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       41 us) (n =     1) (lvls, us =       41,       41,       41,       41,       41)
[7.980s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     2889 us) (n =     1) (lvls, us =     2871,     2871,     2871,     2871,     2889)
[7.981s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2877 us) (n =     1) (lvls, us =     2871,     2871,     2871,     2871,     2877)
[7.981s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       12 us) (n =     1) (lvls, us =       12,       12,       12,       12,       12)
[7.981s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.981s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1248 us) (n =     1) (lvls, us =     1230,     1230,     1230,     1230,     1248)
[7.981s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1166 us) (n =     1) (lvls, us =     1152,     1152,     1152,     1152,     1166)
[7.981s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       30 us) (n =     1) (lvls, us =       30,       30,       30,       30,       30)
[7.981s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1136 us) (n =     1) (lvls, us =     1133,     1133,     1133,     1133,     1136)
[7.981s][info][gc,stats    ] Concurrent Evacuation          =    0.005 s (a =     4713 us) (n =     1) (lvls, us =     4707,     4707,     4707,     4707,     4713)
[7.981s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      244 us) (n =     1) (lvls, us =      244,      244,      244,      244,      244)
[7.981s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       57 us) (n =     1) (lvls, us =       57,       57,       57,       57,       57)
[7.981s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        6 us) (n =     1) (lvls, us =        6,        6,        6,        6,        6)
[7.981s][info][gc,stats    ] Concurrent Update Refs         =    0.005 s (a =     5234 us) (n =     1) (lvls, us =     5215,     5215,     5215,     5215,     5234)
[7.981s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      158 us) (n =     1) (lvls, us =      158,      158,      158,      158,      158)
[7.981s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      278 us) (n =     1) (lvls, us =      277,      277,      277,      277,      278)
[7.981s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =       99 us) (n =     1) (lvls, us =       98,       98,       98,       98,       99)
[7.981s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       28 us) (n =     1) (lvls, us =       28,       28,       28,       28,       28)
[7.981s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[7.981s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[7.981s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       96 us) (n =     1) (lvls, us =       96,       96,       96,       96,       96)
[7.981s][info][gc,stats    ] 
[7.981s][info][gc,stats    ] 
[7.981s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[7.981s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[7.981s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[7.981s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[7.981s][info][gc,stats    ] 
[7.981s][info][gc,stats    ]     1 successful concurrent GCs
[7.981s][info][gc,stats    ]       0 invoked explicitly
[7.981s][info][gc,stats    ]       0 invoked implicitly
[7.981s][info][gc,stats    ] 
[7.981s][info][gc,stats    ]     0 Degenerated GCs
[7.981s][info][gc,stats    ]       0 caused by allocation failure
[7.981s][info][gc,stats    ]       0 upgraded to Full GC
[7.981s][info][gc,stats    ] 
[7.981s][info][gc,stats    ]     0 Full GCs
[7.981s][info][gc,stats    ]       0 invoked explicitly
[7.981s][info][gc,stats    ]       0 invoked implicitly
[7.981s][info][gc,stats    ]       0 caused by allocation failure
[7.981s][info][gc,stats    ]       0 upgraded from Degenerated GC
[7.981s][info][gc,stats    ] 
[7.981s][info][gc,stats    ] 
