[0.009s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.010s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.010s][info][gc] Using Shenandoah
[0.011s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.011s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.011s][info][gc,init] CPUs: 4 total, 4 available
[0.011s][info][gc,init] Memory: 7937M
[0.011s][info][gc,init] Large Page Support: Disabled
[0.011s][info][gc,init] NUMA Support: Disabled
[0.012s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.012s][info][gc,init] Heap Min Capacity: 6656K
[0.012s][info][gc,init] Heap Initial Capacity: 127488K
[0.012s][info][gc,init] Heap Max Capacity: 2032128K
[0.012s][info][gc,init] Pre-touch: Disabled
[0.012s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.012s][info][gc,init] Heuristics: Adaptive
[0.012s][info][gc,init] Heap Region Count: 3969
[0.012s][info][gc,init] Heap Region Size: 512K
[0.012s][info][gc,init] TLAB Size Max: 512K
[0.012s][info][gc,init] Humongous Object Threshold: 512K
[0.012s][info][gc,init] Parallel Workers: 8
[0.012s][info][gc,init] Concurrent Workers: 2
[0.022s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f0f5b000000-0x00007f0f5bc97000-0x00007f0f5bc97000), size 13201408, SharedBaseAddress: 0x00007f0f5b000000, ArchiveRelocationMode: 1.
[0.022s][info][gc,metaspace] Compressed class space mapped at: 0x00007f0f5c000000-0x00007f0f9c000000, reserved size: 1073741824
[0.022s][info][gc,metaspace] Narrow klass base: 0x00007f0f5b000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.272s][info][gc          ] Trigger: Metadata GC Threshold
[1.273s][info][gc,ergo     ] Free: 1790M, Max: 512K regular, 1790M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.273s][info][gc,start    ] GC(0) Concurrent reset
[1.273s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.273s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.273s][info][gc          ] GC(0) Concurrent reset 0.395ms
[1.273s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.274s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.274s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1790M, Non-Taxable: 179M, Alloc Tax Rate: 0.1x
[1.274s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.537ms
[1.275s][info][gc,start    ] GC(0) Concurrent marking roots
[1.275s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.277s][info][gc          ] GC(0) Concurrent marking roots 1.785ms
[1.277s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.277s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.288s][info][gc          ] GC(0) Concurrent marking (unload classes) 11.594ms
[1.289s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.289s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.289s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1894M, Max CSet: 84672K, Min Garbage: 0B
[1.289s][info][gc,ergo     ] GC(0) Collectable Garbage: 81452K (98%), Immediate: 5855K (7%), CSet: 75597K (91%)
[1.289s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 83456K, Free: 1795M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.289s][info][gc          ] GC(0) Pause Final Mark (unload classes) 0.310ms
[1.289s][info][gc,start    ] GC(0) Concurrent thread roots
[1.289s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.289s][info][gc          ] GC(0) Concurrent thread roots 0.182ms
[1.289s][info][gc,start    ] GC(0) Concurrent weak references
[1.289s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.289s][info][gc,ref      ] GC(0) Encountered references: Soft: 3955, Weak: 2122, Final: 20, Phantom: 791
[1.289s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 813, Final: 16, Phantom: 786
[1.289s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 478, Final: 0, Phantom: 313
[1.289s][info][gc          ] GC(0) Concurrent weak references 0.338ms
[1.289s][info][gc,start    ] GC(0) Concurrent weak roots
[1.289s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.291s][info][gc          ] GC(0) Concurrent weak roots 1.540ms
[1.291s][info][gc,start    ] GC(0) Concurrent cleanup
[1.291s][info][gc          ] GC(0) Concurrent cleanup 96M->90M(125M) 0.066ms
[1.291s][info][gc,ergo     ] GC(0) Free: 1794M, Max: 512K regular, 1788M humongous, Frag: 1% external, 0% internal; Reserve: 101115K, Max: 512K
[1.291s][info][gc,start    ] GC(0) Concurrent class unloading
[1.291s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.298s][info][gc          ] GC(0) Concurrent class unloading 6.994ms
[1.298s][info][gc,start    ] GC(0) Concurrent strong roots
[1.298s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.299s][info][gc          ] GC(0) Concurrent strong roots 1.156ms
[1.299s][info][gc,start    ] GC(0) Concurrent evacuation
[1.299s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.304s][info][gc          ] GC(0) Concurrent evacuation 4.430ms
[1.304s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.304s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 101861K, Free: 1794M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.304s][info][gc          ] GC(0) Pause Init Update Refs 0.044ms
[1.304s][info][gc,start    ] GC(0) Concurrent update references
[1.304s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.309s][info][gc          ] GC(0) Concurrent update references 4.591ms
[1.309s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.309s][info][gc          ] GC(0) Concurrent update thread roots 0.292ms
[1.309s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.309s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.309s][info][gc          ] GC(0) Pause Final Update Refs 0.087ms
[1.309s][info][gc,start    ] GC(0) Concurrent cleanup
[1.309s][info][gc          ] GC(0) Concurrent cleanup 99M->17M(133M) 0.084ms
[1.309s][info][gc,ergo     ] Free: 1866M, Max: 512K regular, 1779M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.309s][info][gc,stats    ] 
[1.309s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.309s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.309s][info][gc,stats    ] 
[1.309s][info][gc,stats    ] Concurrent Reset                    414 us
[1.309s][info][gc,stats    ] Pause Init Mark (G)                2015 us
[1.309s][info][gc,stats    ] Pause Init Mark (N)                 553 us
[1.309s][info][gc,stats    ]   Update Region States               21 us
[1.309s][info][gc,stats    ] Concurrent Mark Roots              1811 us, parallelism: 1.58x
[1.309s][info][gc,stats    ]   CMR: <total>                     2855 us
[1.310s][info][gc,stats    ]   CMR: Thread Roots                 826 us, workers (us): 826,   0, ---, ---, ---, ---, ---, ---, 
[1.310s][info][gc,stats    ]   CMR: VM Strong Roots              599 us, workers (us): 438, 161, ---, ---, ---, ---, ---, ---, 
[1.310s][info][gc,stats    ]   CMR: CLDG Roots                  1430 us, workers (us): ---, 1430, ---, ---, ---, ---, ---, ---, 
[1.310s][info][gc,stats    ] Concurrent Marking                11618 us
[1.310s][info][gc,stats    ] Pause Final Mark (G)                440 us
[1.310s][info][gc,stats    ] Pause Final Mark (N)                324 us
[1.310s][info][gc,stats    ]   Finish Mark                       107 us
[1.310s][info][gc,stats    ]   Update Region States               22 us
[1.310s][info][gc,stats    ]   Choose Collection Set              92 us
[1.310s][info][gc,stats    ]   Rebuild Free Set                   24 us
[1.310s][info][gc,stats    ] Concurrent Thread Roots             193 us, parallelism: 1.34x
[1.310s][info][gc,stats    ]   CTR: <total>                      258 us
[1.310s][info][gc,stats    ]   CTR: Thread Roots                 258 us, workers (us): 127, 131, ---, ---, ---, ---, ---, ---, 
[1.310s][info][gc,stats    ] Concurrent Weak References          346 us, parallelism: 0.85x
[1.310s][info][gc,stats    ]   CWRF: <total>                     293 us
[1.310s][info][gc,stats    ]   CWRF: Weak References             293 us, workers (us): 264,  29, ---, ---, ---, ---, ---, ---, 
[1.310s][info][gc,stats    ] Concurrent Weak Roots              1560 us
[1.310s][info][gc,stats    ]   Roots                            1383 us, parallelism: 1.69x
[1.310s][info][gc,stats    ]     CWR: <total>                   2343 us
[1.310s][info][gc,stats    ]     CWR: Code Cache Roots           752 us, workers (us): 385, 368, ---, ---, ---, ---, ---, ---, 
[1.310s][info][gc,stats    ]     CWR: VM Weak Roots             1580 us, workers (us): 934, 646, ---, ---, ---, ---, ---, ---, 
[1.310s][info][gc,stats    ]     CWR: CLDG Roots                  11 us, workers (us):  11, ---, ---, ---, ---, ---, ---, ---, 
[1.310s][info][gc,stats    ]   Rendezvous                        127 us
[1.310s][info][gc,stats    ] Concurrent Cleanup                   72 us
[1.310s][info][gc,stats    ] Concurrent Class Unloading         7011 us
[1.310s][info][gc,stats    ]   Unlink Stale                     3232 us
[1.310s][info][gc,stats    ]     System Dictionary                27 us
[1.310s][info][gc,stats    ]     Weak Class Links                  0 us
[1.310s][info][gc,stats    ]     Code Roots                     3203 us
[1.310s][info][gc,stats    ]   Rendezvous                        112 us
[1.310s][info][gc,stats    ]   Purge Unlinked                   3632 us
[1.310s][info][gc,stats    ]     Code Roots                     3602 us
[1.310s][info][gc,stats    ]     CLDG                             29 us
[1.310s][info][gc,stats    ]     Exception Caches                  0 us
[1.310s][info][gc,stats    ] Concurrent Strong Roots            1176 us, parallelism: 0.85x
[1.310s][info][gc,stats    ]   CSR: <total>                      994 us
[1.310s][info][gc,stats    ]   CSR: VM Strong Roots               30 us, workers (us):  30,   0, ---, ---, ---, ---, ---, ---, 
[1.310s][info][gc,stats    ]   CSR: CLDG Roots                   964 us, workers (us): 964, ---, ---, ---, ---, ---, ---, ---, 
[1.310s][info][gc,stats    ] Concurrent Evacuation              4458 us
[1.310s][info][gc,stats    ] Pause Init Update Refs (G)          249 us
[1.310s][info][gc,stats    ] Pause Init Update Refs (N)           53 us
[1.310s][info][gc,stats    ]   Manage GCLABs                       5 us
[1.310s][info][gc,stats    ] Concurrent Update Refs             4619 us
[1.310s][info][gc,stats    ] Concurrent Update Thread Roots      302 us
[1.310s][info][gc,stats    ] Pause Final Update Refs (G)         270 us
[1.310s][info][gc,stats    ] Pause Final Update Refs (N)          97 us
[1.310s][info][gc,stats    ]   Update Region States               19 us
[1.310s][info][gc,stats    ]   Trash Collection Set                4 us
[1.310s][info][gc,stats    ]   Rebuild Free Set                   16 us
[1.310s][info][gc,stats    ] Concurrent Cleanup                   96 us
[1.310s][info][gc,stats    ] 
[1.310s][info][gc,stats    ] Allocation pacing accrued:
[1.310s][info][gc,stats    ]       0 of  1299 ms (  0.0%): <total>
[1.310s][info][gc,stats    ]       0 of  1299 ms (  0.0%): <average total>
[1.310s][info][gc,stats    ] 
[1.310s][info][gc,metaspace] Metaspace: 21237K(21568K)->21485K(21824K) NonClass: 18901K(19072K)->19110K(19264K) Class: 2336K(2496K)->2375K(2560K)
[1.310s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[7.753s][info][gc          ] Cancelling GC: Stopping VM
[7.753s][info][gc,heap,exit] Heap
[7.753s][info][gc,heap,exit] Shenandoah Heap
[7.753s][info][gc,heap,exit]  1984M max, 1984M soft max, 133M committed, 36860K used
[7.753s][info][gc,heap,exit]  3969 x 512K regions
[7.753s][info][gc,heap,exit] Status: cancelled
[7.753s][info][gc,heap,exit] Reserved region:
[7.753s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[7.753s][info][gc,heap,exit] Collection set:
[7.753s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[7.753s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[7.753s][info][gc,heap,exit] 
[7.753s][info][gc,heap,exit]  Metaspace       used 25429K, committed 25792K, reserved 1114112K
[7.753s][info][gc,heap,exit]   class space    used 2927K, committed 3072K, reserved 1048576K
[7.753s][info][gc,stats    ] 
[7.753s][info][gc,stats    ] GC STATISTICS:
[7.753s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[7.753s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[7.753s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[7.753s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[7.753s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[7.753s][info][gc,stats    ] 
[7.753s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[7.753s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[7.753s][info][gc,stats    ] 
[7.753s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[7.753s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[7.753s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[7.753s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[7.753s][info][gc,stats    ] 
[7.753s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[7.753s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[7.753s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[7.753s][info][gc,stats    ]   Raise max pacing delay with care.
[7.753s][info][gc,stats    ] 
[7.753s][info][gc,stats    ] Concurrent Reset               =    0.000 s (a =      414 us) (n =     1) (lvls, us =      412,      412,      412,      412,      414)
[7.753s][info][gc,stats    ] Pause Init Mark (G)            =    0.002 s (a =     2015 us) (n =     1) (lvls, us =     2012,     2012,     2012,     2012,     2015)
[7.753s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      553 us) (n =     1) (lvls, us =      553,      553,      553,      553,      553)
[7.753s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       21 us) (n =     1) (lvls, us =       21,       21,       21,       21,       21)
[7.753s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     1811 us) (n =     1) (lvls, us =     1797,     1797,     1797,     1797,     1811)
[7.753s][info][gc,stats    ]   CMR: <total>                 =    0.003 s (a =     2855 us) (n =     1) (lvls, us =     2852,     2852,     2852,     2852,     2855)
[7.753s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =      826 us) (n =     1) (lvls, us =      824,      824,      824,      824,      826)
[7.753s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      599 us) (n =     1) (lvls, us =      598,      598,      598,      598,      599)
[7.753s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1430 us) (n =     1) (lvls, us =     1426,     1426,     1426,     1426,     1430)
[7.753s][info][gc,stats    ] Concurrent Marking             =    0.012 s (a =    11618 us) (n =     1) (lvls, us =    11523,    11523,    11523,    11523,    11618)
[7.753s][info][gc,stats    ] Pause Final Mark (G)           =    0.000 s (a =      440 us) (n =     1) (lvls, us =      439,      439,      439,      439,      440)
[7.753s][info][gc,stats    ] Pause Final Mark (N)           =    0.000 s (a =      324 us) (n =     1) (lvls, us =      322,      322,      322,      322,      324)
[7.753s][info][gc,stats    ]   Finish Mark                  =    0.000 s (a =      107 us) (n =     1) (lvls, us =      105,      105,      105,      105,      107)
[7.753s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       22 us) (n =     1) (lvls, us =       22,       22,       22,       22,       22)
[7.753s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       92 us) (n =     1) (lvls, us =       92,       92,       92,       92,       92)
[7.753s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       24 us) (n =     1) (lvls, us =       24,       24,       24,       24,       24)
[7.753s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      193 us) (n =     1) (lvls, us =      191,      191,      191,      191,      193)
[7.753s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      258 us) (n =     1) (lvls, us =      258,      258,      258,      258,      258)
[7.753s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      258 us) (n =     1) (lvls, us =      258,      258,      258,      258,      258)
[7.753s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      346 us) (n =     1) (lvls, us =      346,      346,      346,      346,      346)
[7.753s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      293 us) (n =     1) (lvls, us =      291,      291,      291,      291,      293)
[7.753s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      293 us) (n =     1) (lvls, us =      291,      291,      291,      291,      293)
[7.753s][info][gc,stats    ] Concurrent Weak Roots          =    0.002 s (a =     1560 us) (n =     1) (lvls, us =     1543,     1543,     1543,     1543,     1560)
[7.753s][info][gc,stats    ]   Roots                        =    0.001 s (a =     1383 us) (n =     1) (lvls, us =     1367,     1367,     1367,     1367,     1383)
[7.753s][info][gc,stats    ]     CWR: <total>               =    0.002 s (a =     2343 us) (n =     1) (lvls, us =     2324,     2324,     2324,     2324,     2343)
[7.753s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      752 us) (n =     1) (lvls, us =      752,      752,      752,      752,      752)
[7.753s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1580 us) (n =     1) (lvls, us =     1562,     1562,     1562,     1562,     1580)
[7.753s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       11 us) (n =     1) (lvls, us =       11,       11,       11,       11,       11)
[7.753s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      127 us) (n =     1) (lvls, us =      127,      127,      127,      127,      127)
[7.753s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       72 us) (n =     1) (lvls, us =       72,       72,       72,       72,       72)
[7.753s][info][gc,stats    ] Concurrent Class Unloading     =    0.007 s (a =     7011 us) (n =     1) (lvls, us =     6992,     6992,     6992,     6992,     7011)
[7.753s][info][gc,stats    ]   Unlink Stale                 =    0.003 s (a =     3232 us) (n =     1) (lvls, us =     3223,     3223,     3223,     3223,     3232)
[7.754s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       27 us) (n =     1) (lvls, us =       27,       27,       27,       27,       27)
[7.754s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.754s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     3203 us) (n =     1) (lvls, us =     3203,     3203,     3203,     3203,     3203)
[7.754s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      112 us) (n =     1) (lvls, us =      111,      111,      111,      111,      112)
[7.754s][info][gc,stats    ]   Purge Unlinked               =    0.004 s (a =     3632 us) (n =     1) (lvls, us =     3613,     3613,     3613,     3613,     3632)
[7.754s][info][gc,stats    ]     Code Roots                 =    0.004 s (a =     3602 us) (n =     1) (lvls, us =     3594,     3594,     3594,     3594,     3602)
[7.754s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       29 us) (n =     1) (lvls, us =       29,       29,       29,       29,       29)
[7.754s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.754s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1176 us) (n =     1) (lvls, us =     1172,     1172,     1172,     1172,     1176)
[7.754s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =      994 us) (n =     1) (lvls, us =      994,      994,      994,      994,      994)
[7.754s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       30 us) (n =     1) (lvls, us =       30,       30,       30,       30,       30)
[7.754s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =      964 us) (n =     1) (lvls, us =      963,      963,      963,      963,      964)
[7.754s][info][gc,stats    ] Concurrent Evacuation          =    0.004 s (a =     4458 us) (n =     1) (lvls, us =     4453,     4453,     4453,     4453,     4458)
[7.754s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      249 us) (n =     1) (lvls, us =      248,      248,      248,      248,      249)
[7.754s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       53 us) (n =     1) (lvls, us =       53,       53,       53,       53,       53)
[7.754s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[7.754s][info][gc,stats    ] Concurrent Update Refs         =    0.005 s (a =     4619 us) (n =     1) (lvls, us =     4609,     4609,     4609,     4609,     4619)
[7.754s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      302 us) (n =     1) (lvls, us =      301,      301,      301,      301,      302)
[7.754s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      270 us) (n =     1) (lvls, us =      268,      268,      268,      268,      270)
[7.754s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =       97 us) (n =     1) (lvls, us =       97,       97,       97,       97,       97)
[7.754s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[7.754s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[7.754s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[7.754s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       96 us) (n =     1) (lvls, us =       96,       96,       96,       96,       96)
[7.754s][info][gc,stats    ] 
[7.754s][info][gc,stats    ] 
[7.754s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[7.754s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[7.754s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[7.754s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[7.754s][info][gc,stats    ] 
[7.754s][info][gc,stats    ]     1 successful concurrent GCs
[7.754s][info][gc,stats    ]       0 invoked explicitly
[7.754s][info][gc,stats    ]       0 invoked implicitly
[7.754s][info][gc,stats    ] 
[7.754s][info][gc,stats    ]     0 Degenerated GCs
[7.754s][info][gc,stats    ]       0 caused by allocation failure
[7.754s][info][gc,stats    ]       0 upgraded to Full GC
[7.754s][info][gc,stats    ] 
[7.754s][info][gc,stats    ]     0 Full GCs
[7.754s][info][gc,stats    ]       0 invoked explicitly
[7.754s][info][gc,stats    ]       0 invoked implicitly
[7.754s][info][gc,stats    ]       0 caused by allocation failure
[7.754s][info][gc,stats    ]       0 upgraded from Degenerated GC
[7.754s][info][gc,stats    ] 
[7.754s][info][gc,stats    ] 
