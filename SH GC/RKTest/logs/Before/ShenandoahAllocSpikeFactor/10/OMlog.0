[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.004s][info][gc] Using Shenandoah
[0.005s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.005s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.005s][info][gc,init] CPUs: 4 total, 4 available
[0.005s][info][gc,init] Memory: 7937M
[0.005s][info][gc,init] Large Page Support: Disabled
[0.005s][info][gc,init] NUMA Support: Disabled
[0.005s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.005s][info][gc,init] Heap Min Capacity: 6656K
[0.005s][info][gc,init] Heap Initial Capacity: 127488K
[0.005s][info][gc,init] Heap Max Capacity: 2032128K
[0.005s][info][gc,init] Pre-touch: Disabled
[0.005s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.005s][info][gc,init] Heuristics: Adaptive
[0.005s][info][gc,init] Heap Region Count: 3969
[0.005s][info][gc,init] Heap Region Size: 512K
[0.005s][info][gc,init] TLAB Size Max: 512K
[0.005s][info][gc,init] Humongous Object Threshold: 512K
[0.005s][info][gc,init] Parallel Workers: 8
[0.005s][info][gc,init] Concurrent Workers: 2
[0.013s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f817f000000-0x00007f817fc97000-0x00007f817fc97000), size 13201408, SharedBaseAddress: 0x00007f817f000000, ArchiveRelocationMode: 1.
[0.013s][info][gc,metaspace] Compressed class space mapped at: 0x00007f8180000000-0x00007f81c0000000, reserved size: 1073741824
[0.013s][info][gc,metaspace] Narrow klass base: 0x00007f817f000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.762s][info][gc          ] Trigger: Metadata GC Threshold
[1.762s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.762s][info][gc,start    ] GC(0) Concurrent reset
[1.762s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.762s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.763s][info][gc          ] GC(0) Concurrent reset 0.282ms
[1.763s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.763s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.763s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.763s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.385ms
[1.763s][info][gc,start    ] GC(0) Concurrent marking roots
[1.763s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.765s][info][gc          ] GC(0) Concurrent marking roots 2.292ms
[1.766s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.766s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.801s][info][gc          ] GC(0) Concurrent marking (unload classes) 35.969ms
[1.802s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.802s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.803s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1846M, Max CSet: 84672K, Min Garbage: 0B
[1.803s][info][gc,ergo     ] GC(0) Collectable Garbage: 73166K (98%), Immediate: 4335K (5%), CSet: 68831K (93%)
[1.803s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 77312K, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.803s][info][gc          ] GC(0) Pause Final Mark (unload classes) 1.335ms
[1.803s][info][gc,start    ] GC(0) Concurrent thread roots
[1.803s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.803s][info][gc          ] GC(0) Concurrent thread roots 0.281ms
[1.803s][info][gc,start    ] GC(0) Concurrent weak references
[1.803s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.804s][info][gc,ref      ] GC(0) Encountered references: Soft: 3955, Weak: 2095, Final: 4, Phantom: 820
[1.804s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1301, Final: 1, Phantom: 811
[1.804s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 498, Final: 0, Phantom: 230
[1.804s][info][gc          ] GC(0) Concurrent weak references 0.484ms
[1.804s][info][gc,start    ] GC(0) Concurrent weak roots
[1.804s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.807s][info][gc          ] GC(0) Concurrent weak roots 3.239ms
[1.807s][info][gc,start    ] GC(0) Concurrent cleanup
[1.807s][info][gc          ] GC(0) Concurrent cleanup 141M->136M(144M) 0.112ms
[1.807s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1742M humongous, Frag: 1% external, 0% internal; Reserve: 100982K, Max: 512K
[1.807s][info][gc,start    ] GC(0) Concurrent class unloading
[1.807s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.817s][info][gc          ] GC(0) Concurrent class unloading 9.680ms
[1.817s][info][gc,start    ] GC(0) Concurrent strong roots
[1.817s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.818s][info][gc          ] GC(0) Concurrent strong roots 1.260ms
[1.818s][info][gc,start    ] GC(0) Concurrent evacuation
[1.818s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.825s][info][gc          ] GC(0) Concurrent evacuation 7.234ms
[1.825s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.826s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 147M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.826s][info][gc          ] GC(0) Pause Init Update Refs 0.042ms
[1.826s][info][gc,start    ] GC(0) Concurrent update references
[1.826s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.859s][info][gc          ] GC(0) Concurrent update references 33.447ms
[1.859s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.859s][info][gc          ] GC(0) Concurrent update thread roots 0.254ms
[1.859s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.859s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.859s][info][gc          ] GC(0) Pause Final Update Refs 0.095ms
[1.860s][info][gc,start    ] GC(0) Concurrent cleanup
[1.860s][info][gc          ] GC(0) Concurrent cleanup 149M->74M(153M) 0.090ms
[1.860s][info][gc,ergo     ] Free: 1808M, Max: 512K regular, 1732M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.860s][info][gc,stats    ] 
[1.860s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.860s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.860s][info][gc,stats    ] 
[1.860s][info][gc,stats    ] Concurrent Reset                    295 us
[1.860s][info][gc,stats    ] Pause Init Mark (G)                 583 us
[1.860s][info][gc,stats    ] Pause Init Mark (N)                 396 us
[1.860s][info][gc,stats    ]   Update Region States               36 us
[1.860s][info][gc,stats    ] Concurrent Mark Roots              2315 us, parallelism: 1.85x
[1.860s][info][gc,stats    ]   CMR: <total>                     4288 us
[1.860s][info][gc,stats    ]   CMR: Thread Roots                1424 us, workers (us): 579, 845, ---, ---, ---, ---, ---, ---, 
[1.860s][info][gc,stats    ]   CMR: VM Strong Roots             1793 us, workers (us): 1615, 178, ---, ---, ---, ---, ---, ---, 
[1.860s][info][gc,stats    ]   CMR: CLDG Roots                  1071 us, workers (us): ---, 1071, ---, ---, ---, ---, ---, ---, 
[1.860s][info][gc,stats    ] Concurrent Marking                35998 us
[1.860s][info][gc,stats    ] Pause Final Mark (G)               1455 us
[1.860s][info][gc,stats    ] Pause Final Mark (N)               1344 us
[1.860s][info][gc,stats    ]   Finish Mark                      1150 us
[1.860s][info][gc,stats    ]   Update Region States               40 us
[1.860s][info][gc,stats    ]   Choose Collection Set              76 us
[1.860s][info][gc,stats    ]   Rebuild Free Set                   15 us
[1.860s][info][gc,stats    ] Concurrent Thread Roots             290 us, parallelism: 0.80x
[1.860s][info][gc,stats    ]   CTR: <total>                      232 us
[1.860s][info][gc,stats    ]   CTR: Thread Roots                 232 us, workers (us): 232,   0, ---, ---, ---, ---, ---, ---, 
[1.860s][info][gc,stats    ] Concurrent Weak References          492 us, parallelism: 0.88x
[1.860s][info][gc,stats    ]   CWRF: <total>                     431 us
[1.860s][info][gc,stats    ]   CWRF: Weak References             431 us, workers (us):  26, 405, ---, ---, ---, ---, ---, ---, 
[1.860s][info][gc,stats    ] Concurrent Weak Roots              3260 us
[1.860s][info][gc,stats    ]   Roots                            3038 us, parallelism: 1.50x
[1.860s][info][gc,stats    ]     CWR: <total>                   4571 us
[1.860s][info][gc,stats    ]     CWR: Code Cache Roots           630 us, workers (us):   0, 630, ---, ---, ---, ---, ---, ---, 
[1.860s][info][gc,stats    ]     CWR: VM Weak Roots             3922 us, workers (us): 2615, 1307, ---, ---, ---, ---, ---, ---, 
[1.860s][info][gc,stats    ]     CWR: CLDG Roots                  19 us, workers (us): ---,  19, ---, ---, ---, ---, ---, ---, 
[1.860s][info][gc,stats    ]   Rendezvous                        183 us
[1.860s][info][gc,stats    ] Concurrent Cleanup                  121 us
[1.860s][info][gc,stats    ] Concurrent Class Unloading         9698 us
[1.860s][info][gc,stats    ]   Unlink Stale                     2561 us
[1.860s][info][gc,stats    ]     System Dictionary                42 us
[1.860s][info][gc,stats    ]     Weak Class Links                  0 us
[1.860s][info][gc,stats    ]     Code Roots                     2518 us
[1.860s][info][gc,stats    ]   Rendezvous                       4313 us
[1.860s][info][gc,stats    ]   Purge Unlinked                   2784 us
[1.860s][info][gc,stats    ]     Code Roots                     2752 us
[1.860s][info][gc,stats    ]     CLDG                             32 us
[1.860s][info][gc,stats    ]     Exception Caches                  0 us
[1.860s][info][gc,stats    ] Concurrent Strong Roots            1277 us, parallelism: 0.90x
[1.860s][info][gc,stats    ]   CSR: <total>                     1156 us
[1.860s][info][gc,stats    ]   CSR: VM Strong Roots               27 us, workers (us):  27,   0, ---, ---, ---, ---, ---, ---, 
[1.860s][info][gc,stats    ]   CSR: CLDG Roots                  1129 us, workers (us): 1129, ---, ---, ---, ---, ---, ---, ---, 
[1.860s][info][gc,stats    ] Concurrent Evacuation              7258 us
[1.860s][info][gc,stats    ] Pause Init Update Refs (G)          160 us
[1.860s][info][gc,stats    ] Pause Init Update Refs (N)           51 us
[1.860s][info][gc,stats    ]   Manage GCLABs                       4 us
[1.860s][info][gc,stats    ] Concurrent Update Refs            33475 us
[1.860s][info][gc,stats    ] Concurrent Update Thread Roots      266 us
[1.860s][info][gc,stats    ] Pause Final Update Refs (G)         218 us
[1.860s][info][gc,stats    ] Pause Final Update Refs (N)         105 us
[1.860s][info][gc,stats    ]   Update Region States               35 us
[1.860s][info][gc,stats    ]   Trash Collection Set                4 us
[1.860s][info][gc,stats    ]   Rebuild Free Set                   19 us
[1.860s][info][gc,stats    ] Concurrent Cleanup                   98 us
[1.860s][info][gc,stats    ] 
[1.860s][info][gc,stats    ] Allocation pacing accrued:
[1.860s][info][gc,stats    ]       0 of  1855 ms (  0.0%): <total>
[1.860s][info][gc,stats    ]       0 of  1855 ms (  0.0%): <average total>
[1.860s][info][gc,stats    ] 
[1.860s][info][gc,metaspace] Metaspace: 21212K(21632K)->22598K(22912K) NonClass: 18862K(19072K)->20070K(20224K) Class: 2349K(2560K)->2527K(2688K)
[1.860s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.105s][info][gc          ] Cancelling GC: Stopping VM
[6.105s][info][gc,heap,exit] Heap
[6.105s][info][gc,heap,exit] Shenandoah Heap
[6.105s][info][gc,heap,exit]  1984M max, 1984M soft max, 153M committed, 86435K used
[6.105s][info][gc,heap,exit]  3969 x 512K regions
[6.105s][info][gc,heap,exit] Status: cancelled
[6.105s][info][gc,heap,exit] Reserved region:
[6.105s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.105s][info][gc,heap,exit] Collection set:
[6.105s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.105s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.105s][info][gc,heap,exit] 
[6.105s][info][gc,heap,exit]  Metaspace       used 25079K, committed 25408K, reserved 1114112K
[6.105s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.105s][info][gc,stats    ] 
[6.106s][info][gc,stats    ] GC STATISTICS:
[6.106s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.106s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.106s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.106s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.106s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.106s][info][gc,stats    ] 
[6.106s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.106s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.106s][info][gc,stats    ] 
[6.106s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.106s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.106s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.106s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.106s][info][gc,stats    ] 
[6.106s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.106s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.106s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.106s][info][gc,stats    ]   Raise max pacing delay with care.
[6.106s][info][gc,stats    ] 
[6.106s][info][gc,stats    ] Concurrent Reset               =    0.000 s (a =      295 us) (n =     1) (lvls, us =      295,      295,      295,      295,      295)
[6.106s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      583 us) (n =     1) (lvls, us =      582,      582,      582,      582,      583)
[6.106s][info][gc,stats    ] Pause Init Mark (N)            =    0.000 s (a =      396 us) (n =     1) (lvls, us =      395,      395,      395,      395,      396)
[6.106s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       36 us) (n =     1) (lvls, us =       36,       36,       36,       36,       36)
[6.106s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     2315 us) (n =     1) (lvls, us =     2305,     2305,     2305,     2305,     2315)
[6.106s][info][gc,stats    ]   CMR: <total>                 =    0.004 s (a =     4288 us) (n =     1) (lvls, us =     4277,     4277,     4277,     4277,     4288)
[6.106s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1424 us) (n =     1) (lvls, us =     1406,     1406,     1406,     1406,     1424)
[6.106s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.002 s (a =     1793 us) (n =     1) (lvls, us =     1777,     1777,     1777,     1777,     1793)
[6.106s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1071 us) (n =     1) (lvls, us =     1055,     1055,     1055,     1055,     1071)
[6.106s][info][gc,stats    ] Concurrent Marking             =    0.036 s (a =    35998 us) (n =     1) (lvls, us =    35938,    35938,    35938,    35938,    35998)
[6.106s][info][gc,stats    ] Pause Final Mark (G)           =    0.001 s (a =     1455 us) (n =     1) (lvls, us =     1445,     1445,     1445,     1445,     1455)
[6.106s][info][gc,stats    ] Pause Final Mark (N)           =    0.001 s (a =     1344 us) (n =     1) (lvls, us =     1328,     1328,     1328,     1328,     1344)
[6.106s][info][gc,stats    ]   Finish Mark                  =    0.001 s (a =     1150 us) (n =     1) (lvls, us =     1133,     1133,     1133,     1133,     1150)
[6.106s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       40 us) (n =     1) (lvls, us =       40,       40,       40,       40,       40)
[6.106s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       76 us) (n =     1) (lvls, us =       75,       75,       75,       75,       76)
[6.106s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       15 us) (n =     1) (lvls, us =       15,       15,       15,       15,       15)
[6.106s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      290 us) (n =     1) (lvls, us =      289,      289,      289,      289,      290)
[6.106s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      232 us) (n =     1) (lvls, us =      232,      232,      232,      232,      232)
[6.107s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      232 us) (n =     1) (lvls, us =      232,      232,      232,      232,      232)
[6.107s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      492 us) (n =     1) (lvls, us =      490,      490,      490,      490,      492)
[6.107s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      431 us) (n =     1) (lvls, us =      430,      430,      430,      430,      431)
[6.107s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      431 us) (n =     1) (lvls, us =      430,      430,      430,      430,      431)
[6.107s][info][gc,stats    ] Concurrent Weak Roots          =    0.003 s (a =     3260 us) (n =     1) (lvls, us =     3242,     3242,     3242,     3242,     3260)
[6.107s][info][gc,stats    ]   Roots                        =    0.003 s (a =     3038 us) (n =     1) (lvls, us =     3027,     3027,     3027,     3027,     3038)
[6.107s][info][gc,stats    ]     CWR: <total>               =    0.005 s (a =     4571 us) (n =     1) (lvls, us =     4570,     4570,     4570,     4570,     4571)
[6.107s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      630 us) (n =     1) (lvls, us =      629,      629,      629,      629,      630)
[6.107s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.004 s (a =     3922 us) (n =     1) (lvls, us =     3906,     3906,     3906,     3906,     3922)
[6.107s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[6.107s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      183 us) (n =     1) (lvls, us =      182,      182,      182,      182,      183)
[6.107s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      121 us) (n =     1) (lvls, us =      121,      121,      121,      121,      121)
[6.107s][info][gc,stats    ] Concurrent Class Unloading     =    0.010 s (a =     9698 us) (n =     1) (lvls, us =     9688,     9688,     9688,     9688,     9698)
[6.107s][info][gc,stats    ]   Unlink Stale                 =    0.003 s (a =     2561 us) (n =     1) (lvls, us =     2559,     2559,     2559,     2559,     2561)
[6.107s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       42 us) (n =     1) (lvls, us =       42,       42,       42,       42,       42)
[6.107s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.107s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2518 us) (n =     1) (lvls, us =     2500,     2500,     2500,     2500,     2518)
[6.107s][info][gc,stats    ]   Rendezvous                   =    0.004 s (a =     4313 us) (n =     1) (lvls, us =     4297,     4297,     4297,     4297,     4313)
[6.107s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     2784 us) (n =     1) (lvls, us =     2773,     2773,     2773,     2773,     2784)
[6.107s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2752 us) (n =     1) (lvls, us =     2734,     2734,     2734,     2734,     2752)
[6.107s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       32 us) (n =     1) (lvls, us =       31,       31,       31,       31,       32)
[6.107s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.107s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1277 us) (n =     1) (lvls, us =     1270,     1270,     1270,     1270,     1277)
[6.107s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1156 us) (n =     1) (lvls, us =     1152,     1152,     1152,     1152,     1156)
[6.107s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       27 us) (n =     1) (lvls, us =       27,       27,       27,       27,       27)
[6.107s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1129 us) (n =     1) (lvls, us =     1113,     1113,     1113,     1113,     1129)
[6.107s][info][gc,stats    ] Concurrent Evacuation          =    0.007 s (a =     7258 us) (n =     1) (lvls, us =     7246,     7246,     7246,     7246,     7258)
[6.107s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      160 us) (n =     1) (lvls, us =      160,      160,      160,      160,      160)
[6.107s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       51 us) (n =     1) (lvls, us =       51,       51,       51,       51,       51)
[6.107s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.107s][info][gc,stats    ] Concurrent Update Refs         =    0.033 s (a =    33475 us) (n =     1) (lvls, us =    33398,    33398,    33398,    33398,    33475)
[6.107s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      266 us) (n =     1) (lvls, us =      266,      266,      266,      266,      266)
[6.107s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      218 us) (n =     1) (lvls, us =      217,      217,      217,      217,      218)
[6.107s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      105 us) (n =     1) (lvls, us =      104,      104,      104,      104,      105)
[6.107s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       35 us) (n =     1) (lvls, us =       35,       35,       35,       35,       35)
[6.107s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.107s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[6.108s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       98 us) (n =     1) (lvls, us =       98,       98,       98,       98,       98)
[6.108s][info][gc,stats    ] 
[6.108s][info][gc,stats    ] 
[6.108s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.108s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.108s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.108s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.108s][info][gc,stats    ] 
[6.108s][info][gc,stats    ]     1 successful concurrent GCs
[6.108s][info][gc,stats    ]       0 invoked explicitly
[6.108s][info][gc,stats    ]       0 invoked implicitly
[6.108s][info][gc,stats    ] 
[6.108s][info][gc,stats    ]     0 Degenerated GCs
[6.108s][info][gc,stats    ]       0 caused by allocation failure
[6.108s][info][gc,stats    ]       0 upgraded to Full GC
[6.108s][info][gc,stats    ] 
[6.108s][info][gc,stats    ]     0 Full GCs
[6.108s][info][gc,stats    ]       0 invoked explicitly
[6.108s][info][gc,stats    ]       0 invoked implicitly
[6.108s][info][gc,stats    ]       0 caused by allocation failure
[6.108s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.108s][info][gc,stats    ] 
[6.108s][info][gc,stats    ] 
