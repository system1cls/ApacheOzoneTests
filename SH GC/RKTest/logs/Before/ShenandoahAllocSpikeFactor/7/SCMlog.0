[0.008s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.008s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.009s][info][gc] Using Shenandoah
[0.010s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.010s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.010s][info][gc,init] CPUs: 4 total, 4 available
[0.010s][info][gc,init] Memory: 7937M
[0.010s][info][gc,init] Large Page Support: Disabled
[0.010s][info][gc,init] NUMA Support: Disabled
[0.010s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.010s][info][gc,init] Heap Min Capacity: 6656K
[0.010s][info][gc,init] Heap Initial Capacity: 127488K
[0.010s][info][gc,init] Heap Max Capacity: 2032128K
[0.010s][info][gc,init] Pre-touch: Disabled
[0.010s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.010s][info][gc,init] Heuristics: Adaptive
[0.010s][info][gc,init] Heap Region Count: 3969
[0.010s][info][gc,init] Heap Region Size: 512K
[0.010s][info][gc,init] TLAB Size Max: 512K
[0.010s][info][gc,init] Humongous Object Threshold: 512K
[0.010s][info][gc,init] Parallel Workers: 8
[0.010s][info][gc,init] Concurrent Workers: 2
[0.019s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f9643000000-0x00007f9643c97000-0x00007f9643c97000), size 13201408, SharedBaseAddress: 0x00007f9643000000, ArchiveRelocationMode: 1.
[0.019s][info][gc,metaspace] Compressed class space mapped at: 0x00007f9644000000-0x00007f9684000000, reserved size: 1073741824
[0.019s][info][gc,metaspace] Narrow klass base: 0x00007f9643000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.296s][info][gc          ] Trigger: Metadata GC Threshold
[1.296s][info][gc,ergo     ] Free: 1790M, Max: 512K regular, 1790M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.296s][info][gc,start    ] GC(0) Concurrent reset
[1.296s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.296s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.297s][info][gc          ] GC(0) Concurrent reset 0.521ms
[1.297s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.297s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.297s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1790M, Non-Taxable: 179M, Alloc Tax Rate: 0.1x
[1.297s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.531ms
[1.298s][info][gc,start    ] GC(0) Concurrent marking roots
[1.298s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.301s][info][gc          ] GC(0) Concurrent marking roots 3.168ms
[1.301s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.301s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.312s][info][gc          ] GC(0) Concurrent marking (unload classes) 10.881ms
[1.312s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.312s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.313s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1893M, Max CSet: 84672K, Min Garbage: 0B
[1.313s][info][gc,ergo     ] GC(0) Collectable Garbage: 82084K (99%), Immediate: 5343K (6%), CSet: 76741K (92%)
[1.313s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 84480K, Free: 1794M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.313s][info][gc          ] GC(0) Pause Final Mark (unload classes) 0.399ms
[1.313s][info][gc,start    ] GC(0) Concurrent thread roots
[1.313s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.313s][info][gc          ] GC(0) Concurrent thread roots 0.209ms
[1.313s][info][gc,start    ] GC(0) Concurrent weak references
[1.313s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.313s][info][gc,ref      ] GC(0) Encountered references: Soft: 3956, Weak: 2139, Final: 20, Phantom: 796
[1.313s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 610, Final: 0, Phantom: 485
[1.313s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 483, Final: 0, Phantom: 317
[1.313s][info][gc          ] GC(0) Concurrent weak references 0.236ms
[1.313s][info][gc,start    ] GC(0) Concurrent weak roots
[1.313s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.316s][info][gc          ] GC(0) Concurrent weak roots 2.532ms
[1.316s][info][gc,start    ] GC(0) Concurrent cleanup
[1.316s][info][gc          ] GC(0) Concurrent cleanup 97M->92M(126M) 0.069ms
[1.316s][info][gc,ergo     ] GC(0) Free: 1793M, Max: 512K regular, 1788M humongous, Frag: 1% external, 0% internal; Reserve: 100861K, Max: 512K
[1.316s][info][gc,start    ] GC(0) Concurrent class unloading
[1.316s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.325s][info][gc          ] GC(0) Concurrent class unloading 8.749ms
[1.325s][info][gc,start    ] GC(0) Concurrent strong roots
[1.325s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.326s][info][gc          ] GC(0) Concurrent strong roots 1.070ms
[1.326s][info][gc,start    ] GC(0) Concurrent evacuation
[1.326s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.331s][info][gc          ] GC(0) Concurrent evacuation 5.139ms
[1.331s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.331s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 100M, Free: 1793M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.331s][info][gc          ] GC(0) Pause Init Update Refs 0.033ms
[1.331s][info][gc,start    ] GC(0) Concurrent update references
[1.331s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.336s][info][gc          ] GC(0) Concurrent update references 4.522ms
[1.336s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.336s][info][gc          ] GC(0) Concurrent update thread roots 0.270ms
[1.336s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.336s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.336s][info][gc          ] GC(0) Pause Final Update Refs 0.061ms
[1.336s][info][gc,start    ] GC(0) Concurrent cleanup
[1.336s][info][gc          ] GC(0) Concurrent cleanup 100M->18M(133M) 0.078ms
[1.336s][info][gc,ergo     ] Free: 1866M, Max: 512K regular, 1779M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.336s][info][gc,stats    ] 
[1.336s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.336s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.336s][info][gc,stats    ] 
[1.336s][info][gc,stats    ] Concurrent Reset                    552 us
[1.336s][info][gc,stats    ] Pause Init Mark (G)                1600 us
[1.336s][info][gc,stats    ] Pause Init Mark (N)                 554 us
[1.336s][info][gc,stats    ]   Update Region States               28 us
[1.336s][info][gc,stats    ] Concurrent Mark Roots              3196 us, parallelism: 0.96x
[1.336s][info][gc,stats    ]   CMR: <total>                     3072 us
[1.336s][info][gc,stats    ]   CMR: Thread Roots                 829 us, workers (us): 829,   0, ---, ---, ---, ---, ---, ---, 
[1.336s][info][gc,stats    ]   CMR: VM Strong Roots              627 us, workers (us): 627,   0, ---, ---, ---, ---, ---, ---, 
[1.336s][info][gc,stats    ]   CMR: CLDG Roots                  1616 us, workers (us): 1616, ---, ---, ---, ---, ---, ---, ---, 
[1.336s][info][gc,stats    ] Concurrent Marking                10903 us
[1.336s][info][gc,stats    ] Pause Final Mark (G)                495 us
[1.336s][info][gc,stats    ] Pause Final Mark (N)                406 us
[1.336s][info][gc,stats    ]   Finish Mark                       245 us
[1.336s][info][gc,stats    ]   Update Region States               22 us
[1.336s][info][gc,stats    ]   Choose Collection Set              76 us
[1.336s][info][gc,stats    ]   Rebuild Free Set                   16 us
[1.336s][info][gc,stats    ] Concurrent Thread Roots             222 us, parallelism: 1.31x
[1.336s][info][gc,stats    ]   CTR: <total>                      291 us
[1.336s][info][gc,stats    ]   CTR: Thread Roots                 291 us, workers (us): 179, 112, ---, ---, ---, ---, ---, ---, 
[1.336s][info][gc,stats    ] Concurrent Weak References          244 us, parallelism: 0.75x
[1.336s][info][gc,stats    ]   CWRF: <total>                     183 us
[1.336s][info][gc,stats    ]   CWRF: Weak References             183 us, workers (us):  30, 153, ---, ---, ---, ---, ---, ---, 
[1.336s][info][gc,stats    ] Concurrent Weak Roots              2555 us
[1.337s][info][gc,stats    ]   Roots                            2148 us, parallelism: 1.53x
[1.337s][info][gc,stats    ]     CWR: <total>                   3291 us
[1.337s][info][gc,stats    ]     CWR: Code Cache Roots           827 us, workers (us): 409, 418, ---, ---, ---, ---, ---, ---, 
[1.337s][info][gc,stats    ]     CWR: VM Weak Roots             2452 us, workers (us): 1648, 804, ---, ---, ---, ---, ---, ---, 
[1.337s][info][gc,stats    ]     CWR: CLDG Roots                  12 us, workers (us): ---,  12, ---, ---, ---, ---, ---, ---, 
[1.337s][info][gc,stats    ]   Rendezvous                        369 us
[1.337s][info][gc,stats    ] Concurrent Cleanup                   79 us
[1.337s][info][gc,stats    ] Concurrent Class Unloading         8766 us
[1.337s][info][gc,stats    ]   Unlink Stale                     3511 us
[1.337s][info][gc,stats    ]     System Dictionary                35 us
[1.337s][info][gc,stats    ]     Weak Class Links                  0 us
[1.337s][info][gc,stats    ]     Code Roots                     3475 us
[1.337s][info][gc,stats    ]   Rendezvous                         30 us
[1.337s][info][gc,stats    ]   Purge Unlinked                   3152 us
[1.337s][info][gc,stats    ]     Code Roots                     3142 us
[1.337s][info][gc,stats    ]     CLDG                              9 us
[1.337s][info][gc,stats    ]     Exception Caches                  0 us
[1.337s][info][gc,stats    ] Concurrent Strong Roots            1090 us, parallelism: 0.94x
[1.337s][info][gc,stats    ]   CSR: <total>                     1020 us
[1.337s][info][gc,stats    ]   CSR: VM Strong Roots               23 us, workers (us):  22,   0, ---, ---, ---, ---, ---, ---, 
[1.337s][info][gc,stats    ]   CSR: CLDG Roots                   998 us, workers (us): 998, ---, ---, ---, ---, ---, ---, ---, 
[1.337s][info][gc,stats    ] Concurrent Evacuation              5163 us
[1.337s][info][gc,stats    ] Pause Init Update Refs (G)          158 us
[1.337s][info][gc,stats    ] Pause Init Update Refs (N)           42 us
[1.337s][info][gc,stats    ]   Manage GCLABs                       5 us
[1.337s][info][gc,stats    ] Concurrent Update Refs             4546 us
[1.337s][info][gc,stats    ] Concurrent Update Thread Roots      282 us
[1.337s][info][gc,stats    ] Pause Final Update Refs (G)         159 us
[1.337s][info][gc,stats    ] Pause Final Update Refs (N)          72 us
[1.337s][info][gc,stats    ]   Update Region States               20 us
[1.337s][info][gc,stats    ]   Trash Collection Set                4 us
[1.337s][info][gc,stats    ]   Rebuild Free Set                   20 us
[1.337s][info][gc,stats    ] Concurrent Cleanup                   88 us
[1.337s][info][gc,stats    ] 
[1.337s][info][gc,stats    ] Allocation pacing accrued:
[1.337s][info][gc,stats    ]       0 of  1327 ms (  0.0%): <total>
[1.337s][info][gc,stats    ]       0 of  1327 ms (  0.0%): <average total>
[1.337s][info][gc,stats    ] 
[1.337s][info][gc,metaspace] Metaspace: 21235K(21568K)->21582K(21952K) NonClass: 18896K(19072K)->19196K(19392K) Class: 2338K(2496K)->2386K(2560K)
[1.337s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[7.719s][info][gc          ] Cancelling GC: Stopping VM
[7.720s][info][gc,heap,exit] Heap
[7.720s][info][gc,heap,exit] Shenandoah Heap
[7.720s][info][gc,heap,exit]  1984M max, 1984M soft max, 133M committed, 37911K used
[7.720s][info][gc,heap,exit]  3969 x 512K regions
[7.720s][info][gc,heap,exit] Status: cancelled
[7.720s][info][gc,heap,exit] Reserved region:
[7.720s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[7.720s][info][gc,heap,exit] Collection set:
[7.720s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[7.720s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[7.720s][info][gc,heap,exit] 
[7.720s][info][gc,heap,exit]  Metaspace       used 25404K, committed 25792K, reserved 1114112K
[7.720s][info][gc,heap,exit]   class space    used 2923K, committed 3136K, reserved 1048576K
[7.720s][info][gc,stats    ] 
[7.720s][info][gc,stats    ] GC STATISTICS:
[7.720s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[7.720s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[7.720s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[7.720s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[7.720s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[7.720s][info][gc,stats    ] 
[7.720s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[7.720s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[7.720s][info][gc,stats    ] 
[7.720s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[7.720s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[7.720s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[7.720s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[7.720s][info][gc,stats    ] 
[7.720s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[7.720s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[7.720s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[7.720s][info][gc,stats    ]   Raise max pacing delay with care.
[7.721s][info][gc,stats    ] 
[7.721s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      552 us) (n =     1) (lvls, us =      551,      551,      551,      551,      552)
[7.721s][info][gc,stats    ] Pause Init Mark (G)            =    0.002 s (a =     1600 us) (n =     1) (lvls, us =     1582,     1582,     1582,     1582,     1600)
[7.721s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      554 us) (n =     1) (lvls, us =      553,      553,      553,      553,      554)
[7.721s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       28 us) (n =     1) (lvls, us =       28,       28,       28,       28,       28)
[7.721s][info][gc,stats    ] Concurrent Mark Roots          =    0.003 s (a =     3196 us) (n =     1) (lvls, us =     3184,     3184,     3184,     3184,     3196)
[7.721s][info][gc,stats    ]   CMR: <total>                 =    0.003 s (a =     3072 us) (n =     1) (lvls, us =     3066,     3066,     3066,     3066,     3072)
[7.721s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =      829 us) (n =     1) (lvls, us =      828,      828,      828,      828,      829)
[7.721s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      627 us) (n =     1) (lvls, us =      627,      627,      627,      627,      627)
[7.721s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     1616 us) (n =     1) (lvls, us =     1602,     1602,     1602,     1602,     1616)
[7.721s][info][gc,stats    ] Concurrent Marking             =    0.011 s (a =    10903 us) (n =     1) (lvls, us =    10742,    10742,    10742,    10742,    10903)
[7.721s][info][gc,stats    ] Pause Final Mark (G)           =    0.000 s (a =      495 us) (n =     1) (lvls, us =      494,      494,      494,      494,      495)
[7.721s][info][gc,stats    ] Pause Final Mark (N)           =    0.000 s (a =      406 us) (n =     1) (lvls, us =      404,      404,      404,      404,      406)
[7.721s][info][gc,stats    ]   Finish Mark                  =    0.000 s (a =      245 us) (n =     1) (lvls, us =      244,      244,      244,      244,      245)
[7.721s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       22 us) (n =     1) (lvls, us =       22,       22,       22,       22,       22)
[7.721s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       76 us) (n =     1) (lvls, us =       76,       76,       76,       76,       76)
[7.721s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[7.721s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      222 us) (n =     1) (lvls, us =      221,      221,      221,      221,      222)
[7.721s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      291 us) (n =     1) (lvls, us =      291,      291,      291,      291,      291)
[7.721s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      291 us) (n =     1) (lvls, us =      291,      291,      291,      291,      291)
[7.721s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      244 us) (n =     1) (lvls, us =      242,      242,      242,      242,      244)
[7.721s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      183 us) (n =     1) (lvls, us =      182,      182,      182,      182,      183)
[7.721s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      183 us) (n =     1) (lvls, us =      182,      182,      182,      182,      183)
[7.721s][info][gc,stats    ] Concurrent Weak Roots          =    0.003 s (a =     2555 us) (n =     1) (lvls, us =     2539,     2539,     2539,     2539,     2555)
[7.721s][info][gc,stats    ]   Roots                        =    0.002 s (a =     2148 us) (n =     1) (lvls, us =     2129,     2129,     2129,     2129,     2148)
[7.721s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     3291 us) (n =     1) (lvls, us =     3281,     3281,     3281,     3281,     3291)
[7.721s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      827 us) (n =     1) (lvls, us =      826,      826,      826,      826,      827)
[7.721s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     2452 us) (n =     1) (lvls, us =     2441,     2441,     2441,     2441,     2452)
[7.721s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       12 us) (n =     1) (lvls, us =       12,       12,       12,       12,       12)
[7.721s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      369 us) (n =     1) (lvls, us =      369,      369,      369,      369,      369)
[7.721s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       79 us) (n =     1) (lvls, us =       79,       79,       79,       79,       79)
[7.721s][info][gc,stats    ] Concurrent Class Unloading     =    0.009 s (a =     8766 us) (n =     1) (lvls, us =     8750,     8750,     8750,     8750,     8766)
[7.721s][info][gc,stats    ]   Unlink Stale                 =    0.004 s (a =     3511 us) (n =     1) (lvls, us =     3496,     3496,     3496,     3496,     3511)
[7.721s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       35 us) (n =     1) (lvls, us =       35,       35,       35,       35,       35)
[7.721s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.721s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     3475 us) (n =     1) (lvls, us =     3457,     3457,     3457,     3457,     3475)
[7.721s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       30 us) (n =     1) (lvls, us =       30,       30,       30,       30,       30)
[7.721s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     3152 us) (n =     1) (lvls, us =     3145,     3145,     3145,     3145,     3152)
[7.721s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     3142 us) (n =     1) (lvls, us =     3125,     3125,     3125,     3125,     3142)
[7.721s][info][gc,stats    ]     CLDG                       =    0.000 s (a =        9 us) (n =     1) (lvls, us =        9,        9,        9,        9,        9)
[7.721s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.721s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1090 us) (n =     1) (lvls, us =     1074,     1074,     1074,     1074,     1090)
[7.721s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1020 us) (n =     1) (lvls, us =     1016,     1016,     1016,     1016,     1020)
[7.721s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       23 us) (n =     1) (lvls, us =       22,       22,       22,       22,       23)
[7.721s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =      998 us) (n =     1) (lvls, us =      996,      996,      996,      996,      998)
[7.721s][info][gc,stats    ] Concurrent Evacuation          =    0.005 s (a =     5163 us) (n =     1) (lvls, us =     5156,     5156,     5156,     5156,     5163)
[7.721s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      158 us) (n =     1) (lvls, us =      156,      156,      156,      156,      158)
[7.721s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       42 us) (n =     1) (lvls, us =       42,       42,       42,       42,       42)
[7.721s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[7.721s][info][gc,stats    ] Concurrent Update Refs         =    0.005 s (a =     4546 us) (n =     1) (lvls, us =     4531,     4531,     4531,     4531,     4546)
[7.721s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      282 us) (n =     1) (lvls, us =      281,      281,      281,      281,      282)
[7.721s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      159 us) (n =     1) (lvls, us =      158,      158,      158,      158,      159)
[7.721s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =       72 us) (n =     1) (lvls, us =       72,       72,       72,       72,       72)
[7.721s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[7.721s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[7.721s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[7.721s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       88 us) (n =     1) (lvls, us =       88,       88,       88,       88,       88)
[7.721s][info][gc,stats    ] 
[7.721s][info][gc,stats    ] 
[7.721s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[7.721s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[7.721s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[7.721s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[7.721s][info][gc,stats    ] 
[7.721s][info][gc,stats    ]     1 successful concurrent GCs
[7.721s][info][gc,stats    ]       0 invoked explicitly
[7.721s][info][gc,stats    ]       0 invoked implicitly
[7.721s][info][gc,stats    ] 
[7.721s][info][gc,stats    ]     0 Degenerated GCs
[7.721s][info][gc,stats    ]       0 caused by allocation failure
[7.721s][info][gc,stats    ]       0 upgraded to Full GC
[7.721s][info][gc,stats    ] 
[7.721s][info][gc,stats    ]     0 Full GCs
[7.721s][info][gc,stats    ]       0 invoked explicitly
[7.721s][info][gc,stats    ]       0 invoked implicitly
[7.721s][info][gc,stats    ]       0 caused by allocation failure
[7.721s][info][gc,stats    ]       0 upgraded from Degenerated GC
[7.721s][info][gc,stats    ] 
[7.721s][info][gc,stats    ] 
