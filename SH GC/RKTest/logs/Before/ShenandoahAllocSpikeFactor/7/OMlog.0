[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.004s][info][gc] Using Shenandoah
[0.005s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.005s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.005s][info][gc,init] CPUs: 4 total, 4 available
[0.005s][info][gc,init] Memory: 7937M
[0.005s][info][gc,init] Large Page Support: Disabled
[0.005s][info][gc,init] NUMA Support: Disabled
[0.005s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.005s][info][gc,init] Heap Min Capacity: 6656K
[0.005s][info][gc,init] Heap Initial Capacity: 127488K
[0.005s][info][gc,init] Heap Max Capacity: 2032128K
[0.005s][info][gc,init] Pre-touch: Disabled
[0.005s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.005s][info][gc,init] Heuristics: Adaptive
[0.005s][info][gc,init] Heap Region Count: 3969
[0.005s][info][gc,init] Heap Region Size: 512K
[0.005s][info][gc,init] TLAB Size Max: 512K
[0.005s][info][gc,init] Humongous Object Threshold: 512K
[0.005s][info][gc,init] Parallel Workers: 8
[0.005s][info][gc,init] Concurrent Workers: 2
[0.014s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007fcbfb000000-0x00007fcbfbc97000-0x00007fcbfbc97000), size 13201408, SharedBaseAddress: 0x00007fcbfb000000, ArchiveRelocationMode: 1.
[0.014s][info][gc,metaspace] Compressed class space mapped at: 0x00007fcbfc000000-0x00007fcc3c000000, reserved size: 1073741824
[0.014s][info][gc,metaspace] Narrow klass base: 0x00007fcbfb000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.977s][info][gc          ] Trigger: Metadata GC Threshold
[1.977s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.977s][info][gc,start    ] GC(0) Concurrent reset
[1.977s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.977s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.978s][info][gc          ] GC(0) Concurrent reset 0.529ms
[1.978s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.978s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.979s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.979s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.715ms
[1.979s][info][gc,start    ] GC(0) Concurrent marking roots
[1.979s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.981s][info][gc          ] GC(0) Concurrent marking roots 2.157ms
[1.981s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.981s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[2.024s][info][gc          ] GC(0) Concurrent marking (unload classes) 43.470ms
[2.025s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[2.025s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[2.025s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1846M, Max CSet: 84672K, Min Garbage: 0B
[2.025s][info][gc,ergo     ] GC(0) Collectable Garbage: 73142K (98%), Immediate: 4847K (6%), CSet: 68295K (92%)
[2.025s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 76800K, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.025s][info][gc          ] GC(0) Pause Final Mark (unload classes) 0.335ms
[2.025s][info][gc,start    ] GC(0) Concurrent thread roots
[2.025s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[2.025s][info][gc          ] GC(0) Concurrent thread roots 0.306ms
[2.025s][info][gc,start    ] GC(0) Concurrent weak references
[2.025s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[2.025s][info][gc,ref      ] GC(0) Encountered references: Soft: 3955, Weak: 2096, Final: 4, Phantom: 821
[2.025s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1321, Final: 4, Phantom: 689
[2.025s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 499, Final: 0, Phantom: 230
[2.026s][info][gc          ] GC(0) Concurrent weak references 0.326ms
[2.026s][info][gc,start    ] GC(0) Concurrent weak roots
[2.026s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[2.030s][info][gc          ] GC(0) Concurrent weak roots 4.528ms
[2.030s][info][gc,start    ] GC(0) Concurrent cleanup
[2.030s][info][gc          ] GC(0) Concurrent cleanup 141M->137M(145M) 0.112ms
[2.030s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1741M humongous, Frag: 1% external, 0% internal; Reserve: 100793K, Max: 512K
[2.030s][info][gc,start    ] GC(0) Concurrent class unloading
[2.030s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[2.036s][info][gc          ] GC(0) Concurrent class unloading 5.709ms
[2.036s][info][gc,start    ] GC(0) Concurrent strong roots
[2.036s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[2.037s][info][gc          ] GC(0) Concurrent strong roots 1.119ms
[2.037s][info][gc,start    ] GC(0) Concurrent evacuation
[2.037s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[2.045s][info][gc          ] GC(0) Concurrent evacuation 7.778ms
[2.045s][info][gc,start    ] GC(0) Pause Init Update Refs
[2.045s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 146M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.045s][info][gc          ] GC(0) Pause Init Update Refs 0.029ms
[2.045s][info][gc,start    ] GC(0) Concurrent update references
[2.045s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[2.065s][info][gc          ] GC(0) Concurrent update references 20.496ms
[2.066s][info][gc,start    ] GC(0) Concurrent update thread roots
[2.066s][info][gc          ] GC(0) Concurrent update thread roots 0.232ms
[2.066s][info][gc,start    ] GC(0) Pause Final Update Refs
[2.066s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[2.066s][info][gc          ] GC(0) Pause Final Update Refs 0.081ms
[2.066s][info][gc,start    ] GC(0) Concurrent cleanup
[2.066s][info][gc          ] GC(0) Concurrent cleanup 147M->72M(153M) 0.070ms
[2.066s][info][gc,ergo     ] Free: 1809M, Max: 512K regular, 1731M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[2.066s][info][gc,stats    ] 
[2.066s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[2.066s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[2.066s][info][gc,stats    ] 
[2.066s][info][gc,stats    ] Concurrent Reset                    557 us
[2.066s][info][gc,stats    ] Pause Init Mark (G)                1020 us
[2.066s][info][gc,stats    ] Pause Init Mark (N)                 738 us
[2.066s][info][gc,stats    ]   Update Region States               32 us
[2.066s][info][gc,stats    ] Concurrent Mark Roots              2208 us, parallelism: 1.52x
[2.066s][info][gc,stats    ]   CMR: <total>                     3349 us
[2.066s][info][gc,stats    ]   CMR: Thread Roots                1041 us, workers (us): 1041,   0, ---, ---, ---, ---, ---, ---, 
[2.066s][info][gc,stats    ]   CMR: VM Strong Roots              733 us, workers (us): 391, 342, ---, ---, ---, ---, ---, ---, 
[2.066s][info][gc,stats    ]   CMR: CLDG Roots                  1575 us, workers (us): ---, 1575, ---, ---, ---, ---, ---, ---, 
[2.066s][info][gc,stats    ] Concurrent Marking                43496 us
[2.066s][info][gc,stats    ] Pause Final Mark (G)                477 us
[2.066s][info][gc,stats    ] Pause Final Mark (N)                354 us
[2.066s][info][gc,stats    ]   Finish Mark                        99 us
[2.066s][info][gc,stats    ]   Update Region States               38 us
[2.066s][info][gc,stats    ]   Choose Collection Set              86 us
[2.066s][info][gc,stats    ]   Rebuild Free Set                   21 us
[2.066s][info][gc,stats    ] Concurrent Thread Roots             321 us, parallelism: 1.12x
[2.066s][info][gc,stats    ]   CTR: <total>                      358 us
[2.066s][info][gc,stats    ]   CTR: Thread Roots                 358 us, workers (us): 272,  86, ---, ---, ---, ---, ---, ---, 
[2.066s][info][gc,stats    ] Concurrent Weak References          335 us, parallelism: 1.19x
[2.066s][info][gc,stats    ]   CWRF: <total>                     398 us
[2.066s][info][gc,stats    ]   CWRF: Weak References             398 us, workers (us): 153, 245, ---, ---, ---, ---, ---, ---, 
[2.066s][info][gc,stats    ] Concurrent Weak Roots              4551 us
[2.066s][info][gc,stats    ]   Roots                            3441 us, parallelism: 1.74x
[2.066s][info][gc,stats    ]     CWR: <total>                   5976 us
[2.066s][info][gc,stats    ]     CWR: Code Cache Roots          4160 us, workers (us): 2221, 1939, ---, ---, ---, ---, ---, ---, 
[2.066s][info][gc,stats    ]     CWR: VM Weak Roots             1802 us, workers (us): 1148, 654, ---, ---, ---, ---, ---, ---, 
[2.066s][info][gc,stats    ]     CWR: CLDG Roots                  14 us, workers (us):  14, ---, ---, ---, ---, ---, ---, ---, 
[2.066s][info][gc,stats    ]   Rendezvous                       1069 us
[2.066s][info][gc,stats    ] Concurrent Cleanup                  121 us
[2.066s][info][gc,stats    ] Concurrent Class Unloading         5729 us
[2.066s][info][gc,stats    ]   Unlink Stale                     2673 us
[2.066s][info][gc,stats    ]     System Dictionary                35 us
[2.066s][info][gc,stats    ]     Weak Class Links                  0 us
[2.066s][info][gc,stats    ]     Code Roots                     2636 us
[2.066s][info][gc,stats    ]   Rendezvous                         19 us
[2.066s][info][gc,stats    ]   Purge Unlinked                   2999 us
[2.066s][info][gc,stats    ]     Code Roots                     2987 us
[2.066s][info][gc,stats    ]     CLDG                             11 us
[2.066s][info][gc,stats    ]     Exception Caches                  0 us
[2.066s][info][gc,stats    ] Concurrent Strong Roots            1136 us, parallelism: 0.95x
[2.066s][info][gc,stats    ]   CSR: <total>                     1082 us
[2.067s][info][gc,stats    ]   CSR: VM Strong Roots               16 us, workers (us):  12,   4, ---, ---, ---, ---, ---, ---, 
[2.067s][info][gc,stats    ]   CSR: CLDG Roots                  1066 us, workers (us): ---, 1066, ---, ---, ---, ---, ---, ---, 
[2.067s][info][gc,stats    ] Concurrent Evacuation              7802 us
[2.067s][info][gc,stats    ] Pause Init Update Refs (G)           92 us
[2.067s][info][gc,stats    ] Pause Init Update Refs (N)           37 us
[2.067s][info][gc,stats    ]   Manage GCLABs                       4 us
[2.067s][info][gc,stats    ] Concurrent Update Refs            20529 us
[2.067s][info][gc,stats    ] Concurrent Update Thread Roots      250 us
[2.067s][info][gc,stats    ] Pause Final Update Refs (G)         219 us
[2.067s][info][gc,stats    ] Pause Final Update Refs (N)          90 us
[2.067s][info][gc,stats    ]   Update Region States               32 us
[2.067s][info][gc,stats    ]   Trash Collection Set                3 us
[2.067s][info][gc,stats    ]   Rebuild Free Set                   17 us
[2.067s][info][gc,stats    ] Concurrent Cleanup                   80 us
[2.067s][info][gc,stats    ] 
[2.067s][info][gc,stats    ] Allocation pacing accrued:
[2.067s][info][gc,stats    ]       0 of  2062 ms (  0.0%): <total>
[2.067s][info][gc,stats    ]       0 of  2062 ms (  0.0%): <average total>
[2.067s][info][gc,stats    ] 
[2.067s][info][gc,metaspace] Metaspace: 21249K(21632K)->21870K(22272K) NonClass: 18898K(19072K)->19438K(19648K) Class: 2350K(2560K)->2432K(2624K)
[2.067s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.371s][info][gc          ] Cancelling GC: Stopping VM
[6.372s][info][gc,heap,exit] Heap
[6.372s][info][gc,heap,exit] Shenandoah Heap
[6.372s][info][gc,heap,exit]  1984M max, 1984M soft max, 153M committed, 86508K used
[6.372s][info][gc,heap,exit]  3969 x 512K regions
[6.372s][info][gc,heap,exit] Status: cancelled
[6.372s][info][gc,heap,exit] Reserved region:
[6.372s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.372s][info][gc,heap,exit] Collection set:
[6.372s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.372s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.373s][info][gc,heap,exit] 
[6.373s][info][gc,heap,exit]  Metaspace       used 25115K, committed 25408K, reserved 1114112K
[6.373s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.373s][info][gc,stats    ] 
[6.373s][info][gc,stats    ] GC STATISTICS:
[6.373s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.373s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.373s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.373s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.373s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.373s][info][gc,stats    ] 
[6.373s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.373s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.373s][info][gc,stats    ] 
[6.373s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.373s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.373s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.373s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.373s][info][gc,stats    ] 
[6.373s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.373s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.373s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.373s][info][gc,stats    ]   Raise max pacing delay with care.
[6.373s][info][gc,stats    ] 
[6.373s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      557 us) (n =     1) (lvls, us =      557,      557,      557,      557,      557)
[6.373s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =     1020 us) (n =     1) (lvls, us =     1016,     1016,     1016,     1016,     1020)
[6.373s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      738 us) (n =     1) (lvls, us =      738,      738,      738,      738,      738)
[6.373s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       32 us) (n =     1) (lvls, us =       32,       32,       32,       32,       32)
[6.373s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     2208 us) (n =     1) (lvls, us =     2207,     2207,     2207,     2207,     2208)
[6.373s][info][gc,stats    ]   CMR: <total>                 =    0.003 s (a =     3349 us) (n =     1) (lvls, us =     3340,     3340,     3340,     3340,     3349)
[6.373s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1041 us) (n =     1) (lvls, us =     1035,     1035,     1035,     1035,     1041)
[6.374s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      733 us) (n =     1) (lvls, us =      732,      732,      732,      732,      733)
[6.374s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     1575 us) (n =     1) (lvls, us =     1562,     1562,     1562,     1562,     1575)
[6.374s][info][gc,stats    ] Concurrent Marking             =    0.043 s (a =    43496 us) (n =     1) (lvls, us =    43359,    43359,    43359,    43359,    43496)
[6.374s][info][gc,stats    ] Pause Final Mark (G)           =    0.000 s (a =      477 us) (n =     1) (lvls, us =      475,      475,      475,      475,      477)
[6.374s][info][gc,stats    ] Pause Final Mark (N)           =    0.000 s (a =      354 us) (n =     1) (lvls, us =      354,      354,      354,      354,      354)
[6.374s][info][gc,stats    ]   Finish Mark                  =    0.000 s (a =       99 us) (n =     1) (lvls, us =       99,       99,       99,       99,       99)
[6.374s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       38 us) (n =     1) (lvls, us =       38,       38,       38,       38,       38)
[6.374s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       86 us) (n =     1) (lvls, us =       86,       86,       86,       86,       86)
[6.374s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       21 us) (n =     1) (lvls, us =       21,       21,       21,       21,       21)
[6.374s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      321 us) (n =     1) (lvls, us =      320,      320,      320,      320,      321)
[6.374s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      358 us) (n =     1) (lvls, us =      357,      357,      357,      357,      358)
[6.374s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      358 us) (n =     1) (lvls, us =      357,      357,      357,      357,      358)
[6.374s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      335 us) (n =     1) (lvls, us =      334,      334,      334,      334,      335)
[6.374s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      398 us) (n =     1) (lvls, us =      396,      396,      396,      396,      398)
[6.374s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      398 us) (n =     1) (lvls, us =      396,      396,      396,      396,      398)
[6.374s][info][gc,stats    ] Concurrent Weak Roots          =    0.005 s (a =     4551 us) (n =     1) (lvls, us =     4551,     4551,     4551,     4551,     4551)
[6.374s][info][gc,stats    ]   Roots                        =    0.003 s (a =     3441 us) (n =     1) (lvls, us =     3438,     3438,     3438,     3438,     3441)
[6.374s][info][gc,stats    ]     CWR: <total>               =    0.006 s (a =     5976 us) (n =     1) (lvls, us =     5957,     5957,     5957,     5957,     5976)
[6.374s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.004 s (a =     4160 us) (n =     1) (lvls, us =     4141,     4141,     4141,     4141,     4160)
[6.374s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1802 us) (n =     1) (lvls, us =     1797,     1797,     1797,     1797,     1802)
[6.374s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       14 us) (n =     1) (lvls, us =       13,       13,       13,       13,       14)
[6.374s][info][gc,stats    ]   Rendezvous                   =    0.001 s (a =     1069 us) (n =     1) (lvls, us =     1055,     1055,     1055,     1055,     1069)
[6.374s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      121 us) (n =     1) (lvls, us =      121,      121,      121,      121,      121)
[6.374s][info][gc,stats    ] Concurrent Class Unloading     =    0.006 s (a =     5729 us) (n =     1) (lvls, us =     5723,     5723,     5723,     5723,     5729)
[6.375s][info][gc,stats    ]   Unlink Stale                 =    0.003 s (a =     2673 us) (n =     1) (lvls, us =     2656,     2656,     2656,     2656,     2673)
[6.375s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       35 us) (n =     1) (lvls, us =       35,       35,       35,       35,       35)
[6.375s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.375s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2636 us) (n =     1) (lvls, us =     2617,     2617,     2617,     2617,     2636)
[6.375s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[6.375s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     2999 us) (n =     1) (lvls, us =     2988,     2988,     2988,     2988,     2999)
[6.375s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2987 us) (n =     1) (lvls, us =     2969,     2969,     2969,     2969,     2987)
[6.375s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       11 us) (n =     1) (lvls, us =       11,       11,       11,       11,       11)
[6.375s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.375s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1136 us) (n =     1) (lvls, us =     1133,     1133,     1133,     1133,     1136)
[6.375s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1082 us) (n =     1) (lvls, us =     1074,     1074,     1074,     1074,     1082)
[6.375s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[6.375s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1066 us) (n =     1) (lvls, us =     1055,     1055,     1055,     1055,     1066)
[6.375s][info][gc,stats    ] Concurrent Evacuation          =    0.008 s (a =     7802 us) (n =     1) (lvls, us =     7793,     7793,     7793,     7793,     7802)
[6.375s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =       92 us) (n =     1) (lvls, us =       92,       92,       92,       92,       92)
[6.375s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       37 us) (n =     1) (lvls, us =       37,       37,       37,       37,       37)
[6.375s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.375s][info][gc,stats    ] Concurrent Update Refs         =    0.021 s (a =    20529 us) (n =     1) (lvls, us =    20508,    20508,    20508,    20508,    20529)
[6.375s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      250 us) (n =     1) (lvls, us =      250,      250,      250,      250,      250)
[6.375s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      219 us) (n =     1) (lvls, us =      219,      219,      219,      219,      219)
[6.375s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =       90 us) (n =     1) (lvls, us =       90,       90,       90,       90,       90)
[6.375s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       32 us) (n =     1) (lvls, us =       32,       32,       32,       32,       32)
[6.375s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        3 us) (n =     1) (lvls, us =        3,        3,        3,        3,        3)
[6.375s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[6.375s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       80 us) (n =     1) (lvls, us =       80,       80,       80,       80,       80)
[6.376s][info][gc,stats    ] 
[6.376s][info][gc,stats    ] 
[6.376s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.376s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.376s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.376s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.376s][info][gc,stats    ] 
[6.376s][info][gc,stats    ]     1 successful concurrent GCs
[6.376s][info][gc,stats    ]       0 invoked explicitly
[6.376s][info][gc,stats    ]       0 invoked implicitly
[6.376s][info][gc,stats    ] 
[6.376s][info][gc,stats    ]     0 Degenerated GCs
[6.376s][info][gc,stats    ]       0 caused by allocation failure
[6.376s][info][gc,stats    ]       0 upgraded to Full GC
[6.376s][info][gc,stats    ] 
[6.376s][info][gc,stats    ]     0 Full GCs
[6.376s][info][gc,stats    ]       0 invoked explicitly
[6.376s][info][gc,stats    ]       0 invoked implicitly
[6.376s][info][gc,stats    ]       0 caused by allocation failure
[6.376s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.376s][info][gc,stats    ] 
[6.376s][info][gc,stats    ] 
