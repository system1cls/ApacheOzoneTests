[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.005s][info][gc] Using Shenandoah
[0.005s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.005s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.005s][info][gc,init] CPUs: 4 total, 4 available
[0.005s][info][gc,init] Memory: 7937M
[0.005s][info][gc,init] Large Page Support: Disabled
[0.005s][info][gc,init] NUMA Support: Disabled
[0.005s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.005s][info][gc,init] Heap Min Capacity: 6656K
[0.005s][info][gc,init] Heap Initial Capacity: 127488K
[0.005s][info][gc,init] Heap Max Capacity: 2032128K
[0.005s][info][gc,init] Pre-touch: Disabled
[0.006s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.006s][info][gc,init] Heuristics: Adaptive
[0.006s][info][gc,init] Heap Region Count: 3969
[0.006s][info][gc,init] Heap Region Size: 512K
[0.006s][info][gc,init] TLAB Size Max: 512K
[0.006s][info][gc,init] Humongous Object Threshold: 512K
[0.006s][info][gc,init] Parallel Workers: 8
[0.006s][info][gc,init] Concurrent Workers: 2
[0.024s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f3237000000-0x00007f3237c97000-0x00007f3237c97000), size 13201408, SharedBaseAddress: 0x00007f3237000000, ArchiveRelocationMode: 1.
[0.024s][info][gc,metaspace] Compressed class space mapped at: 0x00007f3238000000-0x00007f3278000000, reserved size: 1073741824
[0.024s][info][gc,metaspace] Narrow klass base: 0x00007f3237000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.992s][info][gc          ] Trigger: Metadata GC Threshold
[1.992s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.992s][info][gc,start    ] GC(0) Concurrent reset
[1.992s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.992s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.993s][info][gc          ] GC(0) Concurrent reset 0.604ms
[1.993s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.993s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.993s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.993s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.521ms
[1.993s][info][gc,start    ] GC(0) Concurrent marking roots
[1.993s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.996s][info][gc          ] GC(0) Concurrent marking roots 2.396ms
[1.996s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.996s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[2.046s][info][gc          ] GC(0) Concurrent marking (unload classes) 50.605ms
[2.047s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[2.047s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[2.053s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1845M, Max CSet: 84672K, Min Garbage: 0B
[2.053s][info][gc,ergo     ] GC(0) Collectable Garbage: 72549K (98%), Immediate: 4847K (6%), CSet: 67702K (92%)
[2.053s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 76288K, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.053s][info][gc          ] GC(0) Pause Final Mark (unload classes) 6.337ms
[2.053s][info][gc,start    ] GC(0) Concurrent thread roots
[2.053s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[2.053s][info][gc          ] GC(0) Concurrent thread roots 0.270ms
[2.053s][info][gc,start    ] GC(0) Concurrent weak references
[2.053s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[2.053s][info][gc,ref      ] GC(0) Encountered references: Soft: 3956, Weak: 2098, Final: 4, Phantom: 820
[2.053s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 590, Final: 0, Phantom: 478
[2.054s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 497, Final: 0, Phantom: 230
[2.054s][info][gc          ] GC(0) Concurrent weak references 0.382ms
[2.054s][info][gc,start    ] GC(0) Concurrent weak roots
[2.054s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[2.056s][info][gc          ] GC(0) Concurrent weak roots 1.936ms
[2.056s][info][gc,start    ] GC(0) Concurrent cleanup
[2.056s][info][gc          ] GC(0) Concurrent cleanup 142M->137M(145M) 0.128ms
[2.056s][info][gc,ergo     ] GC(0) Free: 1745M, Max: 512K regular, 1740M humongous, Frag: 1% external, 0% internal; Reserve: 101037K, Max: 512K
[2.056s][info][gc,start    ] GC(0) Concurrent class unloading
[2.056s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[2.068s][info][gc          ] GC(0) Concurrent class unloading 12.287ms
[2.068s][info][gc,start    ] GC(0) Concurrent strong roots
[2.068s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[2.070s][info][gc          ] GC(0) Concurrent strong roots 1.607ms
[2.070s][info][gc,start    ] GC(0) Concurrent evacuation
[2.070s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[2.076s][info][gc          ] GC(0) Concurrent evacuation 6.276ms
[2.076s][info][gc,start    ] GC(0) Pause Init Update Refs
[2.076s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 146M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.076s][info][gc          ] GC(0) Pause Init Update Refs 0.047ms
[2.076s][info][gc,start    ] GC(0) Concurrent update references
[2.077s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[2.093s][info][gc          ] GC(0) Concurrent update references 16.934ms
[2.094s][info][gc,start    ] GC(0) Concurrent update thread roots
[2.094s][info][gc          ] GC(0) Concurrent update thread roots 0.379ms
[2.094s][info][gc,start    ] GC(0) Pause Final Update Refs
[2.094s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[2.094s][info][gc          ] GC(0) Pause Final Update Refs 0.103ms
[2.094s][info][gc,start    ] GC(0) Concurrent cleanup
[2.094s][info][gc          ] GC(0) Concurrent cleanup 148M->73M(154M) 0.112ms
[2.094s][info][gc,ergo     ] Free: 1809M, Max: 512K regular, 1731M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[2.094s][info][gc,stats    ] 
[2.094s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[2.094s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[2.095s][info][gc,stats    ] 
[2.095s][info][gc,stats    ] Concurrent Reset                    638 us
[2.095s][info][gc,stats    ] Pause Init Mark (G)                 721 us
[2.095s][info][gc,stats    ] Pause Init Mark (N)                 539 us
[2.095s][info][gc,stats    ]   Update Region States               24 us
[2.095s][info][gc,stats    ] Concurrent Mark Roots              2414 us, parallelism: 1.57x
[2.095s][info][gc,stats    ]   CMR: <total>                     3779 us
[2.095s][info][gc,stats    ]   CMR: Thread Roots                1000 us, workers (us): 999,   0, ---, ---, ---, ---, ---, ---, 
[2.095s][info][gc,stats    ]   CMR: VM Strong Roots              842 us, workers (us): 513, 330, ---, ---, ---, ---, ---, ---, 
[2.095s][info][gc,stats    ]   CMR: CLDG Roots                  1937 us, workers (us): ---, 1937, ---, ---, ---, ---, ---, ---, 
[2.095s][info][gc,stats    ] Concurrent Marking                50679 us
[2.095s][info][gc,stats    ] Pause Final Mark (G)               6479 us
[2.095s][info][gc,stats    ] Pause Final Mark (N)               6346 us
[2.095s][info][gc,stats    ]   Finish Mark                      6128 us
[2.095s][info][gc,stats    ]   Update Region States               38 us
[2.095s][info][gc,stats    ]   Choose Collection Set              88 us
[2.095s][info][gc,stats    ]   Rebuild Free Set                   20 us
[2.095s][info][gc,stats    ] Concurrent Thread Roots             307 us, parallelism: 1.01x
[2.095s][info][gc,stats    ]   CTR: <total>                      310 us
[2.095s][info][gc,stats    ]   CTR: Thread Roots                 310 us, workers (us): 188, 121, ---, ---, ---, ---, ---, ---, 
[2.095s][info][gc,stats    ] Concurrent Weak References          558 us, parallelism: 0.44x
[2.095s][info][gc,stats    ]   CWRF: <total>                     244 us
[2.095s][info][gc,stats    ]   CWRF: Weak References             244 us, workers (us): 145,  99, ---, ---, ---, ---, ---, ---, 
[2.095s][info][gc,stats    ] Concurrent Weak Roots              1959 us
[2.095s][info][gc,stats    ]   Roots                            1731 us, parallelism: 1.95x
[2.095s][info][gc,stats    ]     CWR: <total>                   3369 us
[2.095s][info][gc,stats    ]     CWR: Code Cache Roots          1543 us, workers (us): 769, 774, ---, ---, ---, ---, ---, ---, 
[2.095s][info][gc,stats    ]     CWR: VM Weak Roots             1808 us, workers (us): 900, 908, ---, ---, ---, ---, ---, ---, 
[2.095s][info][gc,stats    ]     CWR: CLDG Roots                  19 us, workers (us):  19, ---, ---, ---, ---, ---, ---, ---, 
[2.095s][info][gc,stats    ]   Rendezvous                        156 us
[2.095s][info][gc,stats    ] Concurrent Cleanup                  207 us
[2.095s][info][gc,stats    ] Concurrent Class Unloading        12325 us
[2.095s][info][gc,stats    ]   Unlink Stale                     2835 us
[2.095s][info][gc,stats    ]     System Dictionary               183 us
[2.096s][info][gc,stats    ]     Weak Class Links                  0 us
[2.096s][info][gc,stats    ]     Code Roots                     2650 us
[2.096s][info][gc,stats    ]   Rendezvous                        133 us
[2.096s][info][gc,stats    ]   Purge Unlinked                   9207 us
[2.096s][info][gc,stats    ]     Code Roots                     9177 us
[2.096s][info][gc,stats    ]     CLDG                             30 us
[2.096s][info][gc,stats    ]     Exception Caches                  0 us
[2.096s][info][gc,stats    ] Concurrent Strong Roots            1657 us, parallelism: 0.93x
[2.096s][info][gc,stats    ]   CSR: <total>                     1533 us
[2.096s][info][gc,stats    ]   CSR: VM Strong Roots               30 us, workers (us):  29,   1, ---, ---, ---, ---, ---, ---, 
[2.096s][info][gc,stats    ]   CSR: CLDG Roots                  1503 us, workers (us): ---, 1503, ---, ---, ---, ---, ---, ---, 
[2.096s][info][gc,stats    ] Concurrent Evacuation              6323 us
[2.096s][info][gc,stats    ] Pause Init Update Refs (G)          176 us
[2.096s][info][gc,stats    ] Pause Init Update Refs (N)           56 us
[2.096s][info][gc,stats    ]   Manage GCLABs                       5 us
[2.096s][info][gc,stats    ] Concurrent Update Refs            17007 us
[2.096s][info][gc,stats    ] Concurrent Update Thread Roots      395 us
[2.096s][info][gc,stats    ] Pause Final Update Refs (G)         227 us
[2.096s][info][gc,stats    ] Pause Final Update Refs (N)         115 us
[2.096s][info][gc,stats    ]   Update Region States               28 us
[2.096s][info][gc,stats    ]   Trash Collection Set                4 us
[2.096s][info][gc,stats    ]   Rebuild Free Set                   29 us
[2.096s][info][gc,stats    ] Concurrent Cleanup                  153 us
[2.096s][info][gc,stats    ] 
[2.096s][info][gc,stats    ] Allocation pacing accrued:
[2.096s][info][gc,stats    ]       0 of  2091 ms (  0.0%): <total>
[2.096s][info][gc,stats    ]       0 of  2091 ms (  0.0%): <average total>
[2.096s][info][gc,stats    ] 
[2.096s][info][gc,metaspace] Metaspace: 21249K(21632K)->22476K(22848K) NonClass: 18899K(19072K)->19962K(20160K) Class: 2350K(2560K)->2514K(2688K)
[2.096s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.382s][info][gc          ] Cancelling GC: Stopping VM
[6.382s][info][gc,heap,exit] Heap
[6.382s][info][gc,heap,exit] Shenandoah Heap
[6.382s][info][gc,heap,exit]  1984M max, 1984M soft max, 154M committed, 86458K used
[6.382s][info][gc,heap,exit]  3969 x 512K regions
[6.382s][info][gc,heap,exit] Status: cancelled
[6.382s][info][gc,heap,exit] Reserved region:
[6.382s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.382s][info][gc,heap,exit] Collection set:
[6.382s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.382s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.382s][info][gc,heap,exit] 
[6.382s][info][gc,heap,exit]  Metaspace       used 25099K, committed 25408K, reserved 1114112K
[6.382s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.382s][info][gc,stats    ] 
[6.382s][info][gc,stats    ] GC STATISTICS:
[6.382s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.382s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.382s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.382s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.382s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.382s][info][gc,stats    ] 
[6.383s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.383s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.383s][info][gc,stats    ] 
[6.383s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.383s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.383s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.383s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.383s][info][gc,stats    ] 
[6.383s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.383s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.383s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.383s][info][gc,stats    ]   Raise max pacing delay with care.
[6.383s][info][gc,stats    ] 
[6.383s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      638 us) (n =     1) (lvls, us =      637,      637,      637,      637,      638)
[6.383s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      721 us) (n =     1) (lvls, us =      721,      721,      721,      721,      721)
[6.383s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      539 us) (n =     1) (lvls, us =      537,      537,      537,      537,      539)
[6.383s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       24 us) (n =     1) (lvls, us =       24,       24,       24,       24,       24)
[6.383s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     2414 us) (n =     1) (lvls, us =     2402,     2402,     2402,     2402,     2414)
[6.383s][info][gc,stats    ]   CMR: <total>                 =    0.004 s (a =     3779 us) (n =     1) (lvls, us =     3770,     3770,     3770,     3770,     3779)
[6.383s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1000 us) (n =     1) (lvls, us =      998,      998,      998,      998,     1000)
[6.383s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      842 us) (n =     1) (lvls, us =      842,      842,      842,      842,      842)
[6.383s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     1937 us) (n =     1) (lvls, us =     1934,     1934,     1934,     1934,     1937)
[6.383s][info][gc,stats    ] Concurrent Marking             =    0.051 s (a =    50679 us) (n =     1) (lvls, us =    50586,    50586,    50586,    50586,    50679)
[6.383s][info][gc,stats    ] Pause Final Mark (G)           =    0.006 s (a =     6479 us) (n =     1) (lvls, us =     6465,     6465,     6465,     6465,     6479)
[6.383s][info][gc,stats    ] Pause Final Mark (N)           =    0.006 s (a =     6346 us) (n =     1) (lvls, us =     6328,     6328,     6328,     6328,     6346)
[6.383s][info][gc,stats    ]   Finish Mark                  =    0.006 s (a =     6128 us) (n =     1) (lvls, us =     6113,     6113,     6113,     6113,     6128)
[6.383s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       38 us) (n =     1) (lvls, us =       38,       38,       38,       38,       38)
[6.383s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       88 us) (n =     1) (lvls, us =       88,       88,       88,       88,       88)
[6.383s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[6.383s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      307 us) (n =     1) (lvls, us =      307,      307,      307,      307,      307)
[6.383s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      310 us) (n =     1) (lvls, us =      309,      309,      309,      309,      310)
[6.383s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      310 us) (n =     1) (lvls, us =      309,      309,      309,      309,      310)
[6.383s][info][gc,stats    ] Concurrent Weak References     =    0.001 s (a =      558 us) (n =     1) (lvls, us =      557,      557,      557,      557,      558)
[6.383s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      244 us) (n =     1) (lvls, us =      244,      244,      244,      244,      244)
[6.383s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      244 us) (n =     1) (lvls, us =      244,      244,      244,      244,      244)
[6.383s][info][gc,stats    ] Concurrent Weak Roots          =    0.002 s (a =     1959 us) (n =     1) (lvls, us =     1953,     1953,     1953,     1953,     1959)
[6.383s][info][gc,stats    ]   Roots                        =    0.002 s (a =     1731 us) (n =     1) (lvls, us =     1719,     1719,     1719,     1719,     1731)
[6.383s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     3369 us) (n =     1) (lvls, us =     3359,     3359,     3359,     3359,     3369)
[6.383s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.002 s (a =     1543 us) (n =     1) (lvls, us =     1523,     1523,     1523,     1523,     1543)
[6.383s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1808 us) (n =     1) (lvls, us =     1797,     1797,     1797,     1797,     1808)
[6.383s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[6.383s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      156 us) (n =     1) (lvls, us =      154,      154,      154,      154,      156)
[6.383s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      207 us) (n =     1) (lvls, us =      205,      205,      205,      205,      207)
[6.383s][info][gc,stats    ] Concurrent Class Unloading     =    0.012 s (a =    12325 us) (n =     1) (lvls, us =    12305,    12305,    12305,    12305,    12325)
[6.383s][info][gc,stats    ]   Unlink Stale                 =    0.003 s (a =     2835 us) (n =     1) (lvls, us =     2832,     2832,     2832,     2832,     2835)
[6.383s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =      183 us) (n =     1) (lvls, us =      182,      182,      182,      182,      183)
[6.383s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.383s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2650 us) (n =     1) (lvls, us =     2637,     2637,     2637,     2637,     2650)
[6.383s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      133 us) (n =     1) (lvls, us =      133,      133,      133,      133,      133)
[6.383s][info][gc,stats    ]   Purge Unlinked               =    0.009 s (a =     9207 us) (n =     1) (lvls, us =     9199,     9199,     9199,     9199,     9207)
[6.383s][info][gc,stats    ]     Code Roots                 =    0.009 s (a =     9177 us) (n =     1) (lvls, us =     9160,     9160,     9160,     9160,     9177)
[6.383s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       30 us) (n =     1) (lvls, us =       30,       30,       30,       30,       30)
[6.383s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.383s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     1657 us) (n =     1) (lvls, us =     1641,     1641,     1641,     1641,     1657)
[6.383s][info][gc,stats    ]   CSR: <total>                 =    0.002 s (a =     1533 us) (n =     1) (lvls, us =     1523,     1523,     1523,     1523,     1533)
[6.383s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       30 us) (n =     1) (lvls, us =       29,       29,       29,       29,       30)
[6.383s][info][gc,stats    ]   CSR: CLDG Roots              =    0.002 s (a =     1503 us) (n =     1) (lvls, us =     1484,     1484,     1484,     1484,     1503)
[6.383s][info][gc,stats    ] Concurrent Evacuation          =    0.006 s (a =     6323 us) (n =     1) (lvls, us =     6309,     6309,     6309,     6309,     6323)
[6.383s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      176 us) (n =     1) (lvls, us =      176,      176,      176,      176,      176)
[6.383s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       56 us) (n =     1) (lvls, us =       56,       56,       56,       56,       56)
[6.383s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.383s][info][gc,stats    ] Concurrent Update Refs         =    0.017 s (a =    17007 us) (n =     1) (lvls, us =    16992,    16992,    16992,    16992,    17007)
[6.383s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      395 us) (n =     1) (lvls, us =      395,      395,      395,      395,      395)
[6.383s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      227 us) (n =     1) (lvls, us =      227,      227,      227,      227,      227)
[6.383s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      115 us) (n =     1) (lvls, us =      113,      113,      113,      113,      115)
[6.383s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       28 us) (n =     1) (lvls, us =       28,       28,       28,       28,       28)
[6.383s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.383s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       29 us) (n =     1) (lvls, us =       29,       29,       29,       29,       29)
[6.383s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      153 us) (n =     1) (lvls, us =      152,      152,      152,      152,      153)
[6.383s][info][gc,stats    ] 
[6.383s][info][gc,stats    ] 
[6.383s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.383s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.383s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.383s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.383s][info][gc,stats    ] 
[6.384s][info][gc,stats    ]     1 successful concurrent GCs
[6.384s][info][gc,stats    ]       0 invoked explicitly
[6.384s][info][gc,stats    ]       0 invoked implicitly
[6.384s][info][gc,stats    ] 
[6.384s][info][gc,stats    ]     0 Degenerated GCs
[6.384s][info][gc,stats    ]       0 caused by allocation failure
[6.384s][info][gc,stats    ]       0 upgraded to Full GC
[6.384s][info][gc,stats    ] 
[6.384s][info][gc,stats    ]     0 Full GCs
[6.384s][info][gc,stats    ]       0 invoked explicitly
[6.384s][info][gc,stats    ]       0 invoked implicitly
[6.384s][info][gc,stats    ]       0 caused by allocation failure
[6.384s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.384s][info][gc,stats    ] 
[6.384s][info][gc,stats    ] 
