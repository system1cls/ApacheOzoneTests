[0.007s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.007s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.008s][info][gc] Using Shenandoah
[0.009s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.009s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.009s][info][gc,init] CPUs: 4 total, 4 available
[0.009s][info][gc,init] Memory: 7937M
[0.009s][info][gc,init] Large Page Support: Disabled
[0.009s][info][gc,init] NUMA Support: Disabled
[0.009s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.009s][info][gc,init] Heap Min Capacity: 6656K
[0.009s][info][gc,init] Heap Initial Capacity: 127488K
[0.009s][info][gc,init] Heap Max Capacity: 2032128K
[0.009s][info][gc,init] Pre-touch: Disabled
[0.009s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.009s][info][gc,init] Heuristics: Adaptive
[0.009s][info][gc,init] Heap Region Count: 3969
[0.009s][info][gc,init] Heap Region Size: 512K
[0.009s][info][gc,init] TLAB Size Max: 512K
[0.009s][info][gc,init] Humongous Object Threshold: 512K
[0.009s][info][gc,init] Parallel Workers: 8
[0.009s][info][gc,init] Concurrent Workers: 2
[0.019s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f9b63000000-0x00007f9b63c97000-0x00007f9b63c97000), size 13201408, SharedBaseAddress: 0x00007f9b63000000, ArchiveRelocationMode: 1.
[0.019s][info][gc,metaspace] Compressed class space mapped at: 0x00007f9b64000000-0x00007f9ba4000000, reserved size: 1073741824
[0.019s][info][gc,metaspace] Narrow klass base: 0x00007f9b63000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.329s][info][gc          ] Trigger: Metadata GC Threshold
[1.329s][info][gc,ergo     ] Free: 1790M, Max: 512K regular, 1790M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.330s][info][gc,start    ] GC(0) Concurrent reset
[1.330s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.330s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.330s][info][gc          ] GC(0) Concurrent reset 0.577ms
[1.330s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.331s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.331s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1790M, Non-Taxable: 179M, Alloc Tax Rate: 0.1x
[1.331s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.920ms
[1.331s][info][gc,start    ] GC(0) Concurrent marking roots
[1.331s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.335s][info][gc          ] GC(0) Concurrent marking roots 3.780ms
[1.335s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.335s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.350s][info][gc          ] GC(0) Concurrent marking (unload classes) 14.757ms
[1.350s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.350s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.350s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 241M, Actual Free: 1894M, Max CSet: 84672K, Min Garbage: 0B
[1.350s][info][gc,ergo     ] GC(0) Collectable Garbage: 81582K (99%), Immediate: 5855K (7%), CSet: 75727K (91%)
[1.350s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 83456K, Free: 1795M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.350s][info][gc          ] GC(0) Pause Final Mark (unload classes) 0.359ms
[1.350s][info][gc,start    ] GC(0) Concurrent thread roots
[1.350s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.351s][info][gc          ] GC(0) Concurrent thread roots 0.337ms
[1.351s][info][gc,start    ] GC(0) Concurrent weak references
[1.351s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.351s][info][gc,ref      ] GC(0) Encountered references: Soft: 3955, Weak: 2130, Final: 20, Phantom: 793
[1.351s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 762, Final: 0, Phantom: 526
[1.351s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 480, Final: 0, Phantom: 315
[1.351s][info][gc          ] GC(0) Concurrent weak references 0.390ms
[1.351s][info][gc,start    ] GC(0) Concurrent weak roots
[1.351s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.362s][info][gc          ] GC(0) Concurrent weak roots 11.007ms
[1.362s][info][gc,start    ] GC(0) Concurrent cleanup
[1.362s][info][gc          ] GC(0) Concurrent cleanup 97M->91M(126M) 0.143ms
[1.362s][info][gc,ergo     ] GC(0) Free: 1794M, Max: 512K regular, 1788M humongous, Frag: 1% external, 0% internal; Reserve: 100606K, Max: 512K
[1.362s][info][gc,start    ] GC(0) Concurrent class unloading
[1.362s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.374s][info][gc          ] GC(0) Concurrent class unloading 11.528ms
[1.374s][info][gc,start    ] GC(0) Concurrent strong roots
[1.374s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.376s][info][gc          ] GC(0) Concurrent strong roots 1.902ms
[1.376s][info][gc,start    ] GC(0) Concurrent evacuation
[1.376s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.383s][info][gc          ] GC(0) Concurrent evacuation 7.283ms
[1.383s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.383s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 101425K, Free: 1794M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.383s][info][gc          ] GC(0) Pause Init Update Refs 0.053ms
[1.383s][info][gc,start    ] GC(0) Concurrent update references
[1.383s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.394s][info][gc          ] GC(0) Concurrent update references 10.589ms
[1.394s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.394s][info][gc          ] GC(0) Concurrent update thread roots 0.442ms
[1.395s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.395s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.395s][info][gc          ] GC(0) Pause Final Update Refs 0.099ms
[1.395s][info][gc,start    ] GC(0) Concurrent cleanup
[1.395s][info][gc          ] GC(0) Concurrent cleanup 99M->18M(133M) 0.122ms
[1.395s][info][gc,ergo     ] Free: 1866M, Max: 512K regular, 1780M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.395s][info][gc,stats    ] 
[1.395s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.395s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.395s][info][gc,stats    ] 
[1.395s][info][gc,stats    ] Concurrent Reset                    605 us
[1.395s][info][gc,stats    ] Pause Init Mark (G)                1229 us
[1.395s][info][gc,stats    ] Pause Init Mark (N)                 946 us
[1.395s][info][gc,stats    ]   Update Region States               42 us
[1.395s][info][gc,stats    ] Concurrent Mark Roots              3807 us, parallelism: 1.67x
[1.395s][info][gc,stats    ]   CMR: <total>                     6367 us
[1.395s][info][gc,stats    ]   CMR: Thread Roots                3361 us, workers (us): 612, 2749, ---, ---, ---, ---, ---, ---, 
[1.395s][info][gc,stats    ]   CMR: VM Strong Roots              724 us, workers (us): 723,   0, ---, ---, ---, ---, ---, ---, 
[1.395s][info][gc,stats    ]   CMR: CLDG Roots                  2283 us, workers (us): 2283, ---, ---, ---, ---, ---, ---, ---, 
[1.395s][info][gc,stats    ] Concurrent Marking                14788 us
[1.395s][info][gc,stats    ] Pause Final Mark (G)                495 us
[1.395s][info][gc,stats    ] Pause Final Mark (N)                368 us
[1.395s][info][gc,stats    ]   Finish Mark                       171 us
[1.395s][info][gc,stats    ]   Update Region States               40 us
[1.395s][info][gc,stats    ]   Choose Collection Set              78 us
[1.395s][info][gc,stats    ]   Rebuild Free Set                   16 us
[1.395s][info][gc,stats    ] Concurrent Thread Roots             347 us, parallelism: 1.22x
[1.395s][info][gc,stats    ]   CTR: <total>                      424 us
[1.395s][info][gc,stats    ]   CTR: Thread Roots                 424 us, workers (us): 136, 288, ---, ---, ---, ---, ---, ---, 
[1.395s][info][gc,stats    ] Concurrent Weak References          399 us, parallelism: 1.29x
[1.395s][info][gc,stats    ]   CWRF: <total>                     512 us
[1.395s][info][gc,stats    ]   CWRF: Weak References             512 us, workers (us): 303, 209, ---, ---, ---, ---, ---, ---, 
[1.395s][info][gc,stats    ] Concurrent Weak Roots             11042 us
[1.395s][info][gc,stats    ]   Roots                           10847 us, parallelism: 1.96x
[1.395s][info][gc,stats    ]     CWR: <total>                  21226 us
[1.395s][info][gc,stats    ]     CWR: Code Cache Roots          2167 us, workers (us): 1076, 1091, ---, ---, ---, ---, ---, ---, 
[1.395s][info][gc,stats    ]     CWR: VM Weak Roots            19043 us, workers (us): 9653, 9390, ---, ---, ---, ---, ---, ---, 
[1.395s][info][gc,stats    ]     CWR: CLDG Roots                  16 us, workers (us): ---,  16, ---, ---, ---, ---, ---, ---, 
[1.395s][info][gc,stats    ]   Rendezvous                        136 us
[1.395s][info][gc,stats    ] Concurrent Cleanup                  158 us
[1.395s][info][gc,stats    ] Concurrent Class Unloading        11558 us
[1.395s][info][gc,stats    ]   Unlink Stale                     3923 us
[1.395s][info][gc,stats    ]     System Dictionary                46 us
[1.395s][info][gc,stats    ]     Weak Class Links                  0 us
[1.395s][info][gc,stats    ]     Code Roots                     3874 us
[1.395s][info][gc,stats    ]   Rendezvous                        128 us
[1.395s][info][gc,stats    ]   Purge Unlinked                   7442 us
[1.395s][info][gc,stats    ]     Code Roots                     7422 us
[1.395s][info][gc,stats    ]     CLDG                             18 us
[1.395s][info][gc,stats    ]     Exception Caches                  0 us
[1.395s][info][gc,stats    ] Concurrent Strong Roots            1936 us, parallelism: 0.91x
[1.395s][info][gc,stats    ]   CSR: <total>                     1761 us
[1.395s][info][gc,stats    ]   CSR: VM Strong Roots               38 us, workers (us):  25,  13, ---, ---, ---, ---, ---, ---, 
[1.395s][info][gc,stats    ]   CSR: CLDG Roots                  1723 us, workers (us): ---, 1723, ---, ---, ---, ---, ---, ---, 
[1.395s][info][gc,stats    ] Concurrent Evacuation              7321 us
[1.395s][info][gc,stats    ] Pause Init Update Refs (G)          115 us
[1.395s][info][gc,stats    ] Pause Init Update Refs (N)           65 us
[1.395s][info][gc,stats    ]   Manage GCLABs                       7 us
[1.395s][info][gc,stats    ] Concurrent Update Refs            10614 us
[1.395s][info][gc,stats    ] Concurrent Update Thread Roots      457 us
[1.395s][info][gc,stats    ] Pause Final Update Refs (G)         212 us
[1.395s][info][gc,stats    ] Pause Final Update Refs (N)         109 us
[1.395s][info][gc,stats    ]   Update Region States               37 us
[1.396s][info][gc,stats    ]   Trash Collection Set                4 us
[1.396s][info][gc,stats    ]   Rebuild Free Set                   18 us
[1.396s][info][gc,stats    ] Concurrent Cleanup                  134 us
[1.396s][info][gc,stats    ] 
[1.396s][info][gc,stats    ] Allocation pacing accrued:
[1.396s][info][gc,stats    ]       0 of  1387 ms (  0.0%): <total>
[1.396s][info][gc,stats    ]       0 of  1387 ms (  0.0%): <average total>
[1.396s][info][gc,stats    ] 
[1.396s][info][gc,metaspace] Metaspace: 21236K(21568K)->21709K(22080K) NonClass: 18899K(19072K)->19295K(19520K) Class: 2336K(2496K)->2413K(2560K)
[1.396s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[7.679s][info][gc          ] Cancelling GC: Stopping VM
[7.680s][info][gc,heap,exit] Heap
[7.680s][info][gc,heap,exit] Shenandoah Heap
[7.680s][info][gc,heap,exit]  1984M max, 1984M soft max, 133M committed, 37442K used
[7.680s][info][gc,heap,exit]  3969 x 512K regions
[7.680s][info][gc,heap,exit] Status: cancelled
[7.680s][info][gc,heap,exit] Reserved region:
[7.680s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[7.680s][info][gc,heap,exit] Collection set:
[7.680s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[7.680s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[7.680s][info][gc,heap,exit] 
[7.680s][info][gc,heap,exit]  Metaspace       used 25429K, committed 25792K, reserved 1114112K
[7.680s][info][gc,heap,exit]   class space    used 2927K, committed 3072K, reserved 1048576K
[7.680s][info][gc,stats    ] 
[7.680s][info][gc,stats    ] GC STATISTICS:
[7.680s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[7.680s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[7.680s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[7.680s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[7.680s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[7.680s][info][gc,stats    ] 
[7.680s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[7.680s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[7.680s][info][gc,stats    ] 
[7.680s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[7.680s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[7.680s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[7.680s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[7.680s][info][gc,stats    ] 
[7.680s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[7.680s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[7.680s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[7.680s][info][gc,stats    ]   Raise max pacing delay with care.
[7.680s][info][gc,stats    ] 
[7.680s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      605 us) (n =     1) (lvls, us =      604,      604,      604,      604,      605)
[7.680s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =     1229 us) (n =     1) (lvls, us =     1211,     1211,     1211,     1211,     1229)
[7.680s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      946 us) (n =     1) (lvls, us =      945,      945,      945,      945,      946)
[7.680s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       42 us) (n =     1) (lvls, us =       42,       42,       42,       42,       42)
[7.680s][info][gc,stats    ] Concurrent Mark Roots          =    0.004 s (a =     3807 us) (n =     1) (lvls, us =     3789,     3789,     3789,     3789,     3807)
[7.680s][info][gc,stats    ]   CMR: <total>                 =    0.006 s (a =     6367 us) (n =     1) (lvls, us =     6367,     6367,     6367,     6367,     6367)
[7.680s][info][gc,stats    ]   CMR: Thread Roots            =    0.003 s (a =     3361 us) (n =     1) (lvls, us =     3359,     3359,     3359,     3359,     3361)
[7.680s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      724 us) (n =     1) (lvls, us =      723,      723,      723,      723,      724)
[7.680s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     2283 us) (n =     1) (lvls, us =     2266,     2266,     2266,     2266,     2283)
[7.680s][info][gc,stats    ] Concurrent Marking             =    0.015 s (a =    14788 us) (n =     1) (lvls, us =    14648,    14648,    14648,    14648,    14788)
[7.680s][info][gc,stats    ] Pause Final Mark (G)           =    0.000 s (a =      495 us) (n =     1) (lvls, us =      494,      494,      494,      494,      495)
[7.680s][info][gc,stats    ] Pause Final Mark (N)           =    0.000 s (a =      368 us) (n =     1) (lvls, us =      367,      367,      367,      367,      368)
[7.680s][info][gc,stats    ]   Finish Mark                  =    0.000 s (a =      171 us) (n =     1) (lvls, us =      170,      170,      170,      170,      171)
[7.680s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       40 us) (n =     1) (lvls, us =       40,       40,       40,       40,       40)
[7.680s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       78 us) (n =     1) (lvls, us =       78,       78,       78,       78,       78)
[7.680s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[7.680s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      347 us) (n =     1) (lvls, us =      346,      346,      346,      346,      347)
[7.680s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      424 us) (n =     1) (lvls, us =      424,      424,      424,      424,      424)
[7.680s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      424 us) (n =     1) (lvls, us =      424,      424,      424,      424,      424)
[7.680s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      399 us) (n =     1) (lvls, us =      398,      398,      398,      398,      399)
[7.680s][info][gc,stats    ]   CWRF: <total>                =    0.001 s (a =      512 us) (n =     1) (lvls, us =      512,      512,      512,      512,      512)
[7.681s][info][gc,stats    ]   CWRF: Weak References        =    0.001 s (a =      512 us) (n =     1) (lvls, us =      512,      512,      512,      512,      512)
[7.681s][info][gc,stats    ] Concurrent Weak Roots          =    0.011 s (a =    11042 us) (n =     1) (lvls, us =    10938,    10938,    10938,    10938,    11042)
[7.681s][info][gc,stats    ]   Roots                        =    0.011 s (a =    10847 us) (n =     1) (lvls, us =    10742,    10742,    10742,    10742,    10847)
[7.681s][info][gc,stats    ]     CWR: <total>               =    0.021 s (a =    21226 us) (n =     1) (lvls, us =    21094,    21094,    21094,    21094,    21226)
[7.681s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.002 s (a =     2167 us) (n =     1) (lvls, us =     2148,     2148,     2148,     2148,     2167)
[7.681s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.019 s (a =    19043 us) (n =     1) (lvls, us =    18945,    18945,    18945,    18945,    19043)
[7.681s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[7.681s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      136 us) (n =     1) (lvls, us =      135,      135,      135,      135,      136)
[7.681s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      158 us) (n =     1) (lvls, us =      156,      156,      156,      156,      158)
[7.681s][info][gc,stats    ] Concurrent Class Unloading     =    0.012 s (a =    11558 us) (n =     1) (lvls, us =    11523,    11523,    11523,    11523,    11558)
[7.681s][info][gc,stats    ]   Unlink Stale                 =    0.004 s (a =     3923 us) (n =     1) (lvls, us =     3906,     3906,     3906,     3906,     3923)
[7.681s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       46 us) (n =     1) (lvls, us =       46,       46,       46,       46,       46)
[7.681s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.681s][info][gc,stats    ]     Code Roots                 =    0.004 s (a =     3874 us) (n =     1) (lvls, us =     3867,     3867,     3867,     3867,     3874)
[7.681s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      128 us) (n =     1) (lvls, us =      127,      127,      127,      127,      128)
[7.681s][info][gc,stats    ]   Purge Unlinked               =    0.007 s (a =     7442 us) (n =     1) (lvls, us =     7441,     7441,     7441,     7441,     7442)
[7.681s][info][gc,stats    ]     Code Roots                 =    0.007 s (a =     7422 us) (n =     1) (lvls, us =     7422,     7422,     7422,     7422,     7422)
[7.681s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[7.681s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.681s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     1936 us) (n =     1) (lvls, us =     1934,     1934,     1934,     1934,     1936)
[7.681s][info][gc,stats    ]   CSR: <total>                 =    0.002 s (a =     1761 us) (n =     1) (lvls, us =     1758,     1758,     1758,     1758,     1761)
[7.681s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       38 us) (n =     1) (lvls, us =       38,       38,       38,       38,       38)
[7.681s][info][gc,stats    ]   CSR: CLDG Roots              =    0.002 s (a =     1723 us) (n =     1) (lvls, us =     1719,     1719,     1719,     1719,     1723)
[7.681s][info][gc,stats    ] Concurrent Evacuation          =    0.007 s (a =     7321 us) (n =     1) (lvls, us =     7305,     7305,     7305,     7305,     7321)
[7.681s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      115 us) (n =     1) (lvls, us =      113,      113,      113,      113,      115)
[7.681s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       65 us) (n =     1) (lvls, us =       65,       65,       65,       65,       65)
[7.681s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        7 us) (n =     1) (lvls, us =        7,        7,        7,        7,        7)
[7.681s][info][gc,stats    ] Concurrent Update Refs         =    0.011 s (a =    10614 us) (n =     1) (lvls, us =    10547,    10547,    10547,    10547,    10614)
[7.681s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      457 us) (n =     1) (lvls, us =      457,      457,      457,      457,      457)
[7.681s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      212 us) (n =     1) (lvls, us =      211,      211,      211,      211,      212)
[7.681s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      109 us) (n =     1) (lvls, us =      107,      107,      107,      107,      109)
[7.681s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       37 us) (n =     1) (lvls, us =       37,       37,       37,       37,       37)
[7.681s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[7.681s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[7.681s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      134 us) (n =     1) (lvls, us =      133,      133,      133,      133,      134)
[7.681s][info][gc,stats    ] 
[7.681s][info][gc,stats    ] 
[7.681s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[7.681s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[7.681s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[7.681s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[7.681s][info][gc,stats    ] 
[7.681s][info][gc,stats    ]     1 successful concurrent GCs
[7.681s][info][gc,stats    ]       0 invoked explicitly
[7.681s][info][gc,stats    ]       0 invoked implicitly
[7.681s][info][gc,stats    ] 
[7.681s][info][gc,stats    ]     0 Degenerated GCs
[7.681s][info][gc,stats    ]       0 caused by allocation failure
[7.681s][info][gc,stats    ]       0 upgraded to Full GC
[7.681s][info][gc,stats    ] 
[7.681s][info][gc,stats    ]     0 Full GCs
[7.681s][info][gc,stats    ]       0 invoked explicitly
[7.681s][info][gc,stats    ]       0 invoked implicitly
[7.681s][info][gc,stats    ]       0 caused by allocation failure
[7.681s][info][gc,stats    ]       0 upgraded from Degenerated GC
[7.681s][info][gc,stats    ] 
[7.681s][info][gc,stats    ] 
