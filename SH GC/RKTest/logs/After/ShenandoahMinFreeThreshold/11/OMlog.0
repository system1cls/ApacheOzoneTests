[0.009s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.010s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.010s][info][gc] Using Shenandoah
[0.010s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.010s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.010s][info][gc,init] CPUs: 4 total, 4 available
[0.011s][info][gc,init] Memory: 7937M
[0.011s][info][gc,init] Large Page Support: Disabled
[0.011s][info][gc,init] NUMA Support: Disabled
[0.011s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.011s][info][gc,init] Heap Min Capacity: 6656K
[0.011s][info][gc,init] Heap Initial Capacity: 127488K
[0.011s][info][gc,init] Heap Max Capacity: 2032128K
[0.011s][info][gc,init] Pre-touch: Disabled
[0.011s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.011s][info][gc,init] Heuristics: Adaptive
[0.011s][info][gc,init] Heap Region Count: 3969
[0.011s][info][gc,init] Heap Region Size: 512K
[0.011s][info][gc,init] TLAB Size Max: 512K
[0.011s][info][gc,init] Humongous Object Threshold: 512K
[0.011s][info][gc,init] Parallel Workers: 8
[0.011s][info][gc,init] Concurrent Workers: 2
[0.018s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f44b3000000-0x00007f44b3c97000-0x00007f44b3c97000), size 13201408, SharedBaseAddress: 0x00007f44b3000000, ArchiveRelocationMode: 1.
[0.018s][info][gc,metaspace] Compressed class space mapped at: 0x00007f44b4000000-0x00007f44f4000000, reserved size: 1073741824
[0.018s][info][gc,metaspace] Narrow klass base: 0x00007f44b3000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.739s][info][gc          ] Trigger: Metadata GC Threshold
[1.739s][info][gc,ergo     ] Free: 1745M, Max: 512K regular, 1745M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.739s][info][gc,start    ] GC(0) Concurrent reset
[1.745s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.745s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.746s][info][gc          ] GC(0) Concurrent reset 6.707ms
[1.746s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.746s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.746s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.746s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.415ms
[1.746s][info][gc,start    ] GC(0) Concurrent marking roots
[1.746s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.749s][info][gc          ] GC(0) Concurrent marking roots 2.125ms
[1.749s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.749s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.794s][info][gc          ] GC(0) Concurrent marking (unload classes) 45.250ms
[1.794s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.794s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.794s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 300M, Actual Free: 1846M, Max CSet: 84672K, Min Garbage: 0B
[1.794s][info][gc,ergo     ] GC(0) Collectable Garbage: 74026K (98%), Immediate: 4335K (5%), CSet: 69691K (92%)
[1.794s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 77824K, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.794s][info][gc          ] GC(0) Pause Final Mark (unload classes) 0.307ms
[1.794s][info][gc,start    ] GC(0) Concurrent thread roots
[1.794s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.794s][info][gc          ] GC(0) Concurrent thread roots 0.171ms
[1.794s][info][gc,start    ] GC(0) Concurrent weak references
[1.794s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.795s][info][gc,ref      ] GC(0) Encountered references: Soft: 3960, Weak: 2102, Final: 4, Phantom: 821
[1.795s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1209, Final: 0, Phantom: 582
[1.795s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 502, Final: 0, Phantom: 231
[1.795s][info][gc          ] GC(0) Concurrent weak references 0.412ms
[1.795s][info][gc,start    ] GC(0) Concurrent weak roots
[1.795s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.798s][info][gc          ] GC(0) Concurrent weak roots 2.876ms
[1.799s][info][gc,start    ] GC(0) Concurrent cleanup
[1.799s][info][gc          ] GC(0) Concurrent cleanup 141M->137M(144M) 0.149ms
[1.799s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1741M humongous, Frag: 1% external, 0% internal; Reserve: 101113K, Max: 512K
[1.799s][info][gc,start    ] GC(0) Concurrent class unloading
[1.799s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.806s][info][gc          ] GC(0) Concurrent class unloading 6.446ms
[1.806s][info][gc,start    ] GC(0) Concurrent strong roots
[1.806s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.807s][info][gc          ] GC(0) Concurrent strong roots 1.537ms
[1.807s][info][gc,start    ] GC(0) Concurrent evacuation
[1.807s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.820s][info][gc          ] GC(0) Concurrent evacuation 12.584ms
[1.820s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.820s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 145M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.820s][info][gc          ] GC(0) Pause Init Update Refs 0.036ms
[1.820s][info][gc,start    ] GC(0) Concurrent update references
[1.820s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.852s][info][gc          ] GC(0) Concurrent update references 32.432ms
[1.852s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.853s][info][gc          ] GC(0) Concurrent update thread roots 0.751ms
[1.853s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.853s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.853s][info][gc          ] GC(0) Pause Final Update Refs 0.105ms
[1.853s][info][gc,start    ] GC(0) Concurrent cleanup
[1.854s][info][gc          ] GC(0) Concurrent cleanup 147M->71M(152M) 0.083ms
[1.854s][info][gc,ergo     ] Free: 1811M, Max: 512K regular, 1732M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.854s][info][gc,stats    ] 
[1.854s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.854s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.854s][info][gc,stats    ] 
[1.854s][info][gc,stats    ] Concurrent Reset                   6744 us
[1.854s][info][gc,stats    ] Pause Init Mark (G)                 767 us
[1.854s][info][gc,stats    ] Pause Init Mark (N)                 429 us
[1.854s][info][gc,stats    ]   Update Region States               20 us
[1.854s][info][gc,stats    ] Concurrent Mark Roots              2149 us, parallelism: 1.85x
[1.854s][info][gc,stats    ]   CMR: <total>                     3985 us
[1.854s][info][gc,stats    ]   CMR: Thread Roots                 839 us, workers (us):   0, 839, ---, ---, ---, ---, ---, ---, 
[1.854s][info][gc,stats    ]   CMR: VM Strong Roots             2133 us, workers (us): 2042,  91, ---, ---, ---, ---, ---, ---, 
[1.854s][info][gc,stats    ]   CMR: CLDG Roots                  1013 us, workers (us): ---, 1013, ---, ---, ---, ---, ---, ---, 
[1.854s][info][gc,stats    ] Concurrent Marking                45278 us
[1.854s][info][gc,stats    ] Pause Final Mark (G)                451 us
[1.854s][info][gc,stats    ] Pause Final Mark (N)                317 us
[1.854s][info][gc,stats    ]   Finish Mark                       108 us
[1.854s][info][gc,stats    ]   Update Region States               41 us
[1.854s][info][gc,stats    ]   Choose Collection Set              89 us
[1.854s][info][gc,stats    ]   Rebuild Free Set                   24 us
[1.854s][info][gc,stats    ] Concurrent Thread Roots             187 us, parallelism: 1.32x
[1.854s][info][gc,stats    ]   CTR: <total>                      247 us
[1.854s][info][gc,stats    ]   CTR: Thread Roots                 247 us, workers (us): 133, 114, ---, ---, ---, ---, ---, ---, 
[1.854s][info][gc,stats    ] Concurrent Weak References          684 us, parallelism: 0.67x
[1.854s][info][gc,stats    ]   CWRF: <total>                     459 us
[1.854s][info][gc,stats    ]   CWRF: Weak References             459 us, workers (us): 152, 307, ---, ---, ---, ---, ---, ---, 
[1.854s][info][gc,stats    ] Concurrent Weak Roots              3751 us
[1.854s][info][gc,stats    ]   Roots                            2741 us, parallelism: 0.98x
[1.854s][info][gc,stats    ]     CWR: <total>                   2686 us
[1.854s][info][gc,stats    ]     CWR: Code Cache Roots           713 us, workers (us): 713,   0, ---, ---, ---, ---, ---, ---, 
[1.854s][info][gc,stats    ]     CWR: VM Weak Roots             1958 us, workers (us): 1958,   1, ---, ---, ---, ---, ---, ---, 
[1.854s][info][gc,stats    ]     CWR: CLDG Roots                  14 us, workers (us):  14, ---, ---, ---, ---, ---, ---, ---, 
[1.854s][info][gc,stats    ]   Rendezvous                        106 us
[1.854s][info][gc,stats    ] Concurrent Cleanup                  167 us
[1.854s][info][gc,stats    ] Concurrent Class Unloading         6482 us
[1.854s][info][gc,stats    ]   Unlink Stale                     2924 us
[1.854s][info][gc,stats    ]     System Dictionary                58 us
[1.854s][info][gc,stats    ]     Weak Class Links                  0 us
[1.854s][info][gc,stats    ]     Code Roots                     2865 us
[1.854s][info][gc,stats    ]   Rendezvous                        114 us
[1.854s][info][gc,stats    ]   Purge Unlinked                   3387 us
[1.854s][info][gc,stats    ]     Code Roots                     3377 us
[1.854s][info][gc,stats    ]     CLDG                             10 us
[1.854s][info][gc,stats    ]     Exception Caches                  0 us
[1.854s][info][gc,stats    ] Concurrent Strong Roots            1562 us, parallelism: 0.96x
[1.854s][info][gc,stats    ]   CSR: <total>                     1498 us
[1.854s][info][gc,stats    ]   CSR: VM Strong Roots               34 us, workers (us):  28,   6, ---, ---, ---, ---, ---, ---, 
[1.854s][info][gc,stats    ]   CSR: CLDG Roots                  1464 us, workers (us): ---, 1464, ---, ---, ---, ---, ---, ---, 
[1.854s][info][gc,stats    ] Concurrent Evacuation             12615 us
[1.854s][info][gc,stats    ] Pause Init Update Refs (G)          148 us
[1.854s][info][gc,stats    ] Pause Init Update Refs (N)           45 us
[1.854s][info][gc,stats    ]   Manage GCLABs                       4 us
[1.854s][info][gc,stats    ] Concurrent Update Refs            32469 us
[1.854s][info][gc,stats    ] Concurrent Update Thread Roots      779 us
[1.854s][info][gc,stats    ] Pause Final Update Refs (G)         298 us
[1.854s][info][gc,stats    ] Pause Final Update Refs (N)         189 us
[1.854s][info][gc,stats    ]   Update Region States               39 us
[1.854s][info][gc,stats    ]   Trash Collection Set                4 us
[1.854s][info][gc,stats    ]   Rebuild Free Set                   31 us
[1.854s][info][gc,stats    ] Concurrent Cleanup                   97 us
[1.854s][info][gc,stats    ] 
[1.854s][info][gc,stats    ] Allocation pacing accrued:
[1.854s][info][gc,stats    ]       0 of  1844 ms (  0.0%): <total>
[1.854s][info][gc,stats    ]       0 of  1844 ms (  0.0%): <average total>
[1.854s][info][gc,stats    ] 
[1.854s][info][gc,metaspace] Metaspace: 21197K(21632K)->21952K(22336K) NonClass: 18845K(19072K)->19503K(19712K) Class: 2351K(2560K)->2448K(2624K)
[1.854s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.151s][info][gc          ] Cancelling GC: Stopping VM
[6.152s][info][gc,heap,exit] Heap
[6.152s][info][gc,heap,exit] Shenandoah Heap
[6.152s][info][gc,heap,exit]  1984M max, 1984M soft max, 152M committed, 84899K used
[6.152s][info][gc,heap,exit]  3969 x 512K regions
[6.152s][info][gc,heap,exit] Status: cancelled
[6.152s][info][gc,heap,exit] Reserved region:
[6.152s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.152s][info][gc,heap,exit] Collection set:
[6.152s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.152s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.152s][info][gc,heap,exit] 
[6.152s][info][gc,heap,exit]  Metaspace       used 25058K, committed 25344K, reserved 1114112K
[6.152s][info][gc,heap,exit]   class space    used 2776K, committed 2880K, reserved 1048576K
[6.152s][info][gc,stats    ] 
[6.152s][info][gc,stats    ] GC STATISTICS:
[6.152s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.152s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.152s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.152s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.152s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.152s][info][gc,stats    ] 
[6.152s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.152s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.152s][info][gc,stats    ] 
[6.152s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.152s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.152s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.152s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.152s][info][gc,stats    ] 
[6.153s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.153s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.153s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.153s][info][gc,stats    ]   Raise max pacing delay with care.
[6.153s][info][gc,stats    ] 
[6.153s][info][gc,stats    ] Concurrent Reset               =    0.007 s (a =     6744 us) (n =     1) (lvls, us =     6738,     6738,     6738,     6738,     6744)
[6.153s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      767 us) (n =     1) (lvls, us =      766,      766,      766,      766,      767)
[6.153s][info][gc,stats    ] Pause Init Mark (N)            =    0.000 s (a =      429 us) (n =     1) (lvls, us =      428,      428,      428,      428,      429)
[6.153s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[6.153s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     2149 us) (n =     1) (lvls, us =     2148,     2148,     2148,     2148,     2149)
[6.153s][info][gc,stats    ]   CMR: <total>                 =    0.004 s (a =     3985 us) (n =     1) (lvls, us =     3984,     3984,     3984,     3984,     3985)
[6.153s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =      839 us) (n =     1) (lvls, us =      838,      838,      838,      838,      839)
[6.153s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.002 s (a =     2133 us) (n =     1) (lvls, us =     2129,     2129,     2129,     2129,     2133)
[6.153s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1013 us) (n =     1) (lvls, us =      996,      996,      996,      996,     1013)
[6.153s][info][gc,stats    ] Concurrent Marking             =    0.045 s (a =    45278 us) (n =     1) (lvls, us =    45117,    45117,    45117,    45117,    45278)
[6.153s][info][gc,stats    ] Pause Final Mark (G)           =    0.000 s (a =      451 us) (n =     1) (lvls, us =      449,      449,      449,      449,      451)
[6.153s][info][gc,stats    ] Pause Final Mark (N)           =    0.000 s (a =      317 us) (n =     1) (lvls, us =      316,      316,      316,      316,      317)
[6.153s][info][gc,stats    ]   Finish Mark                  =    0.000 s (a =      108 us) (n =     1) (lvls, us =      107,      107,      107,      107,      108)
[6.153s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       41 us) (n =     1) (lvls, us =       41,       41,       41,       41,       41)
[6.153s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       89 us) (n =     1) (lvls, us =       89,       89,       89,       89,       89)
[6.153s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       24 us) (n =     1) (lvls, us =       24,       24,       24,       24,       24)
[6.153s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      187 us) (n =     1) (lvls, us =      186,      186,      186,      186,      187)
[6.153s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      247 us) (n =     1) (lvls, us =      246,      246,      246,      246,      247)
[6.153s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      247 us) (n =     1) (lvls, us =      246,      246,      246,      246,      247)
[6.153s][info][gc,stats    ] Concurrent Weak References     =    0.001 s (a =      684 us) (n =     1) (lvls, us =      682,      682,      682,      682,      684)
[6.153s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      459 us) (n =     1) (lvls, us =      457,      457,      457,      457,      459)
[6.153s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      459 us) (n =     1) (lvls, us =      457,      457,      457,      457,      459)
[6.153s][info][gc,stats    ] Concurrent Weak Roots          =    0.004 s (a =     3751 us) (n =     1) (lvls, us =     3750,     3750,     3750,     3750,     3751)
[6.153s][info][gc,stats    ]   Roots                        =    0.003 s (a =     2741 us) (n =     1) (lvls, us =     2734,     2734,     2734,     2734,     2741)
[6.153s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     2686 us) (n =     1) (lvls, us =     2676,     2676,     2676,     2676,     2686)
[6.153s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      713 us) (n =     1) (lvls, us =      713,      713,      713,      713,      713)
[6.153s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1958 us) (n =     1) (lvls, us =     1953,     1953,     1953,     1953,     1958)
[6.153s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       14 us) (n =     1) (lvls, us =       14,       14,       14,       14,       14)
[6.153s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      106 us) (n =     1) (lvls, us =      105,      105,      105,      105,      106)
[6.153s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      167 us) (n =     1) (lvls, us =      166,      166,      166,      166,      167)
[6.153s][info][gc,stats    ] Concurrent Class Unloading     =    0.006 s (a =     6482 us) (n =     1) (lvls, us =     6465,     6465,     6465,     6465,     6482)
[6.153s][info][gc,stats    ]   Unlink Stale                 =    0.003 s (a =     2924 us) (n =     1) (lvls, us =     2910,     2910,     2910,     2910,     2924)
[6.153s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       58 us) (n =     1) (lvls, us =       58,       58,       58,       58,       58)
[6.153s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.153s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2865 us) (n =     1) (lvls, us =     2852,     2852,     2852,     2852,     2865)
[6.153s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      114 us) (n =     1) (lvls, us =      113,      113,      113,      113,      114)
[6.153s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     3387 us) (n =     1) (lvls, us =     3379,     3379,     3379,     3379,     3387)
[6.153s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     3377 us) (n =     1) (lvls, us =     3359,     3359,     3359,     3359,     3377)
[6.153s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       10 us) (n =     1) (lvls, us =       10,       10,       10,       10,       10)
[6.153s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.153s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     1562 us) (n =     1) (lvls, us =     1543,     1543,     1543,     1543,     1562)
[6.153s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1498 us) (n =     1) (lvls, us =     1484,     1484,     1484,     1484,     1498)
[6.153s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       34 us) (n =     1) (lvls, us =       34,       34,       34,       34,       34)
[6.153s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1464 us) (n =     1) (lvls, us =     1445,     1445,     1445,     1445,     1464)
[6.153s][info][gc,stats    ] Concurrent Evacuation          =    0.013 s (a =    12615 us) (n =     1) (lvls, us =    12500,    12500,    12500,    12500,    12615)
[6.153s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      148 us) (n =     1) (lvls, us =      146,      146,      146,      146,      148)
[6.153s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       45 us) (n =     1) (lvls, us =       45,       45,       45,       45,       45)
[6.153s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.153s][info][gc,stats    ] Concurrent Update Refs         =    0.032 s (a =    32469 us) (n =     1) (lvls, us =    32422,    32422,    32422,    32422,    32469)
[6.153s][info][gc,stats    ] Concurrent Update Thread Roots =    0.001 s (a =      779 us) (n =     1) (lvls, us =      777,      777,      777,      777,      779)
[6.153s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      298 us) (n =     1) (lvls, us =      297,      297,      297,      297,      298)
[6.153s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      189 us) (n =     1) (lvls, us =      188,      188,      188,      188,      189)
[6.153s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       39 us) (n =     1) (lvls, us =       39,       39,       39,       39,       39)
[6.153s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.153s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       31 us) (n =     1) (lvls, us =       31,       31,       31,       31,       31)
[6.153s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       97 us) (n =     1) (lvls, us =       97,       97,       97,       97,       97)
[6.153s][info][gc,stats    ] 
[6.153s][info][gc,stats    ] 
[6.153s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.153s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.153s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.154s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.154s][info][gc,stats    ] 
[6.154s][info][gc,stats    ]     1 successful concurrent GCs
[6.154s][info][gc,stats    ]       0 invoked explicitly
[6.154s][info][gc,stats    ]       0 invoked implicitly
[6.154s][info][gc,stats    ] 
[6.154s][info][gc,stats    ]     0 Degenerated GCs
[6.154s][info][gc,stats    ]       0 caused by allocation failure
[6.154s][info][gc,stats    ]       0 upgraded to Full GC
[6.154s][info][gc,stats    ] 
[6.154s][info][gc,stats    ]     0 Full GCs
[6.154s][info][gc,stats    ]       0 invoked explicitly
[6.154s][info][gc,stats    ]       0 invoked implicitly
[6.154s][info][gc,stats    ]       0 caused by allocation failure
[6.154s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.154s][info][gc,stats    ] 
[6.154s][info][gc,stats    ] 
