[0.007s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.007s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.007s][info][gc] Using Shenandoah
[0.008s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.008s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.008s][info][gc,init] CPUs: 4 total, 4 available
[0.008s][info][gc,init] Memory: 7937M
[0.008s][info][gc,init] Large Page Support: Disabled
[0.008s][info][gc,init] NUMA Support: Disabled
[0.008s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.008s][info][gc,init] Heap Min Capacity: 6656K
[0.008s][info][gc,init] Heap Initial Capacity: 127488K
[0.008s][info][gc,init] Heap Max Capacity: 2032128K
[0.008s][info][gc,init] Pre-touch: Disabled
[0.008s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.008s][info][gc,init] Heuristics: Adaptive
[0.008s][info][gc,init] Heap Region Count: 3969
[0.008s][info][gc,init] Heap Region Size: 512K
[0.008s][info][gc,init] TLAB Size Max: 512K
[0.008s][info][gc,init] Humongous Object Threshold: 512K
[0.008s][info][gc,init] Parallel Workers: 8
[0.008s][info][gc,init] Concurrent Workers: 2
[0.017s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f519f000000-0x00007f519fc97000-0x00007f519fc97000), size 13201408, SharedBaseAddress: 0x00007f519f000000, ArchiveRelocationMode: 1.
[0.017s][info][gc,metaspace] Compressed class space mapped at: 0x00007f51a0000000-0x00007f51e0000000, reserved size: 1073741824
[0.017s][info][gc,metaspace] Narrow klass base: 0x00007f519f000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.294s][info][gc          ] Trigger: Metadata GC Threshold
[1.294s][info][gc,ergo     ] Free: 1790M, Max: 512K regular, 1790M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.294s][info][gc,start    ] GC(0) Concurrent reset
[1.294s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.294s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.295s][info][gc          ] GC(0) Concurrent reset 0.424ms
[1.295s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.296s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.296s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1790M, Non-Taxable: 179M, Alloc Tax Rate: 0.1x
[1.296s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.655ms
[1.296s][info][gc,start    ] GC(0) Concurrent marking roots
[1.296s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.302s][info][gc          ] GC(0) Concurrent marking roots 5.609ms
[1.302s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.302s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.313s][info][gc          ] GC(0) Concurrent marking (unload classes) 11.627ms
[1.314s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.314s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.314s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 261M, Actual Free: 1893M, Max CSet: 84672K, Min Garbage: 0B
[1.314s][info][gc,ergo     ] GC(0) Collectable Garbage: 81580K (98%), Immediate: 5343K (6%), CSet: 76237K (92%)
[1.314s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 83968K, Free: 1794M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.314s][info][gc          ] GC(0) Pause Final Mark (unload classes) 0.317ms
[1.314s][info][gc,start    ] GC(0) Concurrent thread roots
[1.314s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.314s][info][gc          ] GC(0) Concurrent thread roots 0.305ms
[1.314s][info][gc,start    ] GC(0) Concurrent weak references
[1.314s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.314s][info][gc,ref      ] GC(0) Encountered references: Soft: 3955, Weak: 2131, Final: 20, Phantom: 794
[1.315s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1259, Final: 17, Phantom: 483
[1.315s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 480, Final: 0, Phantom: 315
[1.315s][info][gc          ] GC(0) Concurrent weak references 0.335ms
[1.315s][info][gc,start    ] GC(0) Concurrent weak roots
[1.315s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.318s][info][gc          ] GC(0) Concurrent weak roots 3.594ms
[1.318s][info][gc,start    ] GC(0) Concurrent cleanup
[1.318s][info][gc          ] GC(0) Concurrent cleanup 97M->91M(125M) 0.068ms
[1.318s][info][gc,ergo     ] GC(0) Free: 1793M, Max: 512K regular, 1788M humongous, Frag: 1% external, 0% internal; Reserve: 100989K, Max: 512K
[1.318s][info][gc,start    ] GC(0) Concurrent class unloading
[1.318s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.323s][info][gc          ] GC(0) Concurrent class unloading 4.949ms
[1.323s][info][gc,start    ] GC(0) Concurrent strong roots
[1.323s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.325s][info][gc          ] GC(0) Concurrent strong roots 1.714ms
[1.325s][info][gc,start    ] GC(0) Concurrent evacuation
[1.325s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.331s][info][gc          ] GC(0) Concurrent evacuation 5.543ms
[1.331s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.331s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 102349K, Free: 1793M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.331s][info][gc          ] GC(0) Pause Init Update Refs 0.043ms
[1.331s][info][gc,start    ] GC(0) Concurrent update references
[1.331s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.336s][info][gc          ] GC(0) Concurrent update references 5.589ms
[1.336s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.339s][info][gc          ] GC(0) Concurrent update thread roots 2.159ms
[1.339s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.339s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.339s][info][gc          ] GC(0) Pause Final Update Refs 0.074ms
[1.339s][info][gc,start    ] GC(0) Concurrent cleanup
[1.339s][info][gc          ] GC(0) Concurrent cleanup 99M->17M(133M) 0.079ms
[1.339s][info][gc,ergo     ] Free: 1866M, Max: 512K regular, 1779M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.339s][info][gc,stats    ] 
[1.339s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.339s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.339s][info][gc,stats    ] 
[1.339s][info][gc,stats    ] Concurrent Reset                    456 us
[1.339s][info][gc,stats    ] Pause Init Mark (G)                1469 us
[1.339s][info][gc,stats    ] Pause Init Mark (N)                 679 us
[1.339s][info][gc,stats    ]   Update Region States               24 us
[1.339s][info][gc,stats    ] Concurrent Mark Roots              5661 us, parallelism: 0.75x
[1.339s][info][gc,stats    ]   CMR: <total>                     4271 us
[1.339s][info][gc,stats    ]   CMR: Thread Roots                1431 us, workers (us): 1431,   0, ---, ---, ---, ---, ---, ---, 
[1.339s][info][gc,stats    ]   CMR: VM Strong Roots              873 us, workers (us): 627, 245, ---, ---, ---, ---, ---, ---, 
[1.339s][info][gc,stats    ]   CMR: CLDG Roots                  1967 us, workers (us): ---, 1967, ---, ---, ---, ---, ---, ---, 
[1.339s][info][gc,stats    ] Concurrent Marking                11659 us
[1.339s][info][gc,stats    ] Pause Final Mark (G)                378 us
[1.339s][info][gc,stats    ] Pause Final Mark (N)                326 us
[1.339s][info][gc,stats    ]   Finish Mark                        92 us
[1.339s][info][gc,stats    ]   Update Region States               18 us
[1.339s][info][gc,stats    ]   Choose Collection Set             130 us
[1.339s][info][gc,stats    ]   Rebuild Free Set                   24 us
[1.339s][info][gc,stats    ] Concurrent Thread Roots             323 us, parallelism: 0.82x
[1.339s][info][gc,stats    ]   CTR: <total>                      264 us
[1.339s][info][gc,stats    ]   CTR: Thread Roots                 264 us, workers (us): 264,   0, ---, ---, ---, ---, ---, ---, 
[1.339s][info][gc,stats    ] Concurrent Weak References          348 us, parallelism: 1.05x
[1.339s][info][gc,stats    ]   CWRF: <total>                     367 us
[1.339s][info][gc,stats    ]   CWRF: Weak References             367 us, workers (us): 140, 227, ---, ---, ---, ---, ---, ---, 
[1.339s][info][gc,stats    ] Concurrent Weak Roots              3625 us
[1.339s][info][gc,stats    ]   Roots                            3531 us, parallelism: 1.52x
[1.339s][info][gc,stats    ]     CWR: <total>                   5368 us
[1.339s][info][gc,stats    ]     CWR: Code Cache Roots           831 us, workers (us): 240, 591, ---, ---, ---, ---, ---, ---, 
[1.339s][info][gc,stats    ]     CWR: VM Weak Roots             4524 us, workers (us): 3127, 1397, ---, ---, ---, ---, ---, ---, 
[1.339s][info][gc,stats    ]     CWR: CLDG Roots                  14 us, workers (us): ---,  14, ---, ---, ---, ---, ---, ---, 
[1.339s][info][gc,stats    ]   Rendezvous                         42 us
[1.339s][info][gc,stats    ] Concurrent Cleanup                   84 us
[1.339s][info][gc,stats    ] Concurrent Class Unloading         4971 us
[1.339s][info][gc,stats    ]   Unlink Stale                     1430 us
[1.339s][info][gc,stats    ]     System Dictionary                49 us
[1.339s][info][gc,stats    ]     Weak Class Links                  0 us
[1.339s][info][gc,stats    ]     Code Roots                     1379 us
[1.339s][info][gc,stats    ]   Rendezvous                         65 us
[1.339s][info][gc,stats    ]   Purge Unlinked                   3427 us
[1.339s][info][gc,stats    ]     Code Roots                     3417 us
[1.339s][info][gc,stats    ]     CLDG                             10 us
[1.339s][info][gc,stats    ]     Exception Caches                  0 us
[1.339s][info][gc,stats    ] Concurrent Strong Roots            1746 us, parallelism: 0.96x
[1.339s][info][gc,stats    ]   CSR: <total>                     1682 us
[1.339s][info][gc,stats    ]   CSR: VM Strong Roots               45 us, workers (us):  27,  18, ---, ---, ---, ---, ---, ---, 
[1.339s][info][gc,stats    ]   CSR: CLDG Roots                  1637 us, workers (us): ---, 1637, ---, ---, ---, ---, ---, ---, 
[1.339s][info][gc,stats    ] Concurrent Evacuation              5575 us
[1.339s][info][gc,stats    ] Pause Init Update Refs (G)          149 us
[1.339s][info][gc,stats    ] Pause Init Update Refs (N)           51 us
[1.339s][info][gc,stats    ]   Manage GCLABs                       4 us
[1.339s][info][gc,stats    ] Concurrent Update Refs             5624 us
[1.339s][info][gc,stats    ] Concurrent Update Thread Roots     2186 us
[1.339s][info][gc,stats    ] Pause Final Update Refs (G)         181 us
[1.339s][info][gc,stats    ] Pause Final Update Refs (N)          85 us
[1.339s][info][gc,stats    ]   Update Region States               16 us
[1.339s][info][gc,stats    ]   Trash Collection Set                5 us
[1.340s][info][gc,stats    ]   Rebuild Free Set                   17 us
[1.340s][info][gc,stats    ] Concurrent Cleanup                   94 us
[1.340s][info][gc,stats    ] 
[1.340s][info][gc,stats    ] Allocation pacing accrued:
[1.340s][info][gc,stats    ]       0 of  1332 ms (  0.0%): <total>
[1.340s][info][gc,stats    ]       0 of  1332 ms (  0.0%): <average total>
[1.340s][info][gc,stats    ] 
[1.340s][info][gc,metaspace] Metaspace: 21218K(21568K)->21424K(21760K) NonClass: 18882K(19072K)->19055K(19200K) Class: 2336K(2496K)->2369K(2560K)
[1.340s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[7.751s][info][gc          ] Cancelling GC: Stopping VM
[7.751s][info][gc,heap,exit] Heap
[7.751s][info][gc,heap,exit] Shenandoah Heap
[7.751s][info][gc,heap,exit]  1984M max, 1984M soft max, 133M committed, 38348K used
[7.751s][info][gc,heap,exit]  3969 x 512K regions
[7.751s][info][gc,heap,exit] Status: cancelled
[7.751s][info][gc,heap,exit] Reserved region:
[7.751s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[7.751s][info][gc,heap,exit] Collection set:
[7.752s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[7.752s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[7.752s][info][gc,heap,exit] 
[7.752s][info][gc,heap,exit]  Metaspace       used 25417K, committed 25792K, reserved 1114112K
[7.752s][info][gc,heap,exit]   class space    used 2926K, committed 3136K, reserved 1048576K
[7.752s][info][gc,stats    ] 
[7.752s][info][gc,stats    ] GC STATISTICS:
[7.752s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[7.752s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[7.752s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[7.752s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[7.752s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[7.752s][info][gc,stats    ] 
[7.752s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[7.753s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[7.753s][info][gc,stats    ] 
[7.753s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[7.753s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[7.753s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[7.753s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[7.753s][info][gc,stats    ] 
[7.753s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[7.753s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[7.753s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[7.753s][info][gc,stats    ]   Raise max pacing delay with care.
[7.753s][info][gc,stats    ] 
[7.753s][info][gc,stats    ] Concurrent Reset               =    0.000 s (a =      456 us) (n =     1) (lvls, us =      455,      455,      455,      455,      456)
[7.754s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =     1469 us) (n =     1) (lvls, us =     1465,     1465,     1465,     1465,     1469)
[7.754s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      679 us) (n =     1) (lvls, us =      678,      678,      678,      678,      679)
[7.754s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       24 us) (n =     1) (lvls, us =       24,       24,       24,       24,       24)
[7.754s][info][gc,stats    ] Concurrent Mark Roots          =    0.006 s (a =     5661 us) (n =     1) (lvls, us =     5645,     5645,     5645,     5645,     5661)
[7.754s][info][gc,stats    ]   CMR: <total>                 =    0.004 s (a =     4271 us) (n =     1) (lvls, us =     4258,     4258,     4258,     4258,     4271)
[7.754s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1431 us) (n =     1) (lvls, us =     1426,     1426,     1426,     1426,     1431)
[7.754s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      873 us) (n =     1) (lvls, us =      871,      871,      871,      871,      873)
[7.754s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     1967 us) (n =     1) (lvls, us =     1953,     1953,     1953,     1953,     1967)
[7.754s][info][gc,stats    ] Concurrent Marking             =    0.012 s (a =    11659 us) (n =     1) (lvls, us =    11523,    11523,    11523,    11523,    11659)
[7.754s][info][gc,stats    ] Pause Final Mark (G)           =    0.000 s (a =      378 us) (n =     1) (lvls, us =      377,      377,      377,      377,      378)
[7.755s][info][gc,stats    ] Pause Final Mark (N)           =    0.000 s (a =      326 us) (n =     1) (lvls, us =      324,      324,      324,      324,      326)
[7.755s][info][gc,stats    ]   Finish Mark                  =    0.000 s (a =       92 us) (n =     1) (lvls, us =       92,       92,       92,       92,       92)
[7.755s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[7.755s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =      130 us) (n =     1) (lvls, us =      129,      129,      129,      129,      130)
[7.755s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       24 us) (n =     1) (lvls, us =       24,       24,       24,       24,       24)
[7.755s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      323 us) (n =     1) (lvls, us =      322,      322,      322,      322,      323)
[7.755s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      264 us) (n =     1) (lvls, us =      264,      264,      264,      264,      264)
[7.755s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      264 us) (n =     1) (lvls, us =      264,      264,      264,      264,      264)
[7.755s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      348 us) (n =     1) (lvls, us =      348,      348,      348,      348,      348)
[7.756s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      367 us) (n =     1) (lvls, us =      367,      367,      367,      367,      367)
[7.756s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      367 us) (n =     1) (lvls, us =      367,      367,      367,      367,      367)
[7.756s][info][gc,stats    ] Concurrent Weak Roots          =    0.004 s (a =     3625 us) (n =     1) (lvls, us =     3613,     3613,     3613,     3613,     3625)
[7.756s][info][gc,stats    ]   Roots                        =    0.004 s (a =     3531 us) (n =     1) (lvls, us =     3516,     3516,     3516,     3516,     3531)
[7.756s][info][gc,stats    ]     CWR: <total>               =    0.005 s (a =     5368 us) (n =     1) (lvls, us =     5352,     5352,     5352,     5352,     5368)
[7.756s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      831 us) (n =     1) (lvls, us =      830,      830,      830,      830,      831)
[7.756s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.005 s (a =     4524 us) (n =     1) (lvls, us =     4512,     4512,     4512,     4512,     4524)
[7.756s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       14 us) (n =     1) (lvls, us =       13,       13,       13,       13,       14)
[7.756s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       42 us) (n =     1) (lvls, us =       42,       42,       42,       42,       42)
[7.756s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       84 us) (n =     1) (lvls, us =       84,       84,       84,       84,       84)
[7.756s][info][gc,stats    ] Concurrent Class Unloading     =    0.005 s (a =     4971 us) (n =     1) (lvls, us =     4961,     4961,     4961,     4961,     4971)
[7.756s][info][gc,stats    ]   Unlink Stale                 =    0.001 s (a =     1430 us) (n =     1) (lvls, us =     1426,     1426,     1426,     1426,     1430)
[7.757s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       49 us) (n =     1) (lvls, us =       49,       49,       49,       49,       49)
[7.757s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.757s][info][gc,stats    ]     Code Roots                 =    0.001 s (a =     1379 us) (n =     1) (lvls, us =     1367,     1367,     1367,     1367,     1379)
[7.757s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       65 us) (n =     1) (lvls, us =       64,       64,       64,       64,       65)
[7.757s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     3427 us) (n =     1) (lvls, us =     3418,     3418,     3418,     3418,     3427)
[7.757s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     3417 us) (n =     1) (lvls, us =     3398,     3398,     3398,     3398,     3417)
[7.757s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       10 us) (n =     1) (lvls, us =       10,       10,       10,       10,       10)
[7.757s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.757s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     1746 us) (n =     1) (lvls, us =     1738,     1738,     1738,     1738,     1746)
[7.757s][info][gc,stats    ]   CSR: <total>                 =    0.002 s (a =     1682 us) (n =     1) (lvls, us =     1680,     1680,     1680,     1680,     1682)
[7.757s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       45 us) (n =     1) (lvls, us =       45,       45,       45,       45,       45)
[7.757s][info][gc,stats    ]   CSR: CLDG Roots              =    0.002 s (a =     1637 us) (n =     1) (lvls, us =     1621,     1621,     1621,     1621,     1637)
[7.757s][info][gc,stats    ] Concurrent Evacuation          =    0.006 s (a =     5575 us) (n =     1) (lvls, us =     5566,     5566,     5566,     5566,     5575)
[7.758s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      149 us) (n =     1) (lvls, us =      148,      148,      148,      148,      149)
[7.758s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       51 us) (n =     1) (lvls, us =       51,       51,       51,       51,       51)
[7.758s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[7.758s][info][gc,stats    ] Concurrent Update Refs         =    0.006 s (a =     5624 us) (n =     1) (lvls, us =     5605,     5605,     5605,     5605,     5624)
[7.758s][info][gc,stats    ] Concurrent Update Thread Roots =    0.002 s (a =     2186 us) (n =     1) (lvls, us =     2168,     2168,     2168,     2168,     2186)
[7.758s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      181 us) (n =     1) (lvls, us =      180,      180,      180,      180,      181)
[7.758s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =       85 us) (n =     1) (lvls, us =       85,       85,       85,       85,       85)
[7.758s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[7.759s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[7.759s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[7.759s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       94 us) (n =     1) (lvls, us =       94,       94,       94,       94,       94)
[7.759s][info][gc,stats    ] 
[7.759s][info][gc,stats    ] 
[7.759s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[7.759s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[7.759s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[7.759s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[7.759s][info][gc,stats    ] 
[7.760s][info][gc,stats    ]     1 successful concurrent GCs
[7.760s][info][gc,stats    ]       0 invoked explicitly
[7.760s][info][gc,stats    ]       0 invoked implicitly
[7.760s][info][gc,stats    ] 
[7.760s][info][gc,stats    ]     0 Degenerated GCs
[7.760s][info][gc,stats    ]       0 caused by allocation failure
[7.760s][info][gc,stats    ]       0 upgraded to Full GC
[7.760s][info][gc,stats    ] 
[7.760s][info][gc,stats    ]     0 Full GCs
[7.760s][info][gc,stats    ]       0 invoked explicitly
[7.761s][info][gc,stats    ]       0 invoked implicitly
[7.761s][info][gc,stats    ]       0 caused by allocation failure
[7.761s][info][gc,stats    ]       0 upgraded from Degenerated GC
[7.761s][info][gc,stats    ] 
[7.761s][info][gc,stats    ] 
