[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.005s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.006s][info][gc] Using Shenandoah
[0.008s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.008s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.008s][info][gc,init] CPUs: 4 total, 4 available
[0.008s][info][gc,init] Memory: 7937M
[0.008s][info][gc,init] Large Page Support: Disabled
[0.008s][info][gc,init] NUMA Support: Disabled
[0.008s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.008s][info][gc,init] Heap Min Capacity: 6656K
[0.008s][info][gc,init] Heap Initial Capacity: 127488K
[0.008s][info][gc,init] Heap Max Capacity: 2032128K
[0.008s][info][gc,init] Pre-touch: Disabled
[0.008s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.008s][info][gc,init] Heuristics: Adaptive
[0.008s][info][gc,init] Heap Region Count: 3969
[0.008s][info][gc,init] Heap Region Size: 512K
[0.008s][info][gc,init] TLAB Size Max: 512K
[0.008s][info][gc,init] Humongous Object Threshold: 512K
[0.008s][info][gc,init] Parallel Workers: 8
[0.008s][info][gc,init] Concurrent Workers: 2
[0.023s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f6d77000000-0x00007f6d77c97000-0x00007f6d77c97000), size 13201408, SharedBaseAddress: 0x00007f6d77000000, ArchiveRelocationMode: 1.
[0.023s][info][gc,metaspace] Compressed class space mapped at: 0x00007f6d78000000-0x00007f6db8000000, reserved size: 1073741824
[0.023s][info][gc,metaspace] Narrow klass base: 0x00007f6d77000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.891s][info][gc          ] Trigger: Metadata GC Threshold
[1.892s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.892s][info][gc,start    ] GC(0) Concurrent reset
[1.892s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.892s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.892s][info][gc          ] GC(0) Concurrent reset 0.545ms
[1.892s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.893s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.893s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.893s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.572ms
[1.893s][info][gc,start    ] GC(0) Concurrent marking roots
[1.893s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.896s][info][gc          ] GC(0) Concurrent marking roots 2.659ms
[1.896s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.896s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.931s][info][gc          ] GC(0) Concurrent marking (unload classes) 34.672ms
[1.931s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.931s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.932s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 380M, Actual Free: 1846M, Max CSet: 84672K, Min Garbage: 0B
[1.932s][info][gc,ergo     ] GC(0) Collectable Garbage: 73055K (98%), Immediate: 4335K (5%), CSet: 68720K (92%)
[1.932s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 76800K, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.932s][info][gc          ] GC(0) Pause Final Mark (unload classes) 1.338ms
[1.932s][info][gc,start    ] GC(0) Concurrent thread roots
[1.932s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.932s][info][gc          ] GC(0) Concurrent thread roots 0.181ms
[1.932s][info][gc,start    ] GC(0) Concurrent weak references
[1.932s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.933s][info][gc,ref      ] GC(0) Encountered references: Soft: 3955, Weak: 2098, Final: 4, Phantom: 820
[1.933s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1261, Final: 0, Phantom: 613
[1.933s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 499, Final: 0, Phantom: 230
[1.933s][info][gc          ] GC(0) Concurrent weak references 0.554ms
[1.933s][info][gc,start    ] GC(0) Concurrent weak roots
[1.933s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.939s][info][gc          ] GC(0) Concurrent weak roots 6.027ms
[1.939s][info][gc,start    ] GC(0) Concurrent cleanup
[1.939s][info][gc          ] GC(0) Concurrent cleanup 141M->137M(144M) 0.117ms
[1.939s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1741M humongous, Frag: 1% external, 0% internal; Reserve: 101009K, Max: 512K
[1.939s][info][gc,start    ] GC(0) Concurrent class unloading
[1.939s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.950s][info][gc          ] GC(0) Concurrent class unloading 10.781ms
[1.950s][info][gc,start    ] GC(0) Concurrent strong roots
[1.950s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.951s][info][gc          ] GC(0) Concurrent strong roots 1.564ms
[1.952s][info][gc,start    ] GC(0) Concurrent evacuation
[1.952s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.958s][info][gc          ] GC(0) Concurrent evacuation 6.065ms
[1.958s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.958s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 145M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.958s][info][gc          ] GC(0) Pause Init Update Refs 0.052ms
[1.958s][info][gc,start    ] GC(0) Concurrent update references
[1.958s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.978s][info][gc          ] GC(0) Concurrent update references 20.540ms
[1.978s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.979s][info][gc          ] GC(0) Concurrent update thread roots 0.287ms
[1.979s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.979s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.979s][info][gc          ] GC(0) Pause Final Update Refs 0.098ms
[1.979s][info][gc,start    ] GC(0) Concurrent cleanup
[1.979s][info][gc          ] GC(0) Concurrent cleanup 147M->72M(152M) 0.130ms
[1.979s][info][gc,ergo     ] Free: 1810M, Max: 512K regular, 1733M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.979s][info][gc,stats    ] 
[1.979s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.979s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.979s][info][gc,stats    ] 
[1.979s][info][gc,stats    ] Concurrent Reset                    586 us
[1.979s][info][gc,stats    ] Pause Init Mark (G)                 768 us
[1.979s][info][gc,stats    ] Pause Init Mark (N)                 583 us
[1.979s][info][gc,stats    ]   Update Region States               23 us
[1.979s][info][gc,stats    ] Concurrent Mark Roots              2861 us, parallelism: 1.58x
[1.979s][info][gc,stats    ]   CMR: <total>                     4524 us
[1.979s][info][gc,stats    ]   CMR: Thread Roots                2400 us, workers (us): 498, 1903, ---, ---, ---, ---, ---, ---, 
[1.979s][info][gc,stats    ]   CMR: VM Strong Roots              803 us, workers (us): 398, 405, ---, ---, ---, ---, ---, ---, 
[1.979s][info][gc,stats    ]   CMR: CLDG Roots                  1320 us, workers (us): 1320, ---, ---, ---, ---, ---, ---, ---, 
[1.979s][info][gc,stats    ] Concurrent Marking                34743 us
[1.979s][info][gc,stats    ] Pause Final Mark (G)               1391 us
[1.979s][info][gc,stats    ] Pause Final Mark (N)               1347 us
[1.979s][info][gc,stats    ]   Finish Mark                      1140 us
[1.979s][info][gc,stats    ]   Update Region States               38 us
[1.979s][info][gc,stats    ]   Choose Collection Set              86 us
[1.979s][info][gc,stats    ]   Rebuild Free Set                   18 us
[1.979s][info][gc,stats    ] Concurrent Thread Roots             194 us, parallelism: 1.33x
[1.979s][info][gc,stats    ]   CTR: <total>                      259 us
[1.979s][info][gc,stats    ]   CTR: Thread Roots                 259 us, workers (us): 126, 133, ---, ---, ---, ---, ---, ---, 
[1.980s][info][gc,stats    ] Concurrent Weak References          580 us, parallelism: 0.69x
[1.980s][info][gc,stats    ]   CWRF: <total>                     399 us
[1.980s][info][gc,stats    ]   CWRF: Weak References             399 us, workers (us): 398,   1, ---, ---, ---, ---, ---, ---, 
[1.980s][info][gc,stats    ] Concurrent Weak Roots              6057 us
[1.980s][info][gc,stats    ]   Roots                            5224 us, parallelism: 1.39x
[1.980s][info][gc,stats    ]     CWR: <total>                   7266 us
[1.980s][info][gc,stats    ]     CWR: Code Cache Roots           773 us, workers (us): 773,   0, ---, ---, ---, ---, ---, ---, 
[1.980s][info][gc,stats    ]     CWR: VM Weak Roots             6472 us, workers (us): 1314, 5158, ---, ---, ---, ---, ---, ---, 
[1.980s][info][gc,stats    ]     CWR: CLDG Roots                  21 us, workers (us):  21, ---, ---, ---, ---, ---, ---, ---, 
[1.980s][info][gc,stats    ]   Rendezvous                        749 us
[1.980s][info][gc,stats    ] Concurrent Cleanup                  128 us
[1.980s][info][gc,stats    ] Concurrent Class Unloading        10823 us
[1.980s][info][gc,stats    ]   Unlink Stale                     1594 us
[1.980s][info][gc,stats    ]     System Dictionary               108 us
[1.980s][info][gc,stats    ]     Weak Class Links                  0 us
[1.980s][info][gc,stats    ]     Code Roots                     1485 us
[1.980s][info][gc,stats    ]   Rendezvous                        959 us
[1.980s][info][gc,stats    ]   Purge Unlinked                   8203 us
[1.980s][info][gc,stats    ]     Code Roots                     8190 us
[1.980s][info][gc,stats    ]     CLDG                             12 us
[1.980s][info][gc,stats    ]     Exception Caches                  0 us
[1.980s][info][gc,stats    ] Concurrent Strong Roots            1647 us, parallelism: 0.84x
[1.980s][info][gc,stats    ]   CSR: <total>                     1382 us
[1.980s][info][gc,stats    ]   CSR: VM Strong Roots               22 us, workers (us):  22,   0, ---, ---, ---, ---, ---, ---, 
[1.980s][info][gc,stats    ]   CSR: CLDG Roots                  1360 us, workers (us): 1360, ---, ---, ---, ---, ---, ---, ---, 
[1.980s][info][gc,stats    ] Concurrent Evacuation              6091 us
[1.980s][info][gc,stats    ] Pause Init Update Refs (G)          255 us
[1.980s][info][gc,stats    ] Pause Init Update Refs (N)           61 us
[1.980s][info][gc,stats    ]   Manage GCLABs                       6 us
[1.980s][info][gc,stats    ] Concurrent Update Refs            20575 us
[1.980s][info][gc,stats    ] Concurrent Update Thread Roots      298 us
[1.980s][info][gc,stats    ] Pause Final Update Refs (G)         217 us
[1.980s][info][gc,stats    ] Pause Final Update Refs (N)         109 us
[1.980s][info][gc,stats    ]   Update Region States               35 us
[1.980s][info][gc,stats    ]   Trash Collection Set                4 us
[1.980s][info][gc,stats    ]   Rebuild Free Set                   18 us
[1.980s][info][gc,stats    ] Concurrent Cleanup                  141 us
[1.980s][info][gc,stats    ] 
[1.980s][info][gc,stats    ] Allocation pacing accrued:
[1.980s][info][gc,stats    ]       0 of  1972 ms (  0.0%): <total>
[1.980s][info][gc,stats    ]       0 of  1972 ms (  0.0%): <average total>
[1.980s][info][gc,stats    ] 
[1.980s][info][gc,metaspace] Metaspace: 21243K(21632K)->21811K(22208K) NonClass: 18892K(19072K)->19383K(19584K) Class: 2351K(2560K)->2427K(2624K)
[1.980s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.258s][info][gc          ] Cancelling GC: Stopping VM
[6.259s][info][gc,heap,exit] Heap
[6.259s][info][gc,heap,exit] Shenandoah Heap
[6.259s][info][gc,heap,exit]  1984M max, 1984M soft max, 152M committed, 85491K used
[6.259s][info][gc,heap,exit]  3969 x 512K regions
[6.259s][info][gc,heap,exit] Status: cancelled
[6.259s][info][gc,heap,exit] Reserved region:
[6.259s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.259s][info][gc,heap,exit] Collection set:
[6.259s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.259s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.259s][info][gc,heap,exit] 
[6.259s][info][gc,heap,exit]  Metaspace       used 25102K, committed 25408K, reserved 1114112K
[6.259s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.259s][info][gc,stats    ] 
[6.259s][info][gc,stats    ] GC STATISTICS:
[6.259s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.259s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.259s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.259s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.259s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.259s][info][gc,stats    ] 
[6.259s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.259s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.259s][info][gc,stats    ] 
[6.259s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.259s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.259s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.259s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.259s][info][gc,stats    ] 
[6.259s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.259s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.259s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.259s][info][gc,stats    ]   Raise max pacing delay with care.
[6.259s][info][gc,stats    ] 
[6.259s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      586 us) (n =     1) (lvls, us =      586,      586,      586,      586,      586)
[6.259s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      768 us) (n =     1) (lvls, us =      768,      768,      768,      768,      768)
[6.259s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      583 us) (n =     1) (lvls, us =      582,      582,      582,      582,      583)
[6.259s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       23 us) (n =     1) (lvls, us =       23,       23,       23,       23,       23)
[6.259s][info][gc,stats    ] Concurrent Mark Roots          =    0.003 s (a =     2861 us) (n =     1) (lvls, us =     2852,     2852,     2852,     2852,     2861)
[6.259s][info][gc,stats    ]   CMR: <total>                 =    0.005 s (a =     4524 us) (n =     1) (lvls, us =     4512,     4512,     4512,     4512,     4524)
[6.259s][info][gc,stats    ]   CMR: Thread Roots            =    0.002 s (a =     2400 us) (n =     1) (lvls, us =     2383,     2383,     2383,     2383,     2400)
[6.259s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      803 us) (n =     1) (lvls, us =      803,      803,      803,      803,      803)
[6.259s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1320 us) (n =     1) (lvls, us =     1309,     1309,     1309,     1309,     1320)
[6.259s][info][gc,stats    ] Concurrent Marking             =    0.035 s (a =    34743 us) (n =     1) (lvls, us =    34570,    34570,    34570,    34570,    34743)
[6.259s][info][gc,stats    ] Pause Final Mark (G)           =    0.001 s (a =     1391 us) (n =     1) (lvls, us =     1387,     1387,     1387,     1387,     1391)
[6.259s][info][gc,stats    ] Pause Final Mark (N)           =    0.001 s (a =     1347 us) (n =     1) (lvls, us =     1328,     1328,     1328,     1328,     1347)
[6.259s][info][gc,stats    ]   Finish Mark                  =    0.001 s (a =     1140 us) (n =     1) (lvls, us =     1133,     1133,     1133,     1133,     1140)
[6.259s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       38 us) (n =     1) (lvls, us =       38,       38,       38,       38,       38)
[6.259s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       86 us) (n =     1) (lvls, us =       86,       86,       86,       86,       86)
[6.260s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[6.260s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      194 us) (n =     1) (lvls, us =      193,      193,      193,      193,      194)
[6.260s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      259 us) (n =     1) (lvls, us =      258,      258,      258,      258,      259)
[6.260s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      259 us) (n =     1) (lvls, us =      258,      258,      258,      258,      259)
[6.260s][info][gc,stats    ] Concurrent Weak References     =    0.001 s (a =      580 us) (n =     1) (lvls, us =      580,      580,      580,      580,      580)
[6.260s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      399 us) (n =     1) (lvls, us =      398,      398,      398,      398,      399)
[6.260s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      399 us) (n =     1) (lvls, us =      398,      398,      398,      398,      399)
[6.260s][info][gc,stats    ] Concurrent Weak Roots          =    0.006 s (a =     6057 us) (n =     1) (lvls, us =     6055,     6055,     6055,     6055,     6057)
[6.260s][info][gc,stats    ]   Roots                        =    0.005 s (a =     5224 us) (n =     1) (lvls, us =     5215,     5215,     5215,     5215,     5224)
[6.260s][info][gc,stats    ]     CWR: <total>               =    0.007 s (a =     7266 us) (n =     1) (lvls, us =     7266,     7266,     7266,     7266,     7266)
[6.260s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      773 us) (n =     1) (lvls, us =      773,      773,      773,      773,      773)
[6.260s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.006 s (a =     6472 us) (n =     1) (lvls, us =     6465,     6465,     6465,     6465,     6472)
[6.260s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       21 us) (n =     1) (lvls, us =       21,       21,       21,       21,       21)
[6.260s][info][gc,stats    ]   Rendezvous                   =    0.001 s (a =      749 us) (n =     1) (lvls, us =      748,      748,      748,      748,      749)
[6.260s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      128 us) (n =     1) (lvls, us =      127,      127,      127,      127,      128)
[6.260s][info][gc,stats    ] Concurrent Class Unloading     =    0.011 s (a =    10823 us) (n =     1) (lvls, us =    10742,    10742,    10742,    10742,    10823)
[6.260s][info][gc,stats    ]   Unlink Stale                 =    0.002 s (a =     1594 us) (n =     1) (lvls, us =     1582,     1582,     1582,     1582,     1594)
[6.260s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =      108 us) (n =     1) (lvls, us =      107,      107,      107,      107,      108)
[6.260s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.260s][info][gc,stats    ]     Code Roots                 =    0.001 s (a =     1485 us) (n =     1) (lvls, us =     1484,     1484,     1484,     1484,     1485)
[6.260s][info][gc,stats    ]   Rendezvous                   =    0.001 s (a =      959 us) (n =     1) (lvls, us =      957,      957,      957,      957,      959)
[6.260s][info][gc,stats    ]   Purge Unlinked               =    0.008 s (a =     8203 us) (n =     1) (lvls, us =     8184,     8184,     8184,     8184,     8203)
[6.260s][info][gc,stats    ]     Code Roots                 =    0.008 s (a =     8190 us) (n =     1) (lvls, us =     8184,     8184,     8184,     8184,     8190)
[6.260s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       12 us) (n =     1) (lvls, us =       12,       12,       12,       12,       12)
[6.260s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.260s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     1647 us) (n =     1) (lvls, us =     1641,     1641,     1641,     1641,     1647)
[6.260s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1382 us) (n =     1) (lvls, us =     1367,     1367,     1367,     1367,     1382)
[6.260s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       22 us) (n =     1) (lvls, us =       22,       22,       22,       22,       22)
[6.260s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1360 us) (n =     1) (lvls, us =     1348,     1348,     1348,     1348,     1360)
[6.260s][info][gc,stats    ] Concurrent Evacuation          =    0.006 s (a =     6091 us) (n =     1) (lvls, us =     6074,     6074,     6074,     6074,     6091)
[6.260s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      255 us) (n =     1) (lvls, us =      254,      254,      254,      254,      255)
[6.260s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       61 us) (n =     1) (lvls, us =       61,       61,       61,       61,       61)
[6.260s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        6 us) (n =     1) (lvls, us =        6,        6,        6,        6,        6)
[6.260s][info][gc,stats    ] Concurrent Update Refs         =    0.021 s (a =    20575 us) (n =     1) (lvls, us =    20508,    20508,    20508,    20508,    20575)
[6.260s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      298 us) (n =     1) (lvls, us =      297,      297,      297,      297,      298)
[6.260s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      217 us) (n =     1) (lvls, us =      217,      217,      217,      217,      217)
[6.260s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      109 us) (n =     1) (lvls, us =      107,      107,      107,      107,      109)
[6.260s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       35 us) (n =     1) (lvls, us =       35,       35,       35,       35,       35)
[6.260s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.260s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[6.260s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      141 us) (n =     1) (lvls, us =      141,      141,      141,      141,      141)
[6.260s][info][gc,stats    ] 
[6.260s][info][gc,stats    ] 
[6.260s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.260s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.260s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.260s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.260s][info][gc,stats    ] 
[6.260s][info][gc,stats    ]     1 successful concurrent GCs
[6.260s][info][gc,stats    ]       0 invoked explicitly
[6.260s][info][gc,stats    ]       0 invoked implicitly
[6.260s][info][gc,stats    ] 
[6.260s][info][gc,stats    ]     0 Degenerated GCs
[6.260s][info][gc,stats    ]       0 caused by allocation failure
[6.260s][info][gc,stats    ]       0 upgraded to Full GC
[6.260s][info][gc,stats    ] 
[6.260s][info][gc,stats    ]     0 Full GCs
[6.260s][info][gc,stats    ]       0 invoked explicitly
[6.260s][info][gc,stats    ]       0 invoked implicitly
[6.260s][info][gc,stats    ]       0 caused by allocation failure
[6.260s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.260s][info][gc,stats    ] 
[6.260s][info][gc,stats    ] 
