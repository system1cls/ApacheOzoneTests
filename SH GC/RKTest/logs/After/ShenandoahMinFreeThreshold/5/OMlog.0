[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.004s][info][gc] Using Shenandoah
[0.005s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.005s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.005s][info][gc,init] CPUs: 4 total, 4 available
[0.005s][info][gc,init] Memory: 7937M
[0.005s][info][gc,init] Large Page Support: Disabled
[0.005s][info][gc,init] NUMA Support: Disabled
[0.005s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.005s][info][gc,init] Heap Min Capacity: 6656K
[0.005s][info][gc,init] Heap Initial Capacity: 127488K
[0.005s][info][gc,init] Heap Max Capacity: 2032128K
[0.005s][info][gc,init] Pre-touch: Disabled
[0.005s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.005s][info][gc,init] Heuristics: Adaptive
[0.005s][info][gc,init] Heap Region Count: 3969
[0.005s][info][gc,init] Heap Region Size: 512K
[0.005s][info][gc,init] TLAB Size Max: 512K
[0.005s][info][gc,init] Humongous Object Threshold: 512K
[0.005s][info][gc,init] Parallel Workers: 8
[0.005s][info][gc,init] Concurrent Workers: 2
[0.014s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f2fa7000000-0x00007f2fa7c97000-0x00007f2fa7c97000), size 13201408, SharedBaseAddress: 0x00007f2fa7000000, ArchiveRelocationMode: 1.
[0.014s][info][gc,metaspace] Compressed class space mapped at: 0x00007f2fa8000000-0x00007f2fe8000000, reserved size: 1073741824
[0.014s][info][gc,metaspace] Narrow klass base: 0x00007f2fa7000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.692s][info][gc          ] Trigger: Metadata GC Threshold
[1.692s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.692s][info][gc,start    ] GC(0) Concurrent reset
[1.693s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.693s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.693s][info][gc          ] GC(0) Concurrent reset 0.725ms
[1.693s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.701s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.701s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.701s][info][gc          ] GC(0) Pause Init Mark (unload classes) 8.120ms
[1.702s][info][gc,start    ] GC(0) Concurrent marking roots
[1.702s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.703s][info][gc          ] GC(0) Concurrent marking roots 1.550ms
[1.703s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.703s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.751s][info][gc          ] GC(0) Concurrent marking (unload classes) 47.883ms
[1.751s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.751s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.757s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 181M, Actual Free: 1847M, Max CSet: 84672K, Min Garbage: 0B
[1.757s][info][gc,ergo     ] GC(0) Collectable Garbage: 73153K (98%), Immediate: 4847K (6%), CSet: 68306K (92%)
[1.757s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 76800K, Free: 1748M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.757s][info][gc          ] GC(0) Pause Final Mark (unload classes) 6.222ms
[1.757s][info][gc,start    ] GC(0) Concurrent thread roots
[1.757s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.758s][info][gc          ] GC(0) Concurrent thread roots 0.264ms
[1.758s][info][gc,start    ] GC(0) Concurrent weak references
[1.758s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.758s][info][gc,ref      ] GC(0) Encountered references: Soft: 3956, Weak: 2096, Final: 4, Phantom: 821
[1.758s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1177, Final: 0, Phantom: 563
[1.758s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 498, Final: 0, Phantom: 230
[1.758s][info][gc          ] GC(0) Concurrent weak references 0.394ms
[1.758s][info][gc,start    ] GC(0) Concurrent weak roots
[1.758s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.765s][info][gc          ] GC(0) Concurrent weak roots 6.856ms
[1.765s][info][gc,start    ] GC(0) Concurrent cleanup
[1.765s][info][gc          ] GC(0) Concurrent cleanup 142M->137M(145M) 0.114ms
[1.765s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1741M humongous, Frag: 1% external, 0% internal; Reserve: 100835K, Max: 512K
[1.765s][info][gc,start    ] GC(0) Concurrent class unloading
[1.765s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.769s][info][gc          ] GC(0) Concurrent class unloading 4.248ms
[1.769s][info][gc,start    ] GC(0) Concurrent strong roots
[1.769s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.771s][info][gc          ] GC(0) Concurrent strong roots 1.203ms
[1.771s][info][gc,start    ] GC(0) Concurrent evacuation
[1.771s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.780s][info][gc          ] GC(0) Concurrent evacuation 9.292ms
[1.780s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.780s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 145M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.780s][info][gc          ] GC(0) Pause Init Update Refs 0.045ms
[1.780s][info][gc,start    ] GC(0) Concurrent update references
[1.780s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.813s][info][gc          ] GC(0) Concurrent update references 32.418ms
[1.813s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.813s][info][gc          ] GC(0) Concurrent update thread roots 0.543ms
[1.813s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.813s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.813s][info][gc          ] GC(0) Pause Final Update Refs 0.104ms
[1.813s][info][gc,start    ] GC(0) Concurrent cleanup
[1.813s][info][gc          ] GC(0) Concurrent cleanup 147M->72M(153M) 0.120ms
[1.813s][info][gc,ergo     ] Free: 1810M, Max: 512K regular, 1731M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.813s][info][gc,stats    ] 
[1.813s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.813s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.814s][info][gc,stats    ] 
[1.814s][info][gc,stats    ] Concurrent Reset                    747 us
[1.814s][info][gc,stats    ] Pause Init Mark (G)                8463 us
[1.814s][info][gc,stats    ] Pause Init Mark (N)                8133 us
[1.814s][info][gc,stats    ]   Update Region States               29 us
[1.814s][info][gc,stats    ] Concurrent Mark Roots              1571 us, parallelism: 1.84x
[1.814s][info][gc,stats    ]   CMR: <total>                     2888 us
[1.814s][info][gc,stats    ]   CMR: Thread Roots                1276 us, workers (us): 1126, 150, ---, ---, ---, ---, ---, ---, 
[1.814s][info][gc,stats    ]   CMR: VM Strong Roots              507 us, workers (us): 325, 183, ---, ---, ---, ---, ---, ---, 
[1.814s][info][gc,stats    ]   CMR: CLDG Roots                  1104 us, workers (us): ---, 1104, ---, ---, ---, ---, ---, ---, 
[1.814s][info][gc,stats    ] Concurrent Marking                47910 us
[1.814s][info][gc,stats    ] Pause Final Mark (G)               6278 us
[1.814s][info][gc,stats    ] Pause Final Mark (N)               6231 us
[1.814s][info][gc,stats    ]   Finish Mark                      6017 us
[1.814s][info][gc,stats    ]   Update Region States               40 us
[1.814s][info][gc,stats    ]   Choose Collection Set              97 us
[1.814s][info][gc,stats    ]   Rebuild Free Set                   17 us
[1.814s][info][gc,stats    ] Concurrent Thread Roots             279 us, parallelism: 1.28x
[1.814s][info][gc,stats    ]   CTR: <total>                      357 us
[1.814s][info][gc,stats    ]   CTR: Thread Roots                 357 us, workers (us): 219, 138, ---, ---, ---, ---, ---, ---, 
[1.814s][info][gc,stats    ] Concurrent Weak References          403 us, parallelism: 1.18x
[1.814s][info][gc,stats    ]   CWRF: <total>                     477 us
[1.814s][info][gc,stats    ]   CWRF: Weak References             477 us, workers (us): 166, 311, ---, ---, ---, ---, ---, ---, 
[1.814s][info][gc,stats    ] Concurrent Weak Roots              6880 us
[1.814s][info][gc,stats    ]   Roots                            6598 us, parallelism: 1.35x
[1.814s][info][gc,stats    ]     CWR: <total>                   8936 us
[1.814s][info][gc,stats    ]     CWR: Code Cache Roots           747 us, workers (us): 747,   0, ---, ---, ---, ---, ---, ---, 
[1.814s][info][gc,stats    ]     CWR: VM Weak Roots             8170 us, workers (us): 1995, 6175, ---, ---, ---, ---, ---, ---, 
[1.814s][info][gc,stats    ]     CWR: CLDG Roots                  19 us, workers (us):  19, ---, ---, ---, ---, ---, ---, ---, 
[1.814s][info][gc,stats    ]   Rendezvous                        238 us
[1.814s][info][gc,stats    ] Concurrent Cleanup                  123 us
[1.814s][info][gc,stats    ] Concurrent Class Unloading         4265 us
[1.814s][info][gc,stats    ]   Unlink Stale                     1466 us
[1.814s][info][gc,stats    ]     System Dictionary                39 us
[1.814s][info][gc,stats    ]     Weak Class Links                  0 us
[1.814s][info][gc,stats    ]     Code Roots                     1426 us
[1.814s][info][gc,stats    ]   Rendezvous                         46 us
[1.814s][info][gc,stats    ]   Purge Unlinked                   2717 us
[1.814s][info][gc,stats    ]     Code Roots                     2705 us
[1.814s][info][gc,stats    ]     CLDG                             11 us
[1.814s][info][gc,stats    ]     Exception Caches                  0 us
[1.814s][info][gc,stats    ] Concurrent Strong Roots            1213 us, parallelism: 0.97x
[1.814s][info][gc,stats    ]   CSR: <total>                     1177 us
[1.814s][info][gc,stats    ]   CSR: VM Strong Roots               51 us, workers (us):  41,  10, ---, ---, ---, ---, ---, ---, 
[1.814s][info][gc,stats    ]   CSR: CLDG Roots                  1126 us, workers (us): ---, 1126, ---, ---, ---, ---, ---, ---, 
[1.814s][info][gc,stats    ] Concurrent Evacuation              9318 us
[1.814s][info][gc,stats    ] Pause Init Update Refs (G)          228 us
[1.814s][info][gc,stats    ] Pause Init Update Refs (N)           55 us
[1.814s][info][gc,stats    ]   Manage GCLABs                       5 us
[1.814s][info][gc,stats    ] Concurrent Update Refs            32448 us
[1.814s][info][gc,stats    ] Concurrent Update Thread Roots      552 us
[1.814s][info][gc,stats    ] Pause Final Update Refs (G)         199 us
[1.814s][info][gc,stats    ] Pause Final Update Refs (N)         115 us
[1.814s][info][gc,stats    ]   Update Region States               36 us
[1.814s][info][gc,stats    ]   Trash Collection Set                4 us
[1.814s][info][gc,stats    ]   Rebuild Free Set                   25 us
[1.814s][info][gc,stats    ] Concurrent Cleanup                  132 us
[1.814s][info][gc,stats    ] 
[1.814s][info][gc,stats    ] Allocation pacing accrued:
[1.814s][info][gc,stats    ]       0 of  1809 ms (  0.0%): <total>
[1.814s][info][gc,stats    ]       0 of  1809 ms (  0.0%): <average total>
[1.814s][info][gc,stats    ] 
[1.814s][info][gc,metaspace] Metaspace: 21221K(21632K)->21766K(22144K) NonClass: 18869K(19072K)->19342K(19520K) Class: 2351K(2560K)->2424K(2624K)
[1.814s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.099s][info][gc          ] Cancelling GC: Stopping VM
[6.100s][info][gc,heap,exit] Heap
[6.100s][info][gc,heap,exit] Shenandoah Heap
[6.101s][info][gc,heap,exit]  1984M max, 1984M soft max, 153M committed, 85930K used
[6.101s][info][gc,heap,exit]  3969 x 512K regions
[6.101s][info][gc,heap,exit] Status: cancelled
[6.101s][info][gc,heap,exit] Reserved region:
[6.101s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.101s][info][gc,heap,exit] Collection set:
[6.101s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.101s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.101s][info][gc,heap,exit] 
[6.101s][info][gc,heap,exit]  Metaspace       used 25077K, committed 25408K, reserved 1114112K
[6.101s][info][gc,heap,exit]   class space    used 2774K, committed 2880K, reserved 1048576K
[6.101s][info][gc,stats    ] 
[6.101s][info][gc,stats    ] GC STATISTICS:
[6.101s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.101s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.101s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.101s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.101s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.101s][info][gc,stats    ] 
[6.101s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.101s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.101s][info][gc,stats    ] 
[6.101s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.101s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.101s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.101s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.101s][info][gc,stats    ] 
[6.101s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.101s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.101s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.101s][info][gc,stats    ]   Raise max pacing delay with care.
[6.101s][info][gc,stats    ] 
[6.101s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      747 us) (n =     1) (lvls, us =      746,      746,      746,      746,      747)
[6.101s][info][gc,stats    ] Pause Init Mark (G)            =    0.008 s (a =     8463 us) (n =     1) (lvls, us =     8457,     8457,     8457,     8457,     8463)
[6.101s][info][gc,stats    ] Pause Init Mark (N)            =    0.008 s (a =     8133 us) (n =     1) (lvls, us =     8125,     8125,     8125,     8125,     8133)
[6.101s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       29 us) (n =     1) (lvls, us =       29,       29,       29,       29,       29)
[6.101s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     1571 us) (n =     1) (lvls, us =     1562,     1562,     1562,     1562,     1571)
[6.101s][info][gc,stats    ]   CMR: <total>                 =    0.003 s (a =     2888 us) (n =     1) (lvls, us =     2871,     2871,     2871,     2871,     2888)
[6.101s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1276 us) (n =     1) (lvls, us =     1270,     1270,     1270,     1270,     1276)
[6.101s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      507 us) (n =     1) (lvls, us =      506,      506,      506,      506,      507)
[6.101s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1104 us) (n =     1) (lvls, us =     1094,     1094,     1094,     1094,     1104)
[6.101s][info][gc,stats    ] Concurrent Marking             =    0.048 s (a =    47910 us) (n =     1) (lvls, us =    47852,    47852,    47852,    47852,    47910)
[6.101s][info][gc,stats    ] Pause Final Mark (G)           =    0.006 s (a =     6278 us) (n =     1) (lvls, us =     6270,     6270,     6270,     6270,     6278)
[6.101s][info][gc,stats    ] Pause Final Mark (N)           =    0.006 s (a =     6231 us) (n =     1) (lvls, us =     6230,     6230,     6230,     6230,     6231)
[6.101s][info][gc,stats    ]   Finish Mark                  =    0.006 s (a =     6017 us) (n =     1) (lvls, us =     6016,     6016,     6016,     6016,     6017)
[6.101s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       40 us) (n =     1) (lvls, us =       40,       40,       40,       40,       40)
[6.101s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       97 us) (n =     1) (lvls, us =       97,       97,       97,       97,       97)
[6.101s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[6.101s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      279 us) (n =     1) (lvls, us =      277,      277,      277,      277,      279)
[6.101s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      357 us) (n =     1) (lvls, us =      355,      355,      355,      355,      357)
[6.101s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      357 us) (n =     1) (lvls, us =      355,      355,      355,      355,      357)
[6.101s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      403 us) (n =     1) (lvls, us =      402,      402,      402,      402,      403)
[6.101s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      477 us) (n =     1) (lvls, us =      477,      477,      477,      477,      477)
[6.101s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      477 us) (n =     1) (lvls, us =      477,      477,      477,      477,      477)
[6.101s][info][gc,stats    ] Concurrent Weak Roots          =    0.007 s (a =     6880 us) (n =     1) (lvls, us =     6875,     6875,     6875,     6875,     6880)
[6.101s][info][gc,stats    ]   Roots                        =    0.007 s (a =     6598 us) (n =     1) (lvls, us =     6582,     6582,     6582,     6582,     6598)
[6.101s][info][gc,stats    ]     CWR: <total>               =    0.009 s (a =     8936 us) (n =     1) (lvls, us =     8926,     8926,     8926,     8926,     8936)
[6.101s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      747 us) (n =     1) (lvls, us =      746,      746,      746,      746,      747)
[6.101s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.008 s (a =     8170 us) (n =     1) (lvls, us =     8164,     8164,     8164,     8164,     8170)
[6.101s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[6.101s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      238 us) (n =     1) (lvls, us =      236,      236,      236,      236,      238)
[6.101s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      123 us) (n =     1) (lvls, us =      121,      121,      121,      121,      123)
[6.101s][info][gc,stats    ] Concurrent Class Unloading     =    0.004 s (a =     4265 us) (n =     1) (lvls, us =     4258,     4258,     4258,     4258,     4265)
[6.101s][info][gc,stats    ]   Unlink Stale                 =    0.001 s (a =     1466 us) (n =     1) (lvls, us =     1465,     1465,     1465,     1465,     1466)
[6.101s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       39 us) (n =     1) (lvls, us =       38,       38,       38,       38,       39)
[6.101s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.101s][info][gc,stats    ]     Code Roots                 =    0.001 s (a =     1426 us) (n =     1) (lvls, us =     1426,     1426,     1426,     1426,     1426)
[6.101s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       46 us) (n =     1) (lvls, us =       46,       46,       46,       46,       46)
[6.101s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     2717 us) (n =     1) (lvls, us =     2715,     2715,     2715,     2715,     2717)
[6.101s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2705 us) (n =     1) (lvls, us =     2695,     2695,     2695,     2695,     2705)
[6.101s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       11 us) (n =     1) (lvls, us =       11,       11,       11,       11,       11)
[6.101s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.101s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1213 us) (n =     1) (lvls, us =     1211,     1211,     1211,     1211,     1213)
[6.101s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1177 us) (n =     1) (lvls, us =     1172,     1172,     1172,     1172,     1177)
[6.102s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       51 us) (n =     1) (lvls, us =       51,       51,       51,       51,       51)
[6.102s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1126 us) (n =     1) (lvls, us =     1113,     1113,     1113,     1113,     1126)
[6.102s][info][gc,stats    ] Concurrent Evacuation          =    0.009 s (a =     9318 us) (n =     1) (lvls, us =     9316,     9316,     9316,     9316,     9318)
[6.102s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      228 us) (n =     1) (lvls, us =      227,      227,      227,      227,      228)
[6.102s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       55 us) (n =     1) (lvls, us =       55,       55,       55,       55,       55)
[6.102s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.102s][info][gc,stats    ] Concurrent Update Refs         =    0.032 s (a =    32448 us) (n =     1) (lvls, us =    32422,    32422,    32422,    32422,    32448)
[6.102s][info][gc,stats    ] Concurrent Update Thread Roots =    0.001 s (a =      552 us) (n =     1) (lvls, us =      551,      551,      551,      551,      552)
[6.102s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      199 us) (n =     1) (lvls, us =      197,      197,      197,      197,      199)
[6.102s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      115 us) (n =     1) (lvls, us =      115,      115,      115,      115,      115)
[6.102s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       36 us) (n =     1) (lvls, us =       36,       36,       36,       36,       36)
[6.102s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.102s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       25 us) (n =     1) (lvls, us =       24,       24,       24,       24,       25)
[6.102s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      132 us) (n =     1) (lvls, us =      131,      131,      131,      131,      132)
[6.102s][info][gc,stats    ] 
[6.102s][info][gc,stats    ] 
[6.102s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.102s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.102s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.102s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.102s][info][gc,stats    ] 
[6.102s][info][gc,stats    ]     1 successful concurrent GCs
[6.102s][info][gc,stats    ]       0 invoked explicitly
[6.102s][info][gc,stats    ]       0 invoked implicitly
[6.102s][info][gc,stats    ] 
[6.102s][info][gc,stats    ]     0 Degenerated GCs
[6.102s][info][gc,stats    ]       0 caused by allocation failure
[6.102s][info][gc,stats    ]       0 upgraded to Full GC
[6.102s][info][gc,stats    ] 
[6.102s][info][gc,stats    ]     0 Full GCs
[6.102s][info][gc,stats    ]       0 invoked explicitly
[6.102s][info][gc,stats    ]       0 invoked implicitly
[6.102s][info][gc,stats    ]       0 caused by allocation failure
[6.102s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.102s][info][gc,stats    ] 
[6.102s][info][gc,stats    ] 
