[0.005s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.005s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.005s][info][gc] Using Shenandoah
[0.006s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.006s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.006s][info][gc,init] CPUs: 4 total, 4 available
[0.006s][info][gc,init] Memory: 7937M
[0.006s][info][gc,init] Large Page Support: Disabled
[0.006s][info][gc,init] NUMA Support: Disabled
[0.006s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.006s][info][gc,init] Heap Min Capacity: 6656K
[0.006s][info][gc,init] Heap Initial Capacity: 127488K
[0.006s][info][gc,init] Heap Max Capacity: 2032128K
[0.006s][info][gc,init] Pre-touch: Disabled
[0.006s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.006s][info][gc,init] Heuristics: Adaptive
[0.006s][info][gc,init] Heap Region Count: 3969
[0.006s][info][gc,init] Heap Region Size: 512K
[0.006s][info][gc,init] TLAB Size Max: 512K
[0.006s][info][gc,init] Humongous Object Threshold: 512K
[0.006s][info][gc,init] Parallel Workers: 8
[0.006s][info][gc,init] Concurrent Workers: 2
[0.015s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f93a7000000-0x00007f93a7c97000-0x00007f93a7c97000), size 13201408, SharedBaseAddress: 0x00007f93a7000000, ArchiveRelocationMode: 1.
[0.015s][info][gc,metaspace] Compressed class space mapped at: 0x00007f93a8000000-0x00007f93e8000000, reserved size: 1073741824
[0.015s][info][gc,metaspace] Narrow klass base: 0x00007f93a7000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.957s][info][gc          ] Trigger: Metadata GC Threshold
[1.957s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.957s][info][gc,start    ] GC(0) Concurrent reset
[1.957s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.957s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.958s][info][gc          ] GC(0) Concurrent reset 0.421ms
[1.958s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.958s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.958s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.958s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.559ms
[1.958s][info][gc,start    ] GC(0) Concurrent marking roots
[1.958s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.961s][info][gc          ] GC(0) Concurrent marking roots 2.161ms
[1.961s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.961s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[2.000s][info][gc          ] GC(0) Concurrent marking (unload classes) 39.350ms
[2.000s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[2.000s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[2.006s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 340M, Actual Free: 1846M, Max CSet: 84672K, Min Garbage: 0B
[2.006s][info][gc,ergo     ] GC(0) Collectable Garbage: 73057K (98%), Immediate: 5359K (7%), CSet: 67698K (91%)
[2.006s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 75776K, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.006s][info][gc          ] GC(0) Pause Final Mark (unload classes) 6.403ms
[2.006s][info][gc,start    ] GC(0) Concurrent thread roots
[2.006s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[2.007s][info][gc          ] GC(0) Concurrent thread roots 0.324ms
[2.007s][info][gc,start    ] GC(0) Concurrent weak references
[2.007s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[2.007s][info][gc,ref      ] GC(0) Encountered references: Soft: 3953, Weak: 2094, Final: 4, Phantom: 821
[2.007s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1324, Final: 1, Phantom: 690
[2.007s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 498, Final: 0, Phantom: 230
[2.007s][info][gc          ] GC(0) Concurrent weak references 0.448ms
[2.007s][info][gc,start    ] GC(0) Concurrent weak roots
[2.007s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[2.009s][info][gc          ] GC(0) Concurrent weak roots 1.412ms
[2.009s][info][gc,start    ] GC(0) Concurrent cleanup
[2.009s][info][gc          ] GC(0) Concurrent cleanup 142M->136M(145M) 0.095ms
[2.009s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1741M humongous, Frag: 1% external, 0% internal; Reserve: 100986K, Max: 512K
[2.009s][info][gc,start    ] GC(0) Concurrent class unloading
[2.009s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[2.015s][info][gc          ] GC(0) Concurrent class unloading 6.470ms
[2.015s][info][gc,start    ] GC(0) Concurrent strong roots
[2.015s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[2.017s][info][gc          ] GC(0) Concurrent strong roots 1.572ms
[2.017s][info][gc,start    ] GC(0) Concurrent evacuation
[2.017s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[2.024s][info][gc          ] GC(0) Concurrent evacuation 7.387ms
[2.025s][info][gc,start    ] GC(0) Pause Init Update Refs
[2.025s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 145M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.025s][info][gc          ] GC(0) Pause Init Update Refs 0.028ms
[2.025s][info][gc,start    ] GC(0) Concurrent update references
[2.025s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[2.043s][info][gc          ] GC(0) Concurrent update references 18.229ms
[2.043s][info][gc,start    ] GC(0) Concurrent update thread roots
[2.043s][info][gc          ] GC(0) Concurrent update thread roots 0.301ms
[2.043s][info][gc,start    ] GC(0) Pause Final Update Refs
[2.043s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[2.043s][info][gc          ] GC(0) Pause Final Update Refs 0.079ms
[2.043s][info][gc,start    ] GC(0) Concurrent cleanup
[2.043s][info][gc          ] GC(0) Concurrent cleanup 146M->72M(153M) 0.070ms
[2.043s][info][gc,ergo     ] Free: 1810M, Max: 512K regular, 1732M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[2.043s][info][gc,stats    ] 
[2.043s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[2.043s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[2.043s][info][gc,stats    ] 
[2.043s][info][gc,stats    ] Concurrent Reset                    439 us
[2.043s][info][gc,stats    ] Pause Init Mark (G)                 785 us
[2.043s][info][gc,stats    ] Pause Init Mark (N)                 588 us
[2.043s][info][gc,stats    ]   Update Region States               30 us
[2.043s][info][gc,stats    ] Concurrent Mark Roots              2182 us, parallelism: 1.66x
[2.043s][info][gc,stats    ]   CMR: <total>                     3629 us
[2.043s][info][gc,stats    ]   CMR: Thread Roots                1028 us, workers (us): 1027,   0, ---, ---, ---, ---, ---, ---, 
[2.044s][info][gc,stats    ]   CMR: VM Strong Roots              791 us, workers (us): 537, 254, ---, ---, ---, ---, ---, ---, 
[2.044s][info][gc,stats    ]   CMR: CLDG Roots                  1810 us, workers (us): ---, 1810, ---, ---, ---, ---, ---, ---, 
[2.044s][info][gc,stats    ] Concurrent Marking                39374 us
[2.044s][info][gc,stats    ] Pause Final Mark (G)               6516 us
[2.044s][info][gc,stats    ] Pause Final Mark (N)               6410 us
[2.044s][info][gc,stats    ]   Finish Mark                      6220 us
[2.044s][info][gc,stats    ]   Update Region States               36 us
[2.044s][info][gc,stats    ]   Choose Collection Set              98 us
[2.044s][info][gc,stats    ]   Rebuild Free Set                   16 us
[2.044s][info][gc,stats    ] Concurrent Thread Roots             339 us, parallelism: 1.20x
[2.044s][info][gc,stats    ]   CTR: <total>                      407 us
[2.044s][info][gc,stats    ]   CTR: Thread Roots                 407 us, workers (us): 295, 112, ---, ---, ---, ---, ---, ---, 
[2.044s][info][gc,stats    ] Concurrent Weak References          456 us, parallelism: 0.86x
[2.044s][info][gc,stats    ]   CWRF: <total>                     391 us
[2.044s][info][gc,stats    ]   CWRF: Weak References             391 us, workers (us):  34, 357, ---, ---, ---, ---, ---, ---, 
[2.044s][info][gc,stats    ] Concurrent Weak Roots              1426 us
[2.044s][info][gc,stats    ]   Roots                            1360 us, parallelism: 1.92x
[2.044s][info][gc,stats    ]     CWR: <total>                   2613 us
[2.044s][info][gc,stats    ]     CWR: Code Cache Roots           796 us, workers (us): 400, 397, ---, ---, ---, ---, ---, ---, 
[2.044s][info][gc,stats    ]     CWR: VM Weak Roots             1801 us, workers (us): 896, 905, ---, ---, ---, ---, ---, ---, 
[2.044s][info][gc,stats    ]     CWR: CLDG Roots                  15 us, workers (us):  15, ---, ---, ---, ---, ---, ---, ---, 
[2.044s][info][gc,stats    ]   Rendezvous                         34 us
[2.044s][info][gc,stats    ] Concurrent Cleanup                  103 us
[2.044s][info][gc,stats    ] Concurrent Class Unloading         6543 us
[2.044s][info][gc,stats    ]   Unlink Stale                     3159 us
[2.044s][info][gc,stats    ]     System Dictionary                47 us
[2.044s][info][gc,stats    ]     Weak Class Links                  0 us
[2.044s][info][gc,stats    ]     Code Roots                     3109 us
[2.044s][info][gc,stats    ]   Rendezvous                        124 us
[2.044s][info][gc,stats    ]   Purge Unlinked                   3132 us
[2.044s][info][gc,stats    ]     Code Roots                     3123 us
[2.044s][info][gc,stats    ]     CLDG                              9 us
[2.044s][info][gc,stats    ]     Exception Caches                  0 us
[2.044s][info][gc,stats    ] Concurrent Strong Roots            1589 us, parallelism: 0.94x
[2.044s][info][gc,stats    ]   CSR: <total>                     1492 us
[2.044s][info][gc,stats    ]   CSR: VM Strong Roots               27 us, workers (us):  26,   1, ---, ---, ---, ---, ---, ---, 
[2.044s][info][gc,stats    ]   CSR: CLDG Roots                  1466 us, workers (us): 1466, ---, ---, ---, ---, ---, ---, ---, 
[2.044s][info][gc,stats    ] Concurrent Evacuation              7410 us
[2.044s][info][gc,stats    ] Pause Init Update Refs (G)          197 us
[2.044s][info][gc,stats    ] Pause Init Update Refs (N)           37 us
[2.044s][info][gc,stats    ]   Manage GCLABs                       4 us
[2.044s][info][gc,stats    ] Concurrent Update Refs            18253 us
[2.044s][info][gc,stats    ] Concurrent Update Thread Roots      315 us
[2.044s][info][gc,stats    ] Pause Final Update Refs (G)         119 us
[2.044s][info][gc,stats    ] Pause Final Update Refs (N)          90 us
[2.044s][info][gc,stats    ]   Update Region States               28 us
[2.044s][info][gc,stats    ]   Trash Collection Set                4 us
[2.044s][info][gc,stats    ]   Rebuild Free Set                   20 us
[2.044s][info][gc,stats    ] Concurrent Cleanup                   82 us
[2.044s][info][gc,stats    ] 
[2.044s][info][gc,stats    ] Allocation pacing accrued:
[2.044s][info][gc,stats    ]       0 of  2038 ms (  0.0%): <total>
[2.044s][info][gc,stats    ]       0 of  2038 ms (  0.0%): <average total>
[2.044s][info][gc,stats    ] 
[2.044s][info][gc,metaspace] Metaspace: 21239K(21568K)->22031K(22400K) NonClass: 18890K(19072K)->19579K(19776K) Class: 2348K(2496K)->2451K(2624K)
[2.044s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.343s][info][gc          ] Cancelling GC: Stopping VM
[6.343s][info][gc,heap,exit] Heap
[6.343s][info][gc,heap,exit] Shenandoah Heap
[6.343s][info][gc,heap,exit]  1984M max, 1984M soft max, 153M committed, 86020K used
[6.343s][info][gc,heap,exit]  3969 x 512K regions
[6.343s][info][gc,heap,exit] Status: cancelled
[6.343s][info][gc,heap,exit] Reserved region:
[6.343s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.343s][info][gc,heap,exit] Collection set:
[6.343s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.343s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.343s][info][gc,heap,exit] 
[6.343s][info][gc,heap,exit]  Metaspace       used 25104K, committed 25408K, reserved 1114112K
[6.343s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.343s][info][gc,stats    ] 
[6.343s][info][gc,stats    ] GC STATISTICS:
[6.343s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.343s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.343s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.343s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.343s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.343s][info][gc,stats    ] 
[6.343s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.343s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.343s][info][gc,stats    ] 
[6.343s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.343s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.343s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.343s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.343s][info][gc,stats    ] 
[6.343s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.343s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.343s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.343s][info][gc,stats    ]   Raise max pacing delay with care.
[6.343s][info][gc,stats    ] 
[6.343s][info][gc,stats    ] Concurrent Reset               =    0.000 s (a =      439 us) (n =     1) (lvls, us =      438,      438,      438,      438,      439)
[6.343s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      785 us) (n =     1) (lvls, us =      783,      783,      783,      783,      785)
[6.343s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      588 us) (n =     1) (lvls, us =      586,      586,      586,      586,      588)
[6.343s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       30 us) (n =     1) (lvls, us =       30,       30,       30,       30,       30)
[6.343s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     2182 us) (n =     1) (lvls, us =     2168,     2168,     2168,     2168,     2182)
[6.343s][info][gc,stats    ]   CMR: <total>                 =    0.004 s (a =     3629 us) (n =     1) (lvls, us =     3613,     3613,     3613,     3613,     3629)
[6.343s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1028 us) (n =     1) (lvls, us =     1016,     1016,     1016,     1016,     1028)
[6.343s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      791 us) (n =     1) (lvls, us =      791,      791,      791,      791,      791)
[6.343s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     1810 us) (n =     1) (lvls, us =     1797,     1797,     1797,     1797,     1810)
[6.343s][info][gc,stats    ] Concurrent Marking             =    0.039 s (a =    39374 us) (n =     1) (lvls, us =    39258,    39258,    39258,    39258,    39374)
[6.343s][info][gc,stats    ] Pause Final Mark (G)           =    0.007 s (a =     6516 us) (n =     1) (lvls, us =     6504,     6504,     6504,     6504,     6516)
[6.343s][info][gc,stats    ] Pause Final Mark (N)           =    0.006 s (a =     6410 us) (n =     1) (lvls, us =     6406,     6406,     6406,     6406,     6410)
[6.344s][info][gc,stats    ]   Finish Mark                  =    0.006 s (a =     6220 us) (n =     1) (lvls, us =     6211,     6211,     6211,     6211,     6220)
[6.344s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       36 us) (n =     1) (lvls, us =       36,       36,       36,       36,       36)
[6.344s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       98 us) (n =     1) (lvls, us =       98,       98,       98,       98,       98)
[6.344s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[6.344s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      339 us) (n =     1) (lvls, us =      338,      338,      338,      338,      339)
[6.344s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      407 us) (n =     1) (lvls, us =      406,      406,      406,      406,      407)
[6.344s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      407 us) (n =     1) (lvls, us =      406,      406,      406,      406,      407)
[6.344s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      456 us) (n =     1) (lvls, us =      455,      455,      455,      455,      456)
[6.344s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      391 us) (n =     1) (lvls, us =      391,      391,      391,      391,      391)
[6.344s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      391 us) (n =     1) (lvls, us =      391,      391,      391,      391,      391)
[6.344s][info][gc,stats    ] Concurrent Weak Roots          =    0.001 s (a =     1426 us) (n =     1) (lvls, us =     1406,     1406,     1406,     1406,     1426)
[6.344s][info][gc,stats    ]   Roots                        =    0.001 s (a =     1360 us) (n =     1) (lvls, us =     1348,     1348,     1348,     1348,     1360)
[6.344s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     2613 us) (n =     1) (lvls, us =     2598,     2598,     2598,     2598,     2613)
[6.344s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      796 us) (n =     1) (lvls, us =      795,      795,      795,      795,      796)
[6.344s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1801 us) (n =     1) (lvls, us =     1797,     1797,     1797,     1797,     1801)
[6.344s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       15 us) (n =     1) (lvls, us =       15,       15,       15,       15,       15)
[6.344s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       34 us) (n =     1) (lvls, us =       34,       34,       34,       34,       34)
[6.344s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      103 us) (n =     1) (lvls, us =      102,      102,      102,      102,      103)
[6.344s][info][gc,stats    ] Concurrent Class Unloading     =    0.007 s (a =     6543 us) (n =     1) (lvls, us =     6543,     6543,     6543,     6543,     6543)
[6.344s][info][gc,stats    ]   Unlink Stale                 =    0.003 s (a =     3159 us) (n =     1) (lvls, us =     3145,     3145,     3145,     3145,     3159)
[6.344s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       47 us) (n =     1) (lvls, us =       47,       47,       47,       47,       47)
[6.344s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.344s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     3109 us) (n =     1) (lvls, us =     3105,     3105,     3105,     3105,     3109)
[6.344s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      124 us) (n =     1) (lvls, us =      123,      123,      123,      123,      124)
[6.344s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     3132 us) (n =     1) (lvls, us =     3125,     3125,     3125,     3125,     3132)
[6.344s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     3123 us) (n =     1) (lvls, us =     3105,     3105,     3105,     3105,     3123)
[6.344s][info][gc,stats    ]     CLDG                       =    0.000 s (a =        9 us) (n =     1) (lvls, us =        9,        9,        9,        9,        9)
[6.344s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.344s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     1589 us) (n =     1) (lvls, us =     1582,     1582,     1582,     1582,     1589)
[6.344s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1492 us) (n =     1) (lvls, us =     1484,     1484,     1484,     1484,     1492)
[6.344s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       27 us) (n =     1) (lvls, us =       27,       27,       27,       27,       27)
[6.344s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1466 us) (n =     1) (lvls, us =     1465,     1465,     1465,     1465,     1466)
[6.344s][info][gc,stats    ] Concurrent Evacuation          =    0.007 s (a =     7410 us) (n =     1) (lvls, us =     7402,     7402,     7402,     7402,     7410)
[6.344s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      197 us) (n =     1) (lvls, us =      197,      197,      197,      197,      197)
[6.344s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       37 us) (n =     1) (lvls, us =       37,       37,       37,       37,       37)
[6.344s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.344s][info][gc,stats    ] Concurrent Update Refs         =    0.018 s (a =    18253 us) (n =     1) (lvls, us =    18164,    18164,    18164,    18164,    18253)
[6.344s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      315 us) (n =     1) (lvls, us =      314,      314,      314,      314,      315)
[6.344s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      119 us) (n =     1) (lvls, us =      117,      117,      117,      117,      119)
[6.344s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =       90 us) (n =     1) (lvls, us =       90,       90,       90,       90,       90)
[6.344s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       28 us) (n =     1) (lvls, us =       28,       28,       28,       28,       28)
[6.344s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.344s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[6.344s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       82 us) (n =     1) (lvls, us =       82,       82,       82,       82,       82)
[6.344s][info][gc,stats    ] 
[6.344s][info][gc,stats    ] 
[6.344s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.344s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.344s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.344s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.344s][info][gc,stats    ] 
[6.344s][info][gc,stats    ]     1 successful concurrent GCs
[6.344s][info][gc,stats    ]       0 invoked explicitly
[6.344s][info][gc,stats    ]       0 invoked implicitly
[6.344s][info][gc,stats    ] 
[6.344s][info][gc,stats    ]     0 Degenerated GCs
[6.344s][info][gc,stats    ]       0 caused by allocation failure
[6.345s][info][gc,stats    ]       0 upgraded to Full GC
[6.345s][info][gc,stats    ] 
[6.345s][info][gc,stats    ]     0 Full GCs
[6.345s][info][gc,stats    ]       0 invoked explicitly
[6.345s][info][gc,stats    ]       0 invoked implicitly
[6.345s][info][gc,stats    ]       0 caused by allocation failure
[6.345s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.345s][info][gc,stats    ] 
[6.345s][info][gc,stats    ] 
