[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.005s][info][gc] Using Shenandoah
[0.005s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.007s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.007s][info][gc,init] CPUs: 4 total, 4 available
[0.007s][info][gc,init] Memory: 7937M
[0.007s][info][gc,init] Large Page Support: Disabled
[0.007s][info][gc,init] NUMA Support: Disabled
[0.007s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.007s][info][gc,init] Heap Min Capacity: 6656K
[0.007s][info][gc,init] Heap Initial Capacity: 127488K
[0.007s][info][gc,init] Heap Max Capacity: 2032128K
[0.007s][info][gc,init] Pre-touch: Disabled
[0.007s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.007s][info][gc,init] Heuristics: Adaptive
[0.007s][info][gc,init] Heap Region Count: 3969
[0.007s][info][gc,init] Heap Region Size: 512K
[0.007s][info][gc,init] TLAB Size Max: 512K
[0.007s][info][gc,init] Humongous Object Threshold: 512K
[0.007s][info][gc,init] Parallel Workers: 8
[0.007s][info][gc,init] Concurrent Workers: 2
[0.015s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f525b000000-0x00007f525bc97000-0x00007f525bc97000), size 13201408, SharedBaseAddress: 0x00007f525b000000, ArchiveRelocationMode: 1.
[0.015s][info][gc,metaspace] Compressed class space mapped at: 0x00007f525c000000-0x00007f529c000000, reserved size: 1073741824
[0.015s][info][gc,metaspace] Narrow klass base: 0x00007f525b000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[2.123s][info][gc          ] Trigger: Metadata GC Threshold
[2.123s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[2.123s][info][gc,start    ] GC(0) Concurrent reset
[2.123s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[2.123s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[2.124s][info][gc          ] GC(0) Concurrent reset 0.408ms
[2.124s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[2.124s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[2.124s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[2.124s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.521ms
[2.124s][info][gc,start    ] GC(0) Concurrent marking roots
[2.124s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[2.126s][info][gc          ] GC(0) Concurrent marking roots 1.624ms
[2.126s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[2.126s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[2.167s][info][gc          ] GC(0) Concurrent marking (unload classes) 40.859ms
[2.167s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[2.167s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[2.173s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 221M, Actual Free: 1846M, Max CSet: 84672K, Min Garbage: 0B
[2.173s][info][gc,ergo     ] GC(0) Collectable Garbage: 72645K (98%), Immediate: 4847K (6%), CSet: 67798K (92%)
[2.173s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 76800K, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.173s][info][gc          ] GC(0) Pause Final Mark (unload classes) 6.322ms
[2.173s][info][gc,start    ] GC(0) Concurrent thread roots
[2.173s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[2.174s][info][gc          ] GC(0) Concurrent thread roots 0.291ms
[2.174s][info][gc,start    ] GC(0) Concurrent weak references
[2.174s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[2.174s][info][gc,ref      ] GC(0) Encountered references: Soft: 3953, Weak: 2094, Final: 4, Phantom: 821
[2.174s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1268, Final: 0, Phantom: 434
[2.174s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 498, Final: 0, Phantom: 230
[2.174s][info][gc          ] GC(0) Concurrent weak references 0.444ms
[2.174s][info][gc,start    ] GC(0) Concurrent weak roots
[2.174s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[2.178s][info][gc          ] GC(0) Concurrent weak roots 4.176ms
[2.178s][info][gc,start    ] GC(0) Concurrent cleanup
[2.179s][info][gc          ] GC(0) Concurrent cleanup 143M->138M(146M) 0.133ms
[2.179s][info][gc,ergo     ] GC(0) Free: 1745M, Max: 512K regular, 1740M humongous, Frag: 1% external, 0% internal; Reserve: 100603K, Max: 512K
[2.179s][info][gc,start    ] GC(0) Concurrent class unloading
[2.179s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[2.185s][info][gc          ] GC(0) Concurrent class unloading 6.078ms
[2.185s][info][gc,start    ] GC(0) Concurrent strong roots
[2.185s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[2.186s][info][gc          ] GC(0) Concurrent strong roots 1.364ms
[2.186s][info][gc,start    ] GC(0) Concurrent evacuation
[2.186s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[2.192s][info][gc          ] GC(0) Concurrent evacuation 6.153ms
[2.192s][info][gc,start    ] GC(0) Pause Init Update Refs
[2.192s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 147M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.192s][info][gc          ] GC(0) Pause Init Update Refs 0.043ms
[2.192s][info][gc,start    ] GC(0) Concurrent update references
[2.192s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[2.213s][info][gc          ] GC(0) Concurrent update references 20.202ms
[2.213s][info][gc,start    ] GC(0) Concurrent update thread roots
[2.213s][info][gc          ] GC(0) Concurrent update thread roots 0.157ms
[2.213s][info][gc,start    ] GC(0) Pause Final Update Refs
[2.213s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[2.213s][info][gc          ] GC(0) Pause Final Update Refs 0.104ms
[2.213s][info][gc,start    ] GC(0) Concurrent cleanup
[2.213s][info][gc          ] GC(0) Concurrent cleanup 147M->72M(154M) 0.101ms
[2.213s][info][gc,ergo     ] Free: 1809M, Max: 512K regular, 1730M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[2.213s][info][gc,stats    ] 
[2.213s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[2.213s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[2.213s][info][gc,stats    ] 
[2.213s][info][gc,stats    ] Concurrent Reset                    451 us
[2.213s][info][gc,stats    ] Pause Init Mark (G)                 757 us
[2.213s][info][gc,stats    ] Pause Init Mark (N)                 533 us
[2.213s][info][gc,stats    ]   Update Region States               23 us
[2.213s][info][gc,stats    ] Concurrent Mark Roots              1673 us, parallelism: 1.47x
[2.213s][info][gc,stats    ]   CMR: <total>                     2467 us
[2.213s][info][gc,stats    ]   CMR: Thread Roots                1093 us, workers (us): 925, 168, ---, ---, ---, ---, ---, ---, 
[2.213s][info][gc,stats    ]   CMR: VM Strong Roots              423 us, workers (us): 293, 130, ---, ---, ---, ---, ---, ---, 
[2.213s][info][gc,stats    ]   CMR: CLDG Roots                   951 us, workers (us): ---, 951, ---, ---, ---, ---, ---, ---, 
[2.213s][info][gc,stats    ] Concurrent Marking                40892 us
[2.213s][info][gc,stats    ] Pause Final Mark (G)               6445 us
[2.213s][info][gc,stats    ] Pause Final Mark (N)               6331 us
[2.213s][info][gc,stats    ]   Finish Mark                      6115 us
[2.213s][info][gc,stats    ]   Update Region States               40 us
[2.213s][info][gc,stats    ]   Choose Collection Set              99 us
[2.213s][info][gc,stats    ]   Rebuild Free Set                   17 us
[2.213s][info][gc,stats    ] Concurrent Thread Roots             305 us, parallelism: 1.29x
[2.214s][info][gc,stats    ]   CTR: <total>                      393 us
[2.214s][info][gc,stats    ]   CTR: Thread Roots                 393 us, workers (us): 252, 141, ---, ---, ---, ---, ---, ---, 
[2.214s][info][gc,stats    ] Concurrent Weak References          454 us, parallelism: 0.80x
[2.214s][info][gc,stats    ]   CWRF: <total>                     362 us
[2.214s][info][gc,stats    ]   CWRF: Weak References             362 us, workers (us): 362,   1, ---, ---, ---, ---, ---, ---, 
[2.214s][info][gc,stats    ] Concurrent Weak Roots              4201 us
[2.214s][info][gc,stats    ]   Roots                            2659 us, parallelism: 0.98x
[2.214s][info][gc,stats    ]     CWR: <total>                   2594 us
[2.214s][info][gc,stats    ]     CWR: Code Cache Roots           743 us, workers (us): 743,   0, ---, ---, ---, ---, ---, ---, 
[2.214s][info][gc,stats    ]     CWR: VM Weak Roots             1832 us, workers (us): 1831,   1, ---, ---, ---, ---, ---, ---, 
[2.214s][info][gc,stats    ]     CWR: CLDG Roots                  19 us, workers (us):  19, ---, ---, ---, ---, ---, ---, ---, 
[2.214s][info][gc,stats    ]   Rendezvous                       1483 us
[2.214s][info][gc,stats    ] Concurrent Cleanup                  143 us
[2.214s][info][gc,stats    ] Concurrent Class Unloading         6095 us
[2.214s][info][gc,stats    ]   Unlink Stale                     1578 us
[2.214s][info][gc,stats    ]     System Dictionary                64 us
[2.214s][info][gc,stats    ]     Weak Class Links                  0 us
[2.214s][info][gc,stats    ]     Code Roots                     1512 us
[2.214s][info][gc,stats    ]   Rendezvous                         37 us
[2.214s][info][gc,stats    ]   Purge Unlinked                   4425 us
[2.214s][info][gc,stats    ]     Code Roots                     4414 us
[2.214s][info][gc,stats    ]     CLDG                             11 us
[2.214s][info][gc,stats    ]     Exception Caches                  0 us
[2.214s][info][gc,stats    ] Concurrent Strong Roots            1375 us, parallelism: 0.93x
[2.214s][info][gc,stats    ]   CSR: <total>                     1276 us
[2.214s][info][gc,stats    ]   CSR: VM Strong Roots               20 us, workers (us):  14,   6, ---, ---, ---, ---, ---, ---, 
[2.214s][info][gc,stats    ]   CSR: CLDG Roots                  1256 us, workers (us): ---, 1256, ---, ---, ---, ---, ---, ---, 
[2.214s][info][gc,stats    ] Concurrent Evacuation              6177 us
[2.214s][info][gc,stats    ] Pause Init Update Refs (G)          176 us
[2.214s][info][gc,stats    ] Pause Init Update Refs (N)           53 us
[2.214s][info][gc,stats    ]   Manage GCLABs                       5 us
[2.214s][info][gc,stats    ] Concurrent Update Refs            20234 us
[2.214s][info][gc,stats    ] Concurrent Update Thread Roots      168 us
[2.214s][info][gc,stats    ] Pause Final Update Refs (G)         227 us
[2.214s][info][gc,stats    ] Pause Final Update Refs (N)         117 us
[2.214s][info][gc,stats    ]   Update Region States               29 us
[2.214s][info][gc,stats    ]   Trash Collection Set                5 us
[2.214s][info][gc,stats    ]   Rebuild Free Set                   23 us
[2.214s][info][gc,stats    ] Concurrent Cleanup                  112 us
[2.214s][info][gc,stats    ] 
[2.214s][info][gc,stats    ] Allocation pacing accrued:
[2.214s][info][gc,stats    ]       0 of  2208 ms (  0.0%): <total>
[2.214s][info][gc,stats    ]       0 of  2208 ms (  0.0%): <average total>
[2.214s][info][gc,stats    ] 
[2.214s][info][gc,metaspace] Metaspace: 21244K(21568K)->22273K(22592K) NonClass: 18895K(19072K)->19783K(19968K) Class: 2348K(2496K)->2490K(2624K)
[2.214s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.490s][info][gc          ] Cancelling GC: Stopping VM
[6.491s][info][gc,heap,exit] Heap
[6.491s][info][gc,heap,exit] Shenandoah Heap
[6.491s][info][gc,heap,exit]  1984M max, 1984M soft max, 154M committed, 86422K used
[6.491s][info][gc,heap,exit]  3969 x 512K regions
[6.491s][info][gc,heap,exit] Status: cancelled
[6.491s][info][gc,heap,exit] Reserved region:
[6.491s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.491s][info][gc,heap,exit] Collection set:
[6.491s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.491s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.491s][info][gc,heap,exit] 
[6.491s][info][gc,heap,exit]  Metaspace       used 25101K, committed 25408K, reserved 1114112K
[6.491s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.491s][info][gc,stats    ] 
[6.491s][info][gc,stats    ] GC STATISTICS:
[6.491s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.491s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.491s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.491s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.491s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.491s][info][gc,stats    ] 
[6.491s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.491s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.491s][info][gc,stats    ] 
[6.491s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.491s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.491s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.491s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.491s][info][gc,stats    ] 
[6.491s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.491s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.491s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.491s][info][gc,stats    ]   Raise max pacing delay with care.
[6.491s][info][gc,stats    ] 
[6.491s][info][gc,stats    ] Concurrent Reset               =    0.000 s (a =      451 us) (n =     1) (lvls, us =      449,      449,      449,      449,      451)
[6.491s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      757 us) (n =     1) (lvls, us =      756,      756,      756,      756,      757)
[6.491s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      533 us) (n =     1) (lvls, us =      531,      531,      531,      531,      533)
[6.491s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       23 us) (n =     1) (lvls, us =       23,       23,       23,       23,       23)
[6.491s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     1673 us) (n =     1) (lvls, us =     1660,     1660,     1660,     1660,     1673)
[6.491s][info][gc,stats    ]   CMR: <total>                 =    0.002 s (a =     2467 us) (n =     1) (lvls, us =     2461,     2461,     2461,     2461,     2467)
[6.491s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1093 us) (n =     1) (lvls, us =     1074,     1074,     1074,     1074,     1093)
[6.491s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.000 s (a =      423 us) (n =     1) (lvls, us =      422,      422,      422,      422,      423)
[6.491s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =      951 us) (n =     1) (lvls, us =      949,      949,      949,      949,      951)
[6.491s][info][gc,stats    ] Concurrent Marking             =    0.041 s (a =    40892 us) (n =     1) (lvls, us =    40820,    40820,    40820,    40820,    40892)
[6.491s][info][gc,stats    ] Pause Final Mark (G)           =    0.006 s (a =     6445 us) (n =     1) (lvls, us =     6426,     6426,     6426,     6426,     6445)
[6.491s][info][gc,stats    ] Pause Final Mark (N)           =    0.006 s (a =     6331 us) (n =     1) (lvls, us =     6328,     6328,     6328,     6328,     6331)
[6.491s][info][gc,stats    ]   Finish Mark                  =    0.006 s (a =     6115 us) (n =     1) (lvls, us =     6113,     6113,     6113,     6113,     6115)
[6.491s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       40 us) (n =     1) (lvls, us =       40,       40,       40,       40,       40)
[6.491s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       99 us) (n =     1) (lvls, us =       98,       98,       98,       98,       99)
[6.491s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[6.491s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      305 us) (n =     1) (lvls, us =      303,      303,      303,      303,      305)
[6.491s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      393 us) (n =     1) (lvls, us =      393,      393,      393,      393,      393)
[6.491s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      393 us) (n =     1) (lvls, us =      393,      393,      393,      393,      393)
[6.491s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      454 us) (n =     1) (lvls, us =      453,      453,      453,      453,      454)
[6.491s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      362 us) (n =     1) (lvls, us =      361,      361,      361,      361,      362)
[6.491s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      362 us) (n =     1) (lvls, us =      361,      361,      361,      361,      362)
[6.491s][info][gc,stats    ] Concurrent Weak Roots          =    0.004 s (a =     4201 us) (n =     1) (lvls, us =     4199,     4199,     4199,     4199,     4201)
[6.491s][info][gc,stats    ]   Roots                        =    0.003 s (a =     2659 us) (n =     1) (lvls, us =     2656,     2656,     2656,     2656,     2659)
[6.491s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     2594 us) (n =     1) (lvls, us =     2578,     2578,     2578,     2578,     2594)
[6.491s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      743 us) (n =     1) (lvls, us =      742,      742,      742,      742,      743)
[6.491s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1832 us) (n =     1) (lvls, us =     1816,     1816,     1816,     1816,     1832)
[6.491s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[6.491s][info][gc,stats    ]   Rendezvous                   =    0.001 s (a =     1483 us) (n =     1) (lvls, us =     1465,     1465,     1465,     1465,     1483)
[6.491s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      143 us) (n =     1) (lvls, us =      143,      143,      143,      143,      143)
[6.491s][info][gc,stats    ] Concurrent Class Unloading     =    0.006 s (a =     6095 us) (n =     1) (lvls, us =     6094,     6094,     6094,     6094,     6095)
[6.491s][info][gc,stats    ]   Unlink Stale                 =    0.002 s (a =     1578 us) (n =     1) (lvls, us =     1562,     1562,     1562,     1562,     1578)
[6.491s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       64 us) (n =     1) (lvls, us =       64,       64,       64,       64,       64)
[6.491s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.492s][info][gc,stats    ]     Code Roots                 =    0.002 s (a =     1512 us) (n =     1) (lvls, us =     1504,     1504,     1504,     1504,     1512)
[6.492s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       37 us) (n =     1) (lvls, us =       37,       37,       37,       37,       37)
[6.492s][info][gc,stats    ]   Purge Unlinked               =    0.004 s (a =     4425 us) (n =     1) (lvls, us =     4414,     4414,     4414,     4414,     4425)
[6.492s][info][gc,stats    ]     Code Roots                 =    0.004 s (a =     4414 us) (n =     1) (lvls, us =     4395,     4395,     4395,     4395,     4414)
[6.492s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       11 us) (n =     1) (lvls, us =       11,       11,       11,       11,       11)
[6.492s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.492s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1375 us) (n =     1) (lvls, us =     1367,     1367,     1367,     1367,     1375)
[6.492s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1276 us) (n =     1) (lvls, us =     1270,     1270,     1270,     1270,     1276)
[6.492s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[6.492s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1256 us) (n =     1) (lvls, us =     1250,     1250,     1250,     1250,     1256)
[6.492s][info][gc,stats    ] Concurrent Evacuation          =    0.006 s (a =     6177 us) (n =     1) (lvls, us =     6172,     6172,     6172,     6172,     6177)
[6.492s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      176 us) (n =     1) (lvls, us =      174,      174,      174,      174,      176)
[6.492s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       53 us) (n =     1) (lvls, us =       53,       53,       53,       53,       53)
[6.492s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.492s][info][gc,stats    ] Concurrent Update Refs         =    0.020 s (a =    20234 us) (n =     1) (lvls, us =    20117,    20117,    20117,    20117,    20234)
[6.492s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      168 us) (n =     1) (lvls, us =      166,      166,      166,      166,      168)
[6.492s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      227 us) (n =     1) (lvls, us =      227,      227,      227,      227,      227)
[6.492s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      117 us) (n =     1) (lvls, us =      115,      115,      115,      115,      117)
[6.492s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       29 us) (n =     1) (lvls, us =       29,       29,       29,       29,       29)
[6.492s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.492s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       23 us) (n =     1) (lvls, us =       23,       23,       23,       23,       23)
[6.492s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      112 us) (n =     1) (lvls, us =      111,      111,      111,      111,      112)
[6.492s][info][gc,stats    ] 
[6.492s][info][gc,stats    ] 
[6.492s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.492s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.492s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.492s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.492s][info][gc,stats    ] 
[6.492s][info][gc,stats    ]     1 successful concurrent GCs
[6.492s][info][gc,stats    ]       0 invoked explicitly
[6.492s][info][gc,stats    ]       0 invoked implicitly
[6.492s][info][gc,stats    ] 
[6.492s][info][gc,stats    ]     0 Degenerated GCs
[6.492s][info][gc,stats    ]       0 caused by allocation failure
[6.492s][info][gc,stats    ]       0 upgraded to Full GC
[6.492s][info][gc,stats    ] 
[6.492s][info][gc,stats    ]     0 Full GCs
[6.492s][info][gc,stats    ]       0 invoked explicitly
[6.492s][info][gc,stats    ]       0 invoked implicitly
[6.492s][info][gc,stats    ]       0 caused by allocation failure
[6.492s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.492s][info][gc,stats    ] 
[6.492s][info][gc,stats    ] 
