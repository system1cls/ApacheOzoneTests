[0.006s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.006s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.007s][info][gc] Using Shenandoah
[0.008s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.008s][info][gc,init] CPUs: 4 total, 4 available
[0.008s][info][gc,init] Memory: 7937M
[0.008s][info][gc,init] Large Page Support: Disabled
[0.008s][info][gc,init] NUMA Support: Disabled
[0.008s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.008s][info][gc,init] Heap Min Capacity: 6656K
[0.008s][info][gc,init] Heap Initial Capacity: 127488K
[0.008s][info][gc,init] Heap Max Capacity: 2032128K
[0.008s][info][gc,init] Pre-touch: Disabled
[0.008s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.008s][info][gc,init] Heuristics: Adaptive
[0.008s][info][gc,init] Heap Region Count: 3969
[0.008s][info][gc,init] Heap Region Size: 512K
[0.008s][info][gc,init] TLAB Size Max: 512K
[0.008s][info][gc,init] Humongous Object Threshold: 512K
[0.008s][info][gc,init] Parallel Workers: 8
[0.008s][info][gc,init] Concurrent Workers: 2
[0.017s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f5993000000-0x00007f5993c97000-0x00007f5993c97000), size 13201408, SharedBaseAddress: 0x00007f5993000000, ArchiveRelocationMode: 1.
[0.017s][info][gc,metaspace] Compressed class space mapped at: 0x00007f5994000000-0x00007f59d4000000, reserved size: 1073741824
[0.017s][info][gc,metaspace] Narrow klass base: 0x00007f5993000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.309s][info][gc          ] Trigger: Metadata GC Threshold
[1.310s][info][gc,ergo     ] Free: 1790M, Max: 512K regular, 1790M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.310s][info][gc,start    ] GC(0) Concurrent reset
[1.310s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.311s][info][gc          ] GC(0) Concurrent reset 1.021ms
[1.311s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.312s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.312s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.506ms
[1.314s][info][gc,start    ] GC(0) Concurrent marking roots
[1.314s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.316s][info][gc          ] GC(0) Concurrent marking roots 2.274ms
[1.316s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.316s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.326s][info][gc          ] GC(0) Concurrent marking (unload classes) 9.976ms
[1.326s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.326s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.330s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1893M, Max CSet: 84672K, Min Garbage: 0B
[1.330s][info][gc,ergo     ] GC(0) Collectable Garbage: 82048K (99%), Immediate: 5343K (6%), CSet: 76705K (92%)
[1.330s][info][gc          ] GC(0) Pause Final Mark (unload classes) 3.630ms
[1.330s][info][gc,start    ] GC(0) Concurrent thread roots
[1.330s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.330s][info][gc          ] GC(0) Concurrent thread roots 0.232ms
[1.330s][info][gc,start    ] GC(0) Concurrent weak references
[1.330s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.331s][info][gc,ref      ] GC(0) Encountered references: Soft: 3956, Weak: 2145, Final: 20, Phantom: 798
[1.331s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1256, Final: 16, Phantom: 487
[1.331s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 487, Final: 0, Phantom: 319
[1.331s][info][gc          ] GC(0) Concurrent weak references 0.296ms
[1.331s][info][gc,start    ] GC(0) Concurrent weak roots
[1.331s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.336s][info][gc          ] GC(0) Concurrent weak roots 5.092ms
[1.336s][info][gc,start    ] GC(0) Concurrent cleanup
[1.336s][info][gc          ] GC(0) Concurrent cleanup 97M->92M(125M) 0.073ms
[1.336s][info][gc,ergo     ] GC(0) Free: 1793M, Max: 512K regular, 1788M humongous, Frag: 1% external, 0% internal; Reserve: 100864K, Max: 512K
[1.336s][info][gc,start    ] GC(0) Concurrent class unloading
[1.336s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.344s][info][gc          ] GC(0) Concurrent class unloading 8.393ms
[1.344s][info][gc,start    ] GC(0) Concurrent strong roots
[1.344s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.345s][info][gc          ] GC(0) Concurrent strong roots 1.071ms
[1.345s][info][gc,start    ] GC(0) Concurrent evacuation
[1.345s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.350s][info][gc          ] GC(0) Concurrent evacuation 4.604ms
[1.350s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.350s][info][gc          ] GC(0) Pause Init Update Refs 0.020ms
[1.350s][info][gc,start    ] GC(0) Concurrent update references
[1.350s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.358s][info][gc          ] GC(0) Concurrent update references 7.949ms
[1.358s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.358s][info][gc          ] GC(0) Concurrent update thread roots 0.193ms
[1.358s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.358s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.359s][info][gc          ] GC(0) Pause Final Update Refs 0.060ms
[1.359s][info][gc,start    ] GC(0) Concurrent cleanup
[1.359s][info][gc          ] GC(0) Concurrent cleanup 100M->18M(134M) 0.073ms
[1.359s][info][gc,ergo     ] Free: 1866M, Max: 512K regular, 1778M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.359s][info][gc,stats    ] 
[1.359s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.359s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.359s][info][gc,stats    ] 
[1.359s][info][gc,stats    ] Concurrent Reset                   1133 us
[1.359s][info][gc,stats    ] Pause Init Mark (G)                2996 us
[1.359s][info][gc,stats    ] Pause Init Mark (N)                 528 us
[1.359s][info][gc,stats    ]   Update Region States               24 us
[1.359s][info][gc,stats    ] Concurrent Mark Roots              2291 us, parallelism: 1.88x
[1.359s][info][gc,stats    ]   CMR: <total>                     4302 us
[1.359s][info][gc,stats    ]   CMR: Thread Roots                1772 us, workers (us): 1618, 154, ---, ---, ---, ---, ---, ---, 
[1.359s][info][gc,stats    ]   CMR: VM Strong Roots              767 us, workers (us): 546, 220, ---, ---, ---, ---, ---, ---, 
[1.359s][info][gc,stats    ]   CMR: CLDG Roots                  1763 us, workers (us): ---, 1763, ---, ---, ---, ---, ---, ---, 
[1.359s][info][gc,stats    ] Concurrent Marking                10006 us
[1.359s][info][gc,stats    ] Pause Final Mark (G)               4023 us
[1.359s][info][gc,stats    ] Pause Final Mark (N)               3654 us
[1.359s][info][gc,stats    ]   Finish Mark                      3389 us
[1.359s][info][gc,stats    ]   Update Region States               21 us
[1.359s][info][gc,stats    ]   Choose Collection Set             125 us
[1.359s][info][gc,stats    ]   Rebuild Free Set                   25 us
[1.359s][info][gc,stats    ] Concurrent Thread Roots             248 us, parallelism: 0.62x
[1.359s][info][gc,stats    ]   CTR: <total>                      153 us
[1.359s][info][gc,stats    ]   CTR: Thread Roots                 153 us, workers (us): 153,   0, ---, ---, ---, ---, ---, ---, 
[1.359s][info][gc,stats    ] Concurrent Weak References          306 us, parallelism: 1.01x
[1.359s][info][gc,stats    ]   CWRF: <total>                     310 us
[1.359s][info][gc,stats    ]   CWRF: Weak References             310 us, workers (us): 106, 204, ---, ---, ---, ---, ---, ---, 
[1.359s][info][gc,stats    ] Concurrent Weak Roots              5114 us
[1.359s][info][gc,stats    ]   Roots                            2902 us, parallelism: 1.84x
[1.359s][info][gc,stats    ]     CWR: <total>                   5333 us
[1.359s][info][gc,stats    ]     CWR: Code Cache Roots           752 us, workers (us): 752,   0, ---, ---, ---, ---, ---, ---, 
[1.359s][info][gc,stats    ]     CWR: VM Weak Roots             4567 us, workers (us): 2005, 2562, ---, ---, ---, ---, ---, ---, 
[1.359s][info][gc,stats    ]     CWR: CLDG Roots                  14 us, workers (us):  14, ---, ---, ---, ---, ---, ---, ---, 
[1.359s][info][gc,stats    ]   Rendezvous                       2168 us
[1.359s][info][gc,stats    ] Concurrent Cleanup                   95 us
[1.359s][info][gc,stats    ] Concurrent Class Unloading         8412 us
[1.359s][info][gc,stats    ]   Unlink Stale                     4035 us
[1.359s][info][gc,stats    ]     System Dictionary                39 us
[1.359s][info][gc,stats    ]     Weak Class Links                  0 us
[1.359s][info][gc,stats    ]     Code Roots                     3994 us
[1.359s][info][gc,stats    ]   Rendezvous                         27 us
[1.359s][info][gc,stats    ]   Purge Unlinked                   4309 us
[1.359s][info][gc,stats    ]     Code Roots                     4298 us
[1.359s][info][gc,stats    ]     CLDG                             11 us
[1.359s][info][gc,stats    ]     Exception Caches                  0 us
[1.359s][info][gc,stats    ] Concurrent Strong Roots            1090 us, parallelism: 0.93x
[1.359s][info][gc,stats    ]   CSR: <total>                     1016 us
[1.359s][info][gc,stats    ]   CSR: VM Strong Roots               48 us, workers (us):  43,   5, ---, ---, ---, ---, ---, ---, 
[1.359s][info][gc,stats    ]   CSR: CLDG Roots                   968 us, workers (us): ---, 968, ---, ---, ---, ---, ---, ---, 
[1.359s][info][gc,stats    ] Concurrent Evacuation              4638 us
[1.359s][info][gc,stats    ] Pause Init Update Refs (G)          126 us
[1.359s][info][gc,stats    ] Pause Init Update Refs (N)           28 us
[1.359s][info][gc,stats    ]   Manage GCLABs                       5 us
[1.359s][info][gc,stats    ] Concurrent Update Refs             7972 us
[1.359s][info][gc,stats    ] Concurrent Update Thread Roots      205 us
[1.359s][info][gc,stats    ] Pause Final Update Refs (G)         152 us
[1.359s][info][gc,stats    ] Pause Final Update Refs (N)          70 us
[1.359s][info][gc,stats    ]   Update Region States               19 us
[1.359s][info][gc,stats    ]   Trash Collection Set                4 us
[1.359s][info][gc,stats    ]   Rebuild Free Set                   19 us
[1.359s][info][gc,stats    ] Concurrent Cleanup                   83 us
[1.359s][info][gc,metaspace] Metaspace: 21208K(21568K)->21521K(21888K) NonClass: 18869K(19072K)->19135K(19328K) Class: 2338K(2496K)->2386K(2560K)
[7.702s][info][gc          ] Cancelling GC: Stopping VM
[7.703s][info][gc,heap,exit] Heap
[7.703s][info][gc,heap,exit] Shenandoah Heap
[7.703s][info][gc,heap,exit]  1984M max, 1984M soft max, 134M committed, 37325K used
[7.703s][info][gc,heap,exit]  3969 x 512K regions
[7.703s][info][gc,heap,exit] Status: cancelled
[7.703s][info][gc,heap,exit] Reserved region:
[7.703s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[7.703s][info][gc,heap,exit] Collection set:
[7.703s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[7.703s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[7.703s][info][gc,heap,exit] 
[7.703s][info][gc,heap,exit]  Metaspace       used 25394K, committed 25728K, reserved 1114112K
[7.703s][info][gc,heap,exit]   class space    used 2924K, committed 3072K, reserved 1048576K
[7.704s][info][gc,stats    ] 
[7.704s][info][gc,stats    ] GC STATISTICS:
[7.704s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[7.704s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[7.704s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[7.704s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[7.704s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[7.704s][info][gc,stats    ] 
[7.704s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[7.704s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[7.704s][info][gc,stats    ] 
[7.704s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[7.704s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[7.704s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[7.704s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[7.704s][info][gc,stats    ] 
[7.704s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[7.704s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[7.704s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[7.704s][info][gc,stats    ]   Raise max pacing delay with care.
[7.704s][info][gc,stats    ] 
[7.704s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =     1133 us) (n =     1) (lvls, us =     1133,     1133,     1133,     1133,     1133)
[7.704s][info][gc,stats    ] Pause Init Mark (G)            =    0.003 s (a =     2996 us) (n =     1) (lvls, us =     2988,     2988,     2988,     2988,     2996)
[7.704s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      528 us) (n =     1) (lvls, us =      527,      527,      527,      527,      528)
[7.704s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       24 us) (n =     1) (lvls, us =       24,       24,       24,       24,       24)
[7.704s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     2291 us) (n =     1) (lvls, us =     2285,     2285,     2285,     2285,     2291)
[7.704s][info][gc,stats    ]   CMR: <total>                 =    0.004 s (a =     4302 us) (n =     1) (lvls, us =     4297,     4297,     4297,     4297,     4302)
[7.704s][info][gc,stats    ]   CMR: Thread Roots            =    0.002 s (a =     1772 us) (n =     1) (lvls, us =     1758,     1758,     1758,     1758,     1772)
[7.704s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      767 us) (n =     1) (lvls, us =      766,      766,      766,      766,      767)
[7.704s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     1763 us) (n =     1) (lvls, us =     1758,     1758,     1758,     1758,     1763)
[7.704s][info][gc,stats    ] Concurrent Marking             =    0.010 s (a =    10006 us) (n =     1) (lvls, us =     9961,     9961,     9961,     9961,    10006)
[7.704s][info][gc,stats    ] Pause Final Mark (G)           =    0.004 s (a =     4023 us) (n =     1) (lvls, us =     4004,     4004,     4004,     4004,     4023)
[7.704s][info][gc,stats    ] Pause Final Mark (N)           =    0.004 s (a =     3654 us) (n =     1) (lvls, us =     3652,     3652,     3652,     3652,     3654)
[7.704s][info][gc,stats    ]   Finish Mark                  =    0.003 s (a =     3389 us) (n =     1) (lvls, us =     3379,     3379,     3379,     3379,     3389)
[7.705s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       21 us) (n =     1) (lvls, us =       21,       21,       21,       21,       21)
[7.705s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =      125 us) (n =     1) (lvls, us =      123,      123,      123,      123,      125)
[7.705s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       25 us) (n =     1) (lvls, us =       25,       25,       25,       25,       25)
[7.705s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      248 us) (n =     1) (lvls, us =      246,      246,      246,      246,      248)
[7.705s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      153 us) (n =     1) (lvls, us =      152,      152,      152,      152,      153)
[7.705s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      153 us) (n =     1) (lvls, us =      152,      152,      152,      152,      153)
[7.705s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      306 us) (n =     1) (lvls, us =      305,      305,      305,      305,      306)
[7.705s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      310 us) (n =     1) (lvls, us =      309,      309,      309,      309,      310)
[7.705s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      310 us) (n =     1) (lvls, us =      309,      309,      309,      309,      310)
[7.705s][info][gc,stats    ] Concurrent Weak Roots          =    0.005 s (a =     5114 us) (n =     1) (lvls, us =     5098,     5098,     5098,     5098,     5114)
[7.705s][info][gc,stats    ]   Roots                        =    0.003 s (a =     2902 us) (n =     1) (lvls, us =     2891,     2891,     2891,     2891,     2902)
[7.705s][info][gc,stats    ]     CWR: <total>               =    0.005 s (a =     5333 us) (n =     1) (lvls, us =     5332,     5332,     5332,     5332,     5333)
[7.705s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      752 us) (n =     1) (lvls, us =      752,      752,      752,      752,      752)
[7.705s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.005 s (a =     4567 us) (n =     1) (lvls, us =     4551,     4551,     4551,     4551,     4567)
[7.705s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       14 us) (n =     1) (lvls, us =       14,       14,       14,       14,       14)
[7.705s][info][gc,stats    ]   Rendezvous                   =    0.002 s (a =     2168 us) (n =     1) (lvls, us =     2168,     2168,     2168,     2168,     2168)
[7.705s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       95 us) (n =     1) (lvls, us =       95,       95,       95,       95,       95)
[7.705s][info][gc,stats    ] Concurrent Class Unloading     =    0.008 s (a =     8412 us) (n =     1) (lvls, us =     8398,     8398,     8398,     8398,     8412)
[7.705s][info][gc,stats    ]   Unlink Stale                 =    0.004 s (a =     4035 us) (n =     1) (lvls, us =     4023,     4023,     4023,     4023,     4035)
[7.705s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       39 us) (n =     1) (lvls, us =       39,       39,       39,       39,       39)
[7.705s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.705s][info][gc,stats    ]     Code Roots                 =    0.004 s (a =     3994 us) (n =     1) (lvls, us =     3984,     3984,     3984,     3984,     3994)
[7.705s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       27 us) (n =     1) (lvls, us =       27,       27,       27,       27,       27)
[7.705s][info][gc,stats    ]   Purge Unlinked               =    0.004 s (a =     4309 us) (n =     1) (lvls, us =     4297,     4297,     4297,     4297,     4309)
[7.705s][info][gc,stats    ]     Code Roots                 =    0.004 s (a =     4298 us) (n =     1) (lvls, us =     4297,     4297,     4297,     4297,     4298)
[7.705s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       11 us) (n =     1) (lvls, us =       11,       11,       11,       11,       11)
[7.705s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.705s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1090 us) (n =     1) (lvls, us =     1074,     1074,     1074,     1074,     1090)
[7.705s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1016 us) (n =     1) (lvls, us =     1016,     1016,     1016,     1016,     1016)
[7.705s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       48 us) (n =     1) (lvls, us =       48,       48,       48,       48,       48)
[7.705s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =      968 us) (n =     1) (lvls, us =      967,      967,      967,      967,      968)
[7.705s][info][gc,stats    ] Concurrent Evacuation          =    0.005 s (a =     4638 us) (n =     1) (lvls, us =     4629,     4629,     4629,     4629,     4638)
[7.705s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      126 us) (n =     1) (lvls, us =      125,      125,      125,      125,      126)
[7.705s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       28 us) (n =     1) (lvls, us =       28,       28,       28,       28,       28)
[7.705s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[7.705s][info][gc,stats    ] Concurrent Update Refs         =    0.008 s (a =     7972 us) (n =     1) (lvls, us =     7969,     7969,     7969,     7969,     7972)
[7.705s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      205 us) (n =     1) (lvls, us =      205,      205,      205,      205,      205)
[7.705s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      152 us) (n =     1) (lvls, us =      152,      152,      152,      152,      152)
[7.705s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =       70 us) (n =     1) (lvls, us =       70,       70,       70,       70,       70)
[7.705s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[7.706s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[7.706s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[7.706s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       83 us) (n =     1) (lvls, us =       83,       83,       83,       83,       83)
[7.706s][info][gc,stats    ] 
[7.706s][info][gc,stats    ] 
[7.706s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[7.706s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[7.706s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[7.706s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[7.706s][info][gc,stats    ] 
[7.706s][info][gc,stats    ]     1 successful concurrent GCs
[7.706s][info][gc,stats    ]       0 invoked explicitly
[7.706s][info][gc,stats    ]       0 invoked implicitly
[7.706s][info][gc,stats    ] 
[7.706s][info][gc,stats    ]     0 Degenerated GCs
[7.706s][info][gc,stats    ]       0 caused by allocation failure
[7.706s][info][gc,stats    ]       0 upgraded to Full GC
[7.706s][info][gc,stats    ] 
[7.706s][info][gc,stats    ]     0 Full GCs
[7.706s][info][gc,stats    ]       0 invoked explicitly
[7.706s][info][gc,stats    ]       0 invoked implicitly
[7.706s][info][gc,stats    ]       0 caused by allocation failure
[7.706s][info][gc,stats    ]       0 upgraded from Degenerated GC
[7.706s][info][gc,stats    ] 
[7.706s][info][gc,stats    ] 
