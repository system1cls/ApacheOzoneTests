[0.005s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.005s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.005s][info][gc] Using Shenandoah
[0.006s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.007s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.007s][info][gc,init] CPUs: 4 total, 4 available
[0.007s][info][gc,init] Memory: 7937M
[0.007s][info][gc,init] Large Page Support: Disabled
[0.007s][info][gc,init] NUMA Support: Disabled
[0.007s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.007s][info][gc,init] Heap Min Capacity: 6656K
[0.007s][info][gc,init] Heap Initial Capacity: 127488K
[0.007s][info][gc,init] Heap Max Capacity: 2032128K
[0.007s][info][gc,init] Pre-touch: Disabled
[0.007s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.007s][info][gc,init] Heuristics: Adaptive
[0.007s][info][gc,init] Heap Region Count: 3969
[0.007s][info][gc,init] Heap Region Size: 512K
[0.007s][info][gc,init] TLAB Size Max: 512K
[0.007s][info][gc,init] Humongous Object Threshold: 512K
[0.007s][info][gc,init] Parallel Workers: 8
[0.007s][info][gc,init] Concurrent Workers: 2
[0.016s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f2a5b000000-0x00007f2a5bc97000-0x00007f2a5bc97000), size 13201408, SharedBaseAddress: 0x00007f2a5b000000, ArchiveRelocationMode: 1.
[0.016s][info][gc,metaspace] Compressed class space mapped at: 0x00007f2a5c000000-0x00007f2a9c000000, reserved size: 1073741824
[0.016s][info][gc,metaspace] Narrow klass base: 0x00007f2a5b000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[2.114s][info][gc          ] Trigger: Metadata GC Threshold
[2.114s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[2.114s][info][gc,start    ] GC(0) Concurrent reset
[2.115s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[2.115s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[2.115s][info][gc          ] GC(0) Concurrent reset 0.414ms
[2.115s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[2.116s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[2.116s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[2.116s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.632ms
[2.116s][info][gc,start    ] GC(0) Concurrent marking roots
[2.116s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[2.119s][info][gc          ] GC(0) Concurrent marking roots 2.899ms
[2.119s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[2.119s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[2.176s][info][gc          ] GC(0) Concurrent marking (unload classes) 57.406ms
[2.176s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[2.176s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[2.182s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1846M, Max CSet: 84672K, Min Garbage: 0B
[2.182s][info][gc,ergo     ] GC(0) Collectable Garbage: 72558K (98%), Immediate: 5359K (7%), CSet: 67199K (91%)
[2.182s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 75776K, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.182s][info][gc          ] GC(0) Pause Final Mark (unload classes) 5.425ms
[2.182s][info][gc,start    ] GC(0) Concurrent thread roots
[2.182s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[2.182s][info][gc          ] GC(0) Concurrent thread roots 0.550ms
[2.182s][info][gc,start    ] GC(0) Concurrent weak references
[2.183s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[2.183s][info][gc,ref      ] GC(0) Encountered references: Soft: 3955, Weak: 2094, Final: 4, Phantom: 821
[2.183s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 590, Final: 0, Phantom: 719
[2.183s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 497, Final: 0, Phantom: 230
[2.183s][info][gc          ] GC(0) Concurrent weak references 0.417ms
[2.183s][info][gc,start    ] GC(0) Concurrent weak roots
[2.183s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[2.185s][info][gc          ] GC(0) Concurrent weak roots 1.656ms
[2.185s][info][gc,start    ] GC(0) Concurrent cleanup
[2.185s][info][gc          ] GC(0) Concurrent cleanup 142M->137M(145M) 0.108ms
[2.185s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1740M humongous, Frag: 1% external, 0% internal; Reserve: 101118K, Max: 512K
[2.185s][info][gc,start    ] GC(0) Concurrent class unloading
[2.185s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[2.197s][info][gc          ] GC(0) Concurrent class unloading 12.334ms
[2.197s][info][gc,start    ] GC(0) Concurrent strong roots
[2.197s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[2.199s][info][gc          ] GC(0) Concurrent strong roots 1.327ms
[2.199s][info][gc,start    ] GC(0) Concurrent evacuation
[2.199s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[2.205s][info][gc          ] GC(0) Concurrent evacuation 5.959ms
[2.205s][info][gc,start    ] GC(0) Pause Init Update Refs
[2.205s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 146M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.205s][info][gc          ] GC(0) Pause Init Update Refs 0.045ms
[2.205s][info][gc,start    ] GC(0) Concurrent update references
[2.205s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[2.223s][info][gc          ] GC(0) Concurrent update references 18.159ms
[2.223s][info][gc,start    ] GC(0) Concurrent update thread roots
[2.223s][info][gc          ] GC(0) Concurrent update thread roots 0.453ms
[2.224s][info][gc,start    ] GC(0) Pause Final Update Refs
[2.224s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[2.224s][info][gc          ] GC(0) Pause Final Update Refs 0.089ms
[2.224s][info][gc,start    ] GC(0) Concurrent cleanup
[2.224s][info][gc          ] GC(0) Concurrent cleanup 147M->73M(154M) 0.109ms
[2.224s][info][gc,ergo     ] Free: 1808M, Max: 512K regular, 1731M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[2.224s][info][gc,stats    ] 
[2.224s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[2.224s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[2.224s][info][gc,stats    ] 
[2.224s][info][gc,stats    ] Concurrent Reset                    445 us
[2.224s][info][gc,stats    ] Pause Init Mark (G)                 863 us
[2.224s][info][gc,stats    ] Pause Init Mark (N)                 649 us
[2.224s][info][gc,stats    ]   Update Region States               30 us
[2.224s][info][gc,stats    ] Concurrent Mark Roots              2930 us, parallelism: 1.62x
[2.224s][info][gc,stats    ]   CMR: <total>                     4759 us
[2.224s][info][gc,stats    ]   CMR: Thread Roots                 892 us, workers (us): 892,   0, ---, ---, ---, ---, ---, ---, 
[2.224s][info][gc,stats    ]   CMR: VM Strong Roots             1618 us, workers (us): 1458, 160, ---, ---, ---, ---, ---, ---, 
[2.224s][info][gc,stats    ]   CMR: CLDG Roots                  2249 us, workers (us): ---, 2249, ---, ---, ---, ---, ---, ---, 
[2.224s][info][gc,stats    ] Concurrent Marking                57438 us
[2.224s][info][gc,stats    ] Pause Final Mark (G)               5808 us
[2.224s][info][gc,stats    ] Pause Final Mark (N)               5434 us
[2.224s][info][gc,stats    ]   Finish Mark                      5207 us
[2.224s][info][gc,stats    ]   Update Region States               40 us
[2.224s][info][gc,stats    ]   Choose Collection Set              98 us
[2.224s][info][gc,stats    ]   Rebuild Free Set                   16 us
[2.224s][info][gc,stats    ] Concurrent Thread Roots             567 us, parallelism: 0.92x
[2.224s][info][gc,stats    ]   CTR: <total>                      522 us
[2.224s][info][gc,stats    ]   CTR: Thread Roots                 522 us, workers (us): 442,  79, ---, ---, ---, ---, ---, ---, 
[2.224s][info][gc,stats    ] Concurrent Weak References          426 us, parallelism: 0.61x
[2.224s][info][gc,stats    ]   CWRF: <total>                     258 us
[2.224s][info][gc,stats    ]   CWRF: Weak References             258 us, workers (us): 253,   6, ---, ---, ---, ---, ---, ---, 
[2.224s][info][gc,stats    ] Concurrent Weak Roots              1676 us
[2.224s][info][gc,stats    ]   Roots                            1435 us, parallelism: 1.72x
[2.224s][info][gc,stats    ]     CWR: <total>                   2472 us
[2.224s][info][gc,stats    ]     CWR: Code Cache Roots           728 us, workers (us): 345, 383, ---, ---, ---, ---, ---, ---, 
[2.224s][info][gc,stats    ]     CWR: VM Weak Roots             1728 us, workers (us): 1005, 723, ---, ---, ---, ---, ---, ---, 
[2.224s][info][gc,stats    ]     CWR: CLDG Roots                  15 us, workers (us): ---,  15, ---, ---, ---, ---, ---, ---, 
[2.224s][info][gc,stats    ]   Rendezvous                        203 us
[2.224s][info][gc,stats    ] Concurrent Cleanup                  117 us
[2.224s][info][gc,stats    ] Concurrent Class Unloading        12408 us
[2.224s][info][gc,stats    ]   Unlink Stale                     3356 us
[2.224s][info][gc,stats    ]     System Dictionary                37 us
[2.224s][info][gc,stats    ]     Weak Class Links                  0 us
[2.224s][info][gc,stats    ]     Code Roots                     3317 us
[2.224s][info][gc,stats    ]   Rendezvous                        116 us
[2.224s][info][gc,stats    ]   Purge Unlinked                   8839 us
[2.224s][info][gc,stats    ]     Code Roots                     8824 us
[2.224s][info][gc,stats    ]     CLDG                             14 us
[2.224s][info][gc,stats    ]     Exception Caches                  0 us
[2.224s][info][gc,stats    ] Concurrent Strong Roots            1391 us, parallelism: 0.89x
[2.224s][info][gc,stats    ]   CSR: <total>                     1235 us
[2.225s][info][gc,stats    ]   CSR: VM Strong Roots               21 us, workers (us):  21,   0, ---, ---, ---, ---, ---, ---, 
[2.225s][info][gc,stats    ]   CSR: CLDG Roots                  1214 us, workers (us): 1214, ---, ---, ---, ---, ---, ---, ---, 
[2.225s][info][gc,stats    ] Concurrent Evacuation              6028 us
[2.225s][info][gc,stats    ] Pause Init Update Refs (G)          191 us
[2.225s][info][gc,stats    ] Pause Init Update Refs (N)           55 us
[2.225s][info][gc,stats    ]   Manage GCLABs                       4 us
[2.225s][info][gc,stats    ] Concurrent Update Refs            18195 us
[2.225s][info][gc,stats    ] Concurrent Update Thread Roots      471 us
[2.225s][info][gc,stats    ] Pause Final Update Refs (G)         206 us
[2.225s][info][gc,stats    ] Pause Final Update Refs (N)         100 us
[2.225s][info][gc,stats    ]   Update Region States               24 us
[2.225s][info][gc,stats    ]   Trash Collection Set                4 us
[2.225s][info][gc,stats    ]   Rebuild Free Set                   22 us
[2.225s][info][gc,stats    ] Concurrent Cleanup                  125 us
[2.225s][info][gc,stats    ] 
[2.225s][info][gc,stats    ] Allocation pacing accrued:
[2.225s][info][gc,stats    ]       0 of  2218 ms (  0.0%): <total>
[2.225s][info][gc,stats    ]       0 of  2218 ms (  0.0%): <average total>
[2.225s][info][gc,stats    ] 
[2.225s][info][gc,metaspace] Metaspace: 21241K(21568K)->22591K(22976K) NonClass: 18893K(19072K)->20068K(20288K) Class: 2348K(2496K)->2523K(2688K)
[2.225s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.494s][info][gc          ] Cancelling GC: Stopping VM
[6.495s][info][gc,heap,exit] Heap
[6.495s][info][gc,heap,exit] Shenandoah Heap
[6.495s][info][gc,heap,exit]  1984M max, 1984M soft max, 154M committed, 85981K used
[6.495s][info][gc,heap,exit]  3969 x 512K regions
[6.495s][info][gc,heap,exit] Status: cancelled
[6.495s][info][gc,heap,exit] Reserved region:
[6.495s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.495s][info][gc,heap,exit] Collection set:
[6.495s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.495s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.495s][info][gc,heap,exit] 
[6.495s][info][gc,heap,exit]  Metaspace       used 25103K, committed 25408K, reserved 1114112K
[6.495s][info][gc,heap,exit]   class space    used 2774K, committed 2880K, reserved 1048576K
[6.495s][info][gc,stats    ] 
[6.495s][info][gc,stats    ] GC STATISTICS:
[6.495s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.495s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.495s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.495s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.495s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.495s][info][gc,stats    ] 
[6.495s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.495s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.495s][info][gc,stats    ] 
[6.495s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.495s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.495s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.495s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.495s][info][gc,stats    ] 
[6.495s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.495s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.495s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.495s][info][gc,stats    ]   Raise max pacing delay with care.
[6.495s][info][gc,stats    ] 
[6.495s][info][gc,stats    ] Concurrent Reset               =    0.000 s (a =      445 us) (n =     1) (lvls, us =      443,      443,      443,      443,      445)
[6.495s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      863 us) (n =     1) (lvls, us =      861,      861,      861,      861,      863)
[6.495s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      649 us) (n =     1) (lvls, us =      648,      648,      648,      648,      649)
[6.495s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       30 us) (n =     1) (lvls, us =       30,       30,       30,       30,       30)
[6.495s][info][gc,stats    ] Concurrent Mark Roots          =    0.003 s (a =     2930 us) (n =     1) (lvls, us =     2930,     2930,     2930,     2930,     2930)
[6.495s][info][gc,stats    ]   CMR: <total>                 =    0.005 s (a =     4759 us) (n =     1) (lvls, us =     4746,     4746,     4746,     4746,     4759)
[6.495s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =      892 us) (n =     1) (lvls, us =      891,      891,      891,      891,      892)
[6.495s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.002 s (a =     1618 us) (n =     1) (lvls, us =     1602,     1602,     1602,     1602,     1618)
[6.495s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     2249 us) (n =     1) (lvls, us =     2246,     2246,     2246,     2246,     2249)
[6.495s][info][gc,stats    ] Concurrent Marking             =    0.057 s (a =    57438 us) (n =     1) (lvls, us =    57422,    57422,    57422,    57422,    57438)
[6.495s][info][gc,stats    ] Pause Final Mark (G)           =    0.006 s (a =     5808 us) (n =     1) (lvls, us =     5801,     5801,     5801,     5801,     5808)
[6.495s][info][gc,stats    ] Pause Final Mark (N)           =    0.005 s (a =     5434 us) (n =     1) (lvls, us =     5430,     5430,     5430,     5430,     5434)
[6.495s][info][gc,stats    ]   Finish Mark                  =    0.005 s (a =     5207 us) (n =     1) (lvls, us =     5195,     5195,     5195,     5195,     5207)
[6.495s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       40 us) (n =     1) (lvls, us =       40,       40,       40,       40,       40)
[6.495s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       98 us) (n =     1) (lvls, us =       98,       98,       98,       98,       98)
[6.495s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[6.495s][info][gc,stats    ] Concurrent Thread Roots        =    0.001 s (a =      567 us) (n =     1) (lvls, us =      566,      566,      566,      566,      567)
[6.495s][info][gc,stats    ]   CTR: <total>                 =    0.001 s (a =      522 us) (n =     1) (lvls, us =      521,      521,      521,      521,      522)
[6.495s][info][gc,stats    ]   CTR: Thread Roots            =    0.001 s (a =      522 us) (n =     1) (lvls, us =      521,      521,      521,      521,      522)
[6.495s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      426 us) (n =     1) (lvls, us =      426,      426,      426,      426,      426)
[6.495s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      258 us) (n =     1) (lvls, us =      258,      258,      258,      258,      258)
[6.495s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      258 us) (n =     1) (lvls, us =      258,      258,      258,      258,      258)
[6.495s][info][gc,stats    ] Concurrent Weak Roots          =    0.002 s (a =     1676 us) (n =     1) (lvls, us =     1660,     1660,     1660,     1660,     1676)
[6.495s][info][gc,stats    ]   Roots                        =    0.001 s (a =     1435 us) (n =     1) (lvls, us =     1426,     1426,     1426,     1426,     1435)
[6.495s][info][gc,stats    ]     CWR: <total>               =    0.002 s (a =     2472 us) (n =     1) (lvls, us =     2461,     2461,     2461,     2461,     2472)
[6.495s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      728 us) (n =     1) (lvls, us =      727,      727,      727,      727,      728)
[6.495s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1728 us) (n =     1) (lvls, us =     1719,     1719,     1719,     1719,     1728)
[6.495s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       15 us) (n =     1) (lvls, us =       15,       15,       15,       15,       15)
[6.495s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      203 us) (n =     1) (lvls, us =      201,      201,      201,      201,      203)
[6.495s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      117 us) (n =     1) (lvls, us =      115,      115,      115,      115,      117)
[6.495s][info][gc,stats    ] Concurrent Class Unloading     =    0.012 s (a =    12408 us) (n =     1) (lvls, us =    12305,    12305,    12305,    12305,    12408)
[6.495s][info][gc,stats    ]   Unlink Stale                 =    0.003 s (a =     3356 us) (n =     1) (lvls, us =     3340,     3340,     3340,     3340,     3356)
[6.495s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       37 us) (n =     1) (lvls, us =       37,       37,       37,       37,       37)
[6.495s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.495s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     3317 us) (n =     1) (lvls, us =     3301,     3301,     3301,     3301,     3317)
[6.496s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      116 us) (n =     1) (lvls, us =      115,      115,      115,      115,      116)
[6.496s][info][gc,stats    ]   Purge Unlinked               =    0.009 s (a =     8839 us) (n =     1) (lvls, us =     8828,     8828,     8828,     8828,     8839)
[6.496s][info][gc,stats    ]     Code Roots                 =    0.009 s (a =     8824 us) (n =     1) (lvls, us =     8809,     8809,     8809,     8809,     8824)
[6.496s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       14 us) (n =     1) (lvls, us =       14,       14,       14,       14,       14)
[6.496s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.496s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1391 us) (n =     1) (lvls, us =     1387,     1387,     1387,     1387,     1391)
[6.496s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1235 us) (n =     1) (lvls, us =     1230,     1230,     1230,     1230,     1235)
[6.496s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       21 us) (n =     1) (lvls, us =       21,       21,       21,       21,       21)
[6.496s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1214 us) (n =     1) (lvls, us =     1211,     1211,     1211,     1211,     1214)
[6.496s][info][gc,stats    ] Concurrent Evacuation          =    0.006 s (a =     6028 us) (n =     1) (lvls, us =     6016,     6016,     6016,     6016,     6028)
[6.496s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      191 us) (n =     1) (lvls, us =      189,      189,      189,      189,      191)
[6.496s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       55 us) (n =     1) (lvls, us =       54,       54,       54,       54,       55)
[6.496s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.496s][info][gc,stats    ] Concurrent Update Refs         =    0.018 s (a =    18195 us) (n =     1) (lvls, us =    18164,    18164,    18164,    18164,    18195)
[6.496s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      471 us) (n =     1) (lvls, us =      469,      469,      469,      469,      471)
[6.496s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      206 us) (n =     1) (lvls, us =      205,      205,      205,      205,      206)
[6.496s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      100 us) (n =     1) (lvls, us =      100,      100,      100,      100,      100)
[6.496s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       24 us) (n =     1) (lvls, us =       24,       24,       24,       24,       24)
[6.496s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.496s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       22 us) (n =     1) (lvls, us =       22,       22,       22,       22,       22)
[6.496s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      125 us) (n =     1) (lvls, us =      125,      125,      125,      125,      125)
[6.496s][info][gc,stats    ] 
[6.496s][info][gc,stats    ] 
[6.496s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.496s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.496s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.496s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.496s][info][gc,stats    ] 
[6.496s][info][gc,stats    ]     1 successful concurrent GCs
[6.496s][info][gc,stats    ]       0 invoked explicitly
[6.496s][info][gc,stats    ]       0 invoked implicitly
[6.496s][info][gc,stats    ] 
[6.496s][info][gc,stats    ]     0 Degenerated GCs
[6.496s][info][gc,stats    ]       0 caused by allocation failure
[6.496s][info][gc,stats    ]       0 upgraded to Full GC
[6.496s][info][gc,stats    ] 
[6.496s][info][gc,stats    ]     0 Full GCs
[6.496s][info][gc,stats    ]       0 invoked explicitly
[6.496s][info][gc,stats    ]       0 invoked implicitly
[6.496s][info][gc,stats    ]       0 caused by allocation failure
[6.496s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.496s][info][gc,stats    ] 
[6.496s][info][gc,stats    ] 
