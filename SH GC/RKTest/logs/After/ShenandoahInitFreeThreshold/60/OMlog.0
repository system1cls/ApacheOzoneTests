[0.005s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.005s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.005s][info][gc] Using Shenandoah
[0.006s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.009s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.009s][info][gc,init] CPUs: 4 total, 4 available
[0.009s][info][gc,init] Memory: 7937M
[0.009s][info][gc,init] Large Page Support: Disabled
[0.009s][info][gc,init] NUMA Support: Disabled
[0.009s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.009s][info][gc,init] Heap Min Capacity: 6656K
[0.009s][info][gc,init] Heap Initial Capacity: 127488K
[0.009s][info][gc,init] Heap Max Capacity: 2032128K
[0.009s][info][gc,init] Pre-touch: Disabled
[0.009s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.009s][info][gc,init] Heuristics: Adaptive
[0.009s][info][gc,init] Heap Region Count: 3969
[0.009s][info][gc,init] Heap Region Size: 512K
[0.009s][info][gc,init] TLAB Size Max: 512K
[0.009s][info][gc,init] Humongous Object Threshold: 512K
[0.009s][info][gc,init] Parallel Workers: 8
[0.009s][info][gc,init] Concurrent Workers: 2
[0.022s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f30db000000-0x00007f30dbc97000-0x00007f30dbc97000), size 13201408, SharedBaseAddress: 0x00007f30db000000, ArchiveRelocationMode: 1.
[0.022s][info][gc,metaspace] Compressed class space mapped at: 0x00007f30dc000000-0x00007f311c000000, reserved size: 1073741824
[0.022s][info][gc,metaspace] Narrow klass base: 0x00007f30db000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[2.036s][info][gc          ] Trigger: Metadata GC Threshold
[2.036s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[2.036s][info][gc,start    ] GC(0) Concurrent reset
[2.036s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[2.037s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[2.037s][info][gc          ] GC(0) Concurrent reset 0.513ms
[2.037s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[2.038s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[2.038s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[2.038s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.768ms
[2.038s][info][gc,start    ] GC(0) Concurrent marking roots
[2.038s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[2.041s][info][gc          ] GC(0) Concurrent marking roots 2.672ms
[2.041s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[2.041s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[2.112s][info][gc          ] GC(0) Concurrent marking (unload classes) 70.725ms
[2.112s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[2.112s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[2.113s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1845M, Max CSet: 84672K, Min Garbage: 0B
[2.113s][info][gc,ergo     ] GC(0) Collectable Garbage: 73055K (98%), Immediate: 4847K (6%), CSet: 68208K (92%)
[2.113s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 76288K, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.113s][info][gc          ] GC(0) Pause Final Mark (unload classes) 1.411ms
[2.113s][info][gc,start    ] GC(0) Concurrent thread roots
[2.113s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[2.113s][info][gc          ] GC(0) Concurrent thread roots 0.406ms
[2.114s][info][gc,start    ] GC(0) Concurrent weak references
[2.114s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[2.114s][info][gc,ref      ] GC(0) Encountered references: Soft: 3955, Weak: 2094, Final: 4, Phantom: 820
[2.114s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 590, Final: 0, Phantom: 807
[2.114s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 497, Final: 0, Phantom: 230
[2.114s][info][gc          ] GC(0) Concurrent weak references 0.365ms
[2.114s][info][gc,start    ] GC(0) Concurrent weak roots
[2.114s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[2.117s][info][gc          ] GC(0) Concurrent weak roots 2.698ms
[2.117s][info][gc,start    ] GC(0) Concurrent cleanup
[2.117s][info][gc          ] GC(0) Concurrent cleanup 142M->138M(145M) 0.108ms
[2.117s][info][gc,ergo     ] GC(0) Free: 1745M, Max: 512K regular, 1740M humongous, Frag: 1% external, 0% internal; Reserve: 100864K, Max: 512K
[2.117s][info][gc,start    ] GC(0) Concurrent class unloading
[2.117s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[2.123s][info][gc          ] GC(0) Concurrent class unloading 6.642ms
[2.123s][info][gc,start    ] GC(0) Concurrent strong roots
[2.123s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[2.125s][info][gc          ] GC(0) Concurrent strong roots 1.797ms
[2.125s][info][gc,start    ] GC(0) Concurrent evacuation
[2.125s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[2.132s][info][gc          ] GC(0) Concurrent evacuation 6.944ms
[2.132s][info][gc,start    ] GC(0) Pause Init Update Refs
[2.132s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 147M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.132s][info][gc          ] GC(0) Pause Init Update Refs 0.032ms
[2.132s][info][gc,start    ] GC(0) Concurrent update references
[2.132s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[2.151s][info][gc          ] GC(0) Concurrent update references 18.751ms
[2.151s][info][gc,start    ] GC(0) Concurrent update thread roots
[2.151s][info][gc          ] GC(0) Concurrent update thread roots 0.286ms
[2.151s][info][gc,start    ] GC(0) Pause Final Update Refs
[2.151s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[2.151s][info][gc          ] GC(0) Pause Final Update Refs 0.075ms
[2.152s][info][gc,start    ] GC(0) Concurrent cleanup
[2.152s][info][gc          ] GC(0) Concurrent cleanup 147M->73M(154M) 0.064ms
[2.152s][info][gc,ergo     ] Free: 1809M, Max: 512K regular, 1731M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[2.152s][info][gc,stats    ] 
[2.152s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[2.152s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[2.152s][info][gc,stats    ] 
[2.152s][info][gc,stats    ] Concurrent Reset                    556 us
[2.152s][info][gc,stats    ] Pause Init Mark (G)                1338 us
[2.152s][info][gc,stats    ] Pause Init Mark (N)                 797 us
[2.152s][info][gc,stats    ]   Update Region States               36 us
[2.152s][info][gc,stats    ] Concurrent Mark Roots              2715 us, parallelism: 1.59x
[2.152s][info][gc,stats    ]   CMR: <total>                     4326 us
[2.152s][info][gc,stats    ]   CMR: Thread Roots                1222 us, workers (us): 1222,   0, ---, ---, ---, ---, ---, ---, 
[2.152s][info][gc,stats    ]   CMR: VM Strong Roots              740 us, workers (us): 586, 154, ---, ---, ---, ---, ---, ---, 
[2.152s][info][gc,stats    ]   CMR: CLDG Roots                  2364 us, workers (us): ---, 2364, ---, ---, ---, ---, ---, ---, 
[2.152s][info][gc,stats    ] Concurrent Marking                70751 us
[2.152s][info][gc,stats    ] Pause Final Mark (G)               1467 us
[2.152s][info][gc,stats    ] Pause Final Mark (N)               1419 us
[2.152s][info][gc,stats    ]   Finish Mark                      1232 us
[2.152s][info][gc,stats    ]   Update Region States               39 us
[2.152s][info][gc,stats    ]   Choose Collection Set              88 us
[2.152s][info][gc,stats    ]   Rebuild Free Set                   16 us
[2.152s][info][gc,stats    ] Concurrent Thread Roots             420 us, parallelism: 1.14x
[2.152s][info][gc,stats    ]   CTR: <total>                      479 us
[2.152s][info][gc,stats    ]   CTR: Thread Roots                 479 us, workers (us): 373, 106, ---, ---, ---, ---, ---, ---, 
[2.152s][info][gc,stats    ] Concurrent Weak References          373 us, parallelism: 0.77x
[2.152s][info][gc,stats    ]   CWRF: <total>                     289 us
[2.152s][info][gc,stats    ]   CWRF: Weak References             289 us, workers (us): 289,   0, ---, ---, ---, ---, ---, ---, 
[2.152s][info][gc,stats    ] Concurrent Weak Roots              2723 us
[2.152s][info][gc,stats    ]   Roots                            2581 us, parallelism: 1.96x
[2.152s][info][gc,stats    ]     CWR: <total>                   5059 us
[2.152s][info][gc,stats    ]     CWR: Code Cache Roots           766 us, workers (us):   1, 765, ---, ---, ---, ---, ---, ---, 
[2.152s][info][gc,stats    ]     CWR: VM Weak Roots             4272 us, workers (us): 2526, 1747, ---, ---, ---, ---, ---, ---, 
[2.152s][info][gc,stats    ]     CWR: CLDG Roots                  21 us, workers (us): ---,  21, ---, ---, ---, ---, ---, ---, 
[2.152s][info][gc,stats    ]   Rendezvous                        102 us
[2.152s][info][gc,stats    ] Concurrent Cleanup                  117 us
[2.152s][info][gc,stats    ] Concurrent Class Unloading         6678 us
[2.152s][info][gc,stats    ]   Unlink Stale                     2962 us
[2.152s][info][gc,stats    ]     System Dictionary                50 us
[2.152s][info][gc,stats    ]     Weak Class Links                  0 us
[2.152s][info][gc,stats    ]     Code Roots                     2911 us
[2.152s][info][gc,stats    ]   Rendezvous                         21 us
[2.152s][info][gc,stats    ]   Purge Unlinked                   3640 us
[2.152s][info][gc,stats    ]     Code Roots                     3599 us
[2.152s][info][gc,stats    ]     CLDG                             40 us
[2.152s][info][gc,stats    ]     Exception Caches                  0 us
[2.152s][info][gc,stats    ] Concurrent Strong Roots            1824 us, parallelism: 0.79x
[2.152s][info][gc,stats    ]   CSR: <total>                     1433 us
[2.152s][info][gc,stats    ]   CSR: VM Strong Roots               21 us, workers (us):  21,   1, ---, ---, ---, ---, ---, ---, 
[2.152s][info][gc,stats    ]   CSR: CLDG Roots                  1411 us, workers (us): 1411, ---, ---, ---, ---, ---, ---, ---, 
[2.152s][info][gc,stats    ] Concurrent Evacuation              6974 us
[2.152s][info][gc,stats    ] Pause Init Update Refs (G)           69 us
[2.152s][info][gc,stats    ] Pause Init Update Refs (N)           43 us
[2.152s][info][gc,stats    ]   Manage GCLABs                       5 us
[2.152s][info][gc,stats    ] Concurrent Update Refs            18778 us
[2.152s][info][gc,stats    ] Concurrent Update Thread Roots      320 us
[2.152s][info][gc,stats    ] Pause Final Update Refs (G)         128 us
[2.152s][info][gc,stats    ] Pause Final Update Refs (N)         107 us
[2.152s][info][gc,stats    ]   Update Region States               26 us
[2.152s][info][gc,stats    ]   Trash Collection Set                4 us
[2.152s][info][gc,stats    ]   Rebuild Free Set                   18 us
[2.152s][info][gc,stats    ] Concurrent Cleanup                   88 us
[2.152s][info][gc,stats    ] 
[2.152s][info][gc,stats    ] Allocation pacing accrued:
[2.152s][info][gc,stats    ]       0 of  2146 ms (  0.0%): <total>
[2.152s][info][gc,stats    ]       0 of  2146 ms (  0.0%): <average total>
[2.152s][info][gc,stats    ] 
[2.152s][info][gc,metaspace] Metaspace: 21242K(21568K)->22256K(22592K) NonClass: 18893K(19072K)->19769K(19968K) Class: 2348K(2496K)->2487K(2624K)
[2.152s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.452s][info][gc          ] Cancelling GC: Stopping VM
[6.452s][info][gc,heap,exit] Heap
[6.452s][info][gc,heap,exit] Shenandoah Heap
[6.452s][info][gc,heap,exit]  1984M max, 1984M soft max, 154M committed, 86082K used
[6.452s][info][gc,heap,exit]  3969 x 512K regions
[6.452s][info][gc,heap,exit] Status: cancelled
[6.452s][info][gc,heap,exit] Reserved region:
[6.453s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.453s][info][gc,heap,exit] Collection set:
[6.453s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.453s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.453s][info][gc,heap,exit] 
[6.453s][info][gc,heap,exit]  Metaspace       used 25101K, committed 25408K, reserved 1114112K
[6.453s][info][gc,heap,exit]   class space    used 2776K, committed 2880K, reserved 1048576K
[6.453s][info][gc,stats    ] 
[6.453s][info][gc,stats    ] GC STATISTICS:
[6.453s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.453s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.453s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.453s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.453s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.453s][info][gc,stats    ] 
[6.453s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.453s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.453s][info][gc,stats    ] 
[6.453s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.453s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.453s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.453s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.453s][info][gc,stats    ] 
[6.453s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.453s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.453s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.453s][info][gc,stats    ]   Raise max pacing delay with care.
[6.453s][info][gc,stats    ] 
[6.453s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      556 us) (n =     1) (lvls, us =      555,      555,      555,      555,      556)
[6.453s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =     1338 us) (n =     1) (lvls, us =     1328,     1328,     1328,     1328,     1338)
[6.453s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      797 us) (n =     1) (lvls, us =      797,      797,      797,      797,      797)
[6.453s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       36 us) (n =     1) (lvls, us =       36,       36,       36,       36,       36)
[6.453s][info][gc,stats    ] Concurrent Mark Roots          =    0.003 s (a =     2715 us) (n =     1) (lvls, us =     2695,     2695,     2695,     2695,     2715)
[6.453s][info][gc,stats    ]   CMR: <total>                 =    0.004 s (a =     4326 us) (n =     1) (lvls, us =     4316,     4316,     4316,     4316,     4326)
[6.453s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1222 us) (n =     1) (lvls, us =     1211,     1211,     1211,     1211,     1222)
[6.453s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      740 us) (n =     1) (lvls, us =      738,      738,      738,      738,      740)
[6.453s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     2364 us) (n =     1) (lvls, us =     2363,     2363,     2363,     2363,     2364)
[6.453s][info][gc,stats    ] Concurrent Marking             =    0.071 s (a =    70751 us) (n =     1) (lvls, us =    70703,    70703,    70703,    70703,    70751)
[6.453s][info][gc,stats    ] Pause Final Mark (G)           =    0.001 s (a =     1467 us) (n =     1) (lvls, us =     1465,     1465,     1465,     1465,     1467)
[6.453s][info][gc,stats    ] Pause Final Mark (N)           =    0.001 s (a =     1419 us) (n =     1) (lvls, us =     1406,     1406,     1406,     1406,     1419)
[6.453s][info][gc,stats    ]   Finish Mark                  =    0.001 s (a =     1232 us) (n =     1) (lvls, us =     1230,     1230,     1230,     1230,     1232)
[6.453s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       39 us) (n =     1) (lvls, us =       39,       39,       39,       39,       39)
[6.453s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       88 us) (n =     1) (lvls, us =       88,       88,       88,       88,       88)
[6.453s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[6.453s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      420 us) (n =     1) (lvls, us =      420,      420,      420,      420,      420)
[6.453s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      479 us) (n =     1) (lvls, us =      479,      479,      479,      479,      479)
[6.453s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      479 us) (n =     1) (lvls, us =      479,      479,      479,      479,      479)
[6.453s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      373 us) (n =     1) (lvls, us =      373,      373,      373,      373,      373)
[6.453s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      289 us) (n =     1) (lvls, us =      287,      287,      287,      287,      289)
[6.453s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      289 us) (n =     1) (lvls, us =      287,      287,      287,      287,      289)
[6.453s][info][gc,stats    ] Concurrent Weak Roots          =    0.003 s (a =     2723 us) (n =     1) (lvls, us =     2715,     2715,     2715,     2715,     2723)
[6.453s][info][gc,stats    ]   Roots                        =    0.003 s (a =     2581 us) (n =     1) (lvls, us =     2578,     2578,     2578,     2578,     2581)
[6.453s][info][gc,stats    ]     CWR: <total>               =    0.005 s (a =     5059 us) (n =     1) (lvls, us =     5059,     5059,     5059,     5059,     5059)
[6.453s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      766 us) (n =     1) (lvls, us =      766,      766,      766,      766,      766)
[6.453s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.004 s (a =     4272 us) (n =     1) (lvls, us =     4258,     4258,     4258,     4258,     4272)
[6.453s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       21 us) (n =     1) (lvls, us =       21,       21,       21,       21,       21)
[6.453s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      102 us) (n =     1) (lvls, us =      102,      102,      102,      102,      102)
[6.453s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      117 us) (n =     1) (lvls, us =      117,      117,      117,      117,      117)
[6.453s][info][gc,stats    ] Concurrent Class Unloading     =    0.007 s (a =     6678 us) (n =     1) (lvls, us =     6660,     6660,     6660,     6660,     6678)
[6.453s][info][gc,stats    ]   Unlink Stale                 =    0.003 s (a =     2962 us) (n =     1) (lvls, us =     2949,     2949,     2949,     2949,     2962)
[6.453s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       50 us) (n =     1) (lvls, us =       50,       50,       50,       50,       50)
[6.453s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.454s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2911 us) (n =     1) (lvls, us =     2910,     2910,     2910,     2910,     2911)
[6.454s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       21 us) (n =     1) (lvls, us =       21,       21,       21,       21,       21)
[6.454s][info][gc,stats    ]   Purge Unlinked               =    0.004 s (a =     3640 us) (n =     1) (lvls, us =     3633,     3633,     3633,     3633,     3640)
[6.454s][info][gc,stats    ]     Code Roots                 =    0.004 s (a =     3599 us) (n =     1) (lvls, us =     3594,     3594,     3594,     3594,     3599)
[6.454s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       40 us) (n =     1) (lvls, us =       40,       40,       40,       40,       40)
[6.454s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.454s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     1824 us) (n =     1) (lvls, us =     1816,     1816,     1816,     1816,     1824)
[6.454s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1433 us) (n =     1) (lvls, us =     1426,     1426,     1426,     1426,     1433)
[6.454s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       21 us) (n =     1) (lvls, us =       21,       21,       21,       21,       21)
[6.454s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1411 us) (n =     1) (lvls, us =     1406,     1406,     1406,     1406,     1411)
[6.454s][info][gc,stats    ] Concurrent Evacuation          =    0.007 s (a =     6974 us) (n =     1) (lvls, us =     6973,     6973,     6973,     6973,     6974)
[6.454s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =       69 us) (n =     1) (lvls, us =       69,       69,       69,       69,       69)
[6.454s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       43 us) (n =     1) (lvls, us =       43,       43,       43,       43,       43)
[6.454s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.454s][info][gc,stats    ] Concurrent Update Refs         =    0.019 s (a =    18778 us) (n =     1) (lvls, us =    18750,    18750,    18750,    18750,    18778)
[6.454s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      320 us) (n =     1) (lvls, us =      320,      320,      320,      320,      320)
[6.454s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      128 us) (n =     1) (lvls, us =      127,      127,      127,      127,      128)
[6.454s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      107 us) (n =     1) (lvls, us =      105,      105,      105,      105,      107)
[6.454s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       26 us) (n =     1) (lvls, us =       26,       26,       26,       26,       26)
[6.454s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.454s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[6.454s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       88 us) (n =     1) (lvls, us =       88,       88,       88,       88,       88)
[6.454s][info][gc,stats    ] 
[6.454s][info][gc,stats    ] 
[6.454s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.454s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.454s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.454s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.454s][info][gc,stats    ] 
[6.454s][info][gc,stats    ]     1 successful concurrent GCs
[6.454s][info][gc,stats    ]       0 invoked explicitly
[6.454s][info][gc,stats    ]       0 invoked implicitly
[6.454s][info][gc,stats    ] 
[6.454s][info][gc,stats    ]     0 Degenerated GCs
[6.454s][info][gc,stats    ]       0 caused by allocation failure
[6.454s][info][gc,stats    ]       0 upgraded to Full GC
[6.454s][info][gc,stats    ] 
[6.454s][info][gc,stats    ]     0 Full GCs
[6.454s][info][gc,stats    ]       0 invoked explicitly
[6.454s][info][gc,stats    ]       0 invoked implicitly
[6.454s][info][gc,stats    ]       0 caused by allocation failure
[6.454s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.454s][info][gc,stats    ] 
[6.454s][info][gc,stats    ] 
