[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.004s][info][gc] Using Shenandoah
[0.005s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.005s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.005s][info][gc,init] CPUs: 4 total, 4 available
[0.005s][info][gc,init] Memory: 7937M
[0.005s][info][gc,init] Large Page Support: Disabled
[0.005s][info][gc,init] NUMA Support: Disabled
[0.005s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.005s][info][gc,init] Heap Min Capacity: 6656K
[0.005s][info][gc,init] Heap Initial Capacity: 127488K
[0.005s][info][gc,init] Heap Max Capacity: 2032128K
[0.005s][info][gc,init] Pre-touch: Disabled
[0.005s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.005s][info][gc,init] Heuristics: Adaptive
[0.005s][info][gc,init] Heap Region Count: 3969
[0.005s][info][gc,init] Heap Region Size: 512K
[0.005s][info][gc,init] TLAB Size Max: 512K
[0.005s][info][gc,init] Humongous Object Threshold: 512K
[0.005s][info][gc,init] Parallel Workers: 8
[0.005s][info][gc,init] Concurrent Workers: 2
[0.013s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007fa24b000000-0x00007fa24bc97000-0x00007fa24bc97000), size 13201408, SharedBaseAddress: 0x00007fa24b000000, ArchiveRelocationMode: 1.
[0.013s][info][gc,metaspace] Compressed class space mapped at: 0x00007fa24c000000-0x00007fa28c000000, reserved size: 1073741824
[0.013s][info][gc,metaspace] Narrow klass base: 0x00007fa24b000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.886s][info][gc          ] Trigger: Metadata GC Threshold
[1.886s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.886s][info][gc,start    ] GC(0) Concurrent reset
[1.886s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.886s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.886s][info][gc          ] GC(0) Concurrent reset 0.508ms
[1.887s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.887s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.887s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.887s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.460ms
[1.887s][info][gc,start    ] GC(0) Concurrent marking roots
[1.887s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.889s][info][gc          ] GC(0) Concurrent marking roots 1.544ms
[1.889s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.889s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.953s][info][gc          ] GC(0) Concurrent marking (unload classes) 64.432ms
[1.953s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.954s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.960s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1846M, Max CSet: 84672K, Min Garbage: 0B
[1.960s][info][gc,ergo     ] GC(0) Collectable Garbage: 72538K (98%), Immediate: 5359K (7%), CSet: 67179K (91%)
[1.960s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 75264K, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.960s][info][gc          ] GC(0) Pause Final Mark (unload classes) 6.903ms
[1.961s][info][gc,start    ] GC(0) Concurrent thread roots
[1.961s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.961s][info][gc          ] GC(0) Concurrent thread roots 0.273ms
[1.961s][info][gc,start    ] GC(0) Concurrent weak references
[1.961s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.961s][info][gc,ref      ] GC(0) Encountered references: Soft: 3953, Weak: 2094, Final: 4, Phantom: 821
[1.961s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1270, Final: 0, Phantom: 500
[1.961s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 497, Final: 0, Phantom: 230
[1.961s][info][gc          ] GC(0) Concurrent weak references 0.500ms
[1.961s][info][gc,start    ] GC(0) Concurrent weak roots
[1.961s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.964s][info][gc          ] GC(0) Concurrent weak roots 2.831ms
[1.964s][info][gc,start    ] GC(0) Concurrent cleanup
[1.964s][info][gc          ] GC(0) Concurrent cleanup 142M->137M(145M) 0.153ms
[1.965s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1740M humongous, Frag: 1% external, 0% internal; Reserve: 101359K, Max: 512K
[1.965s][info][gc,start    ] GC(0) Concurrent class unloading
[1.965s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.979s][info][gc          ] GC(0) Concurrent class unloading 14.401ms
[1.979s][info][gc,start    ] GC(0) Concurrent strong roots
[1.979s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.981s][info][gc          ] GC(0) Concurrent strong roots 1.468ms
[1.981s][info][gc,start    ] GC(0) Concurrent evacuation
[1.981s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.989s][info][gc          ] GC(0) Concurrent evacuation 8.842ms
[1.990s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.990s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 146M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.990s][info][gc          ] GC(0) Pause Init Update Refs 0.044ms
[1.990s][info][gc,start    ] GC(0) Concurrent update references
[1.990s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[2.016s][info][gc          ] GC(0) Concurrent update references 26.547ms
[2.016s][info][gc,start    ] GC(0) Concurrent update thread roots
[2.017s][info][gc          ] GC(0) Concurrent update thread roots 0.622ms
[2.017s][info][gc,start    ] GC(0) Pause Final Update Refs
[2.017s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[2.017s][info][gc          ] GC(0) Pause Final Update Refs 0.098ms
[2.017s][info][gc,start    ] GC(0) Concurrent cleanup
[2.017s][info][gc          ] GC(0) Concurrent cleanup 146M->73M(153M) 0.101ms
[2.017s][info][gc,ergo     ] Free: 1809M, Max: 512K regular, 1731M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[2.017s][info][gc,stats    ] 
[2.017s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[2.017s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[2.018s][info][gc,stats    ] 
[2.018s][info][gc,stats    ] Concurrent Reset                    560 us
[2.018s][info][gc,stats    ] Pause Init Mark (G)                 682 us
[2.018s][info][gc,stats    ] Pause Init Mark (N)                 473 us
[2.018s][info][gc,stats    ]   Update Region States               19 us
[2.018s][info][gc,stats    ] Concurrent Mark Roots              1583 us, parallelism: 1.78x
[2.018s][info][gc,stats    ]   CMR: <total>                     2821 us
[2.018s][info][gc,stats    ]   CMR: Thread Roots                1239 us, workers (us): 1115, 124, ---, ---, ---, ---, ---, ---, 
[2.018s][info][gc,stats    ]   CMR: VM Strong Roots              463 us, workers (us): 314, 149, ---, ---, ---, ---, ---, ---, 
[2.018s][info][gc,stats    ]   CMR: CLDG Roots                  1120 us, workers (us): ---, 1120, ---, ---, ---, ---, ---, ---, 
[2.018s][info][gc,stats    ] Concurrent Marking                64491 us
[2.018s][info][gc,stats    ] Pause Final Mark (G)               7294 us
[2.018s][info][gc,stats    ] Pause Final Mark (N)               6912 us
[2.018s][info][gc,stats    ]   Finish Mark                      6697 us
[2.018s][info][gc,stats    ]   Update Region States               38 us
[2.018s][info][gc,stats    ]   Choose Collection Set              95 us
[2.018s][info][gc,stats    ]   Rebuild Free Set                   17 us
[2.018s][info][gc,stats    ] Concurrent Thread Roots             293 us, parallelism: 0.69x
[2.018s][info][gc,stats    ]   CTR: <total>                      204 us
[2.018s][info][gc,stats    ]   CTR: Thread Roots                 204 us, workers (us): 103, 101, ---, ---, ---, ---, ---, ---, 
[2.018s][info][gc,stats    ] Concurrent Weak References          511 us, parallelism: 0.77x
[2.018s][info][gc,stats    ]   CWRF: <total>                     395 us
[2.018s][info][gc,stats    ]   CWRF: Weak References             395 us, workers (us): 395,   1, ---, ---, ---, ---, ---, ---, 
[2.018s][info][gc,stats    ] Concurrent Weak Roots              2908 us
[2.018s][info][gc,stats    ]   Roots                            2502 us, parallelism: 1.09x
[2.018s][info][gc,stats    ]     CWR: <total>                   2728 us
[2.018s][info][gc,stats    ]     CWR: Code Cache Roots           754 us, workers (us): 389, 366, ---, ---, ---, ---, ---, ---, 
[2.018s][info][gc,stats    ]     CWR: VM Weak Roots             1962 us, workers (us): 1961,   1, ---, ---, ---, ---, ---, ---, 
[2.018s][info][gc,stats    ]     CWR: CLDG Roots                  12 us, workers (us):  12, ---, ---, ---, ---, ---, ---, ---, 
[2.018s][info][gc,stats    ]   Rendezvous                        281 us
[2.018s][info][gc,stats    ] Concurrent Cleanup                  282 us
[2.018s][info][gc,stats    ] Concurrent Class Unloading        14441 us
[2.018s][info][gc,stats    ]   Unlink Stale                     5704 us
[2.019s][info][gc,stats    ]     System Dictionary               204 us
[2.019s][info][gc,stats    ]     Weak Class Links                  0 us
[2.019s][info][gc,stats    ]     Code Roots                     5498 us
[2.019s][info][gc,stats    ]   Rendezvous                        112 us
[2.019s][info][gc,stats    ]   Purge Unlinked                   8493 us
[2.019s][info][gc,stats    ]     Code Roots                     8480 us
[2.019s][info][gc,stats    ]     CLDG                             12 us
[2.019s][info][gc,stats    ]     Exception Caches                  0 us
[2.019s][info][gc,stats    ] Concurrent Strong Roots            1521 us, parallelism: 0.91x
[2.019s][info][gc,stats    ]   CSR: <total>                     1389 us
[2.019s][info][gc,stats    ]   CSR: VM Strong Roots               21 us, workers (us):  16,   5, ---, ---, ---, ---, ---, ---, 
[2.019s][info][gc,stats    ]   CSR: CLDG Roots                  1368 us, workers (us): ---, 1368, ---, ---, ---, ---, ---, ---, 
[2.019s][info][gc,stats    ] Concurrent Evacuation              8870 us
[2.019s][info][gc,stats    ] Pause Init Update Refs (G)          163 us
[2.019s][info][gc,stats    ] Pause Init Update Refs (N)           53 us
[2.019s][info][gc,stats    ]   Manage GCLABs                       5 us
[2.019s][info][gc,stats    ] Concurrent Update Refs            26622 us
[2.019s][info][gc,stats    ] Concurrent Update Thread Roots      662 us
[2.019s][info][gc,stats    ] Pause Final Update Refs (G)         151 us
[2.019s][info][gc,stats    ] Pause Final Update Refs (N)         108 us
[2.019s][info][gc,stats    ]   Update Region States               30 us
[2.019s][info][gc,stats    ]   Trash Collection Set                4 us
[2.019s][info][gc,stats    ]   Rebuild Free Set                   19 us
[2.019s][info][gc,stats    ] Concurrent Cleanup                  142 us
[2.019s][info][gc,stats    ] 
[2.019s][info][gc,stats    ] Allocation pacing accrued:
[2.019s][info][gc,stats    ]       0 of  2014 ms (  0.0%): <total>
[2.019s][info][gc,stats    ]       0 of  2014 ms (  0.0%): <average total>
[2.019s][info][gc,stats    ] 
[2.019s][info][gc,metaspace] Metaspace: 21229K(21568K)->22589K(22976K) NonClass: 18881K(19072K)->20065K(20288K) Class: 2348K(2496K)->2524K(2688K)
[2.019s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.287s][info][gc          ] Cancelling GC: Stopping VM
[6.288s][info][gc,heap,exit] Heap
[6.288s][info][gc,heap,exit] Shenandoah Heap
[6.288s][info][gc,heap,exit]  1984M max, 1984M soft max, 153M committed, 84969K used
[6.288s][info][gc,heap,exit]  3969 x 512K regions
[6.288s][info][gc,heap,exit] Status: cancelled
[6.288s][info][gc,heap,exit] Reserved region:
[6.288s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.288s][info][gc,heap,exit] Collection set:
[6.288s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.288s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.288s][info][gc,heap,exit] 
[6.288s][info][gc,heap,exit]  Metaspace       used 25079K, committed 25408K, reserved 1114112K
[6.288s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.289s][info][gc,stats    ] 
[6.289s][info][gc,stats    ] GC STATISTICS:
[6.289s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.289s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.289s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.289s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.289s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.289s][info][gc,stats    ] 
[6.289s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.289s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.289s][info][gc,stats    ] 
[6.289s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.289s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.289s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.289s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.289s][info][gc,stats    ] 
[6.289s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.289s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.289s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.289s][info][gc,stats    ]   Raise max pacing delay with care.
[6.289s][info][gc,stats    ] 
[6.289s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      560 us) (n =     1) (lvls, us =      559,      559,      559,      559,      560)
[6.289s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      682 us) (n =     1) (lvls, us =      682,      682,      682,      682,      682)
[6.289s][info][gc,stats    ] Pause Init Mark (N)            =    0.000 s (a =      473 us) (n =     1) (lvls, us =      473,      473,      473,      473,      473)
[6.289s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[6.289s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     1583 us) (n =     1) (lvls, us =     1582,     1582,     1582,     1582,     1583)
[6.289s][info][gc,stats    ]   CMR: <total>                 =    0.003 s (a =     2821 us) (n =     1) (lvls, us =     2812,     2812,     2812,     2812,     2821)
[6.289s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1239 us) (n =     1) (lvls, us =     1230,     1230,     1230,     1230,     1239)
[6.289s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.000 s (a =      463 us) (n =     1) (lvls, us =      463,      463,      463,      463,      463)
[6.289s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1120 us) (n =     1) (lvls, us =     1113,     1113,     1113,     1113,     1120)
[6.289s][info][gc,stats    ] Concurrent Marking             =    0.064 s (a =    64491 us) (n =     1) (lvls, us =    64453,    64453,    64453,    64453,    64491)
[6.289s][info][gc,stats    ] Pause Final Mark (G)           =    0.007 s (a =     7294 us) (n =     1) (lvls, us =     7285,     7285,     7285,     7285,     7294)
[6.289s][info][gc,stats    ] Pause Final Mark (N)           =    0.007 s (a =     6912 us) (n =     1) (lvls, us =     6895,     6895,     6895,     6895,     6912)
[6.289s][info][gc,stats    ]   Finish Mark                  =    0.007 s (a =     6697 us) (n =     1) (lvls, us =     6680,     6680,     6680,     6680,     6697)
[6.289s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       38 us) (n =     1) (lvls, us =       38,       38,       38,       38,       38)
[6.289s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       95 us) (n =     1) (lvls, us =       95,       95,       95,       95,       95)
[6.289s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[6.289s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      293 us) (n =     1) (lvls, us =      293,      293,      293,      293,      293)
[6.289s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      204 us) (n =     1) (lvls, us =      203,      203,      203,      203,      204)
[6.289s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      204 us) (n =     1) (lvls, us =      203,      203,      203,      203,      204)
[6.289s][info][gc,stats    ] Concurrent Weak References     =    0.001 s (a =      511 us) (n =     1) (lvls, us =      510,      510,      510,      510,      511)
[6.289s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      395 us) (n =     1) (lvls, us =      395,      395,      395,      395,      395)
[6.289s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      395 us) (n =     1) (lvls, us =      395,      395,      395,      395,      395)
[6.289s][info][gc,stats    ] Concurrent Weak Roots          =    0.003 s (a =     2908 us) (n =     1) (lvls, us =     2891,     2891,     2891,     2891,     2908)
[6.289s][info][gc,stats    ]   Roots                        =    0.003 s (a =     2502 us) (n =     1) (lvls, us =     2500,     2500,     2500,     2500,     2502)
[6.289s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     2728 us) (n =     1) (lvls, us =     2715,     2715,     2715,     2715,     2728)
[6.289s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      754 us) (n =     1) (lvls, us =      754,      754,      754,      754,      754)
[6.289s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1962 us) (n =     1) (lvls, us =     1953,     1953,     1953,     1953,     1962)
[6.289s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       12 us) (n =     1) (lvls, us =       12,       12,       12,       12,       12)
[6.289s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      281 us) (n =     1) (lvls, us =      279,      279,      279,      279,      281)
[6.289s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      282 us) (n =     1) (lvls, us =      281,      281,      281,      281,      282)
[6.289s][info][gc,stats    ] Concurrent Class Unloading     =    0.014 s (a =    14441 us) (n =     1) (lvls, us =    14258,    14258,    14258,    14258,    14441)
[6.289s][info][gc,stats    ]   Unlink Stale                 =    0.006 s (a =     5704 us) (n =     1) (lvls, us =     5703,     5703,     5703,     5703,     5704)
[6.289s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =      204 us) (n =     1) (lvls, us =      203,      203,      203,      203,      204)
[6.289s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.289s][info][gc,stats    ]     Code Roots                 =    0.005 s (a =     5498 us) (n =     1) (lvls, us =     5488,     5488,     5488,     5488,     5498)
[6.289s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      112 us) (n =     1) (lvls, us =      111,      111,      111,      111,      112)
[6.289s][info][gc,stats    ]   Purge Unlinked               =    0.008 s (a =     8493 us) (n =     1) (lvls, us =     8477,     8477,     8477,     8477,     8493)
[6.289s][info][gc,stats    ]     Code Roots                 =    0.008 s (a =     8480 us) (n =     1) (lvls, us =     8477,     8477,     8477,     8477,     8480)
[6.289s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       12 us) (n =     1) (lvls, us =       12,       12,       12,       12,       12)
[6.289s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.290s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     1521 us) (n =     1) (lvls, us =     1504,     1504,     1504,     1504,     1521)
[6.290s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1389 us) (n =     1) (lvls, us =     1387,     1387,     1387,     1387,     1389)
[6.290s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       21 us) (n =     1) (lvls, us =       21,       21,       21,       21,       21)
[6.290s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1368 us) (n =     1) (lvls, us =     1367,     1367,     1367,     1367,     1368)
[6.290s][info][gc,stats    ] Concurrent Evacuation          =    0.009 s (a =     8870 us) (n =     1) (lvls, us =     8867,     8867,     8867,     8867,     8870)
[6.290s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      163 us) (n =     1) (lvls, us =      162,      162,      162,      162,      163)
[6.290s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       53 us) (n =     1) (lvls, us =       53,       53,       53,       53,       53)
[6.290s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.290s][info][gc,stats    ] Concurrent Update Refs         =    0.027 s (a =    26622 us) (n =     1) (lvls, us =    26563,    26563,    26563,    26563,    26622)
[6.290s][info][gc,stats    ] Concurrent Update Thread Roots =    0.001 s (a =      662 us) (n =     1) (lvls, us =      660,      660,      660,      660,      662)
[6.290s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      151 us) (n =     1) (lvls, us =      150,      150,      150,      150,      151)
[6.290s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      108 us) (n =     1) (lvls, us =      107,      107,      107,      107,      108)
[6.290s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       30 us) (n =     1) (lvls, us =       30,       30,       30,       30,       30)
[6.290s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.290s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[6.290s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      142 us) (n =     1) (lvls, us =      141,      141,      141,      141,      142)
[6.290s][info][gc,stats    ] 
[6.290s][info][gc,stats    ] 
[6.290s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.290s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.290s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.290s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.290s][info][gc,stats    ] 
[6.290s][info][gc,stats    ]     1 successful concurrent GCs
[6.290s][info][gc,stats    ]       0 invoked explicitly
[6.290s][info][gc,stats    ]       0 invoked implicitly
[6.290s][info][gc,stats    ] 
[6.290s][info][gc,stats    ]     0 Degenerated GCs
[6.290s][info][gc,stats    ]       0 caused by allocation failure
[6.290s][info][gc,stats    ]       0 upgraded to Full GC
[6.290s][info][gc,stats    ] 
[6.290s][info][gc,stats    ]     0 Full GCs
[6.290s][info][gc,stats    ]       0 invoked explicitly
[6.290s][info][gc,stats    ]       0 invoked implicitly
[6.290s][info][gc,stats    ]       0 caused by allocation failure
[6.290s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.290s][info][gc,stats    ] 
[6.290s][info][gc,stats    ] 
