[0.006s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.007s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.007s][info][gc] Using Shenandoah
[0.008s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.008s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.008s][info][gc,init] CPUs: 4 total, 4 available
[0.008s][info][gc,init] Memory: 7937M
[0.008s][info][gc,init] Large Page Support: Disabled
[0.008s][info][gc,init] NUMA Support: Disabled
[0.008s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.008s][info][gc,init] Heap Min Capacity: 6656K
[0.008s][info][gc,init] Heap Initial Capacity: 127488K
[0.008s][info][gc,init] Heap Max Capacity: 2032128K
[0.008s][info][gc,init] Pre-touch: Disabled
[0.008s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.008s][info][gc,init] Heuristics: Adaptive
[0.008s][info][gc,init] Heap Region Count: 3969
[0.008s][info][gc,init] Heap Region Size: 512K
[0.008s][info][gc,init] TLAB Size Max: 512K
[0.008s][info][gc,init] Humongous Object Threshold: 512K
[0.008s][info][gc,init] Parallel Workers: 8
[0.008s][info][gc,init] Concurrent Workers: 2
[0.018s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007fa99b000000-0x00007fa99bc97000-0x00007fa99bc97000), size 13201408, SharedBaseAddress: 0x00007fa99b000000, ArchiveRelocationMode: 1.
[0.018s][info][gc,metaspace] Compressed class space mapped at: 0x00007fa99c000000-0x00007fa9dc000000, reserved size: 1073741824
[0.018s][info][gc,metaspace] Narrow klass base: 0x00007fa99b000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.263s][info][gc          ] Trigger: Metadata GC Threshold
[1.263s][info][gc,ergo     ] Free: 1789M, Max: 512K regular, 1789M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.263s][info][gc,start    ] GC(0) Concurrent reset
[1.263s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.263s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.264s][info][gc          ] GC(0) Concurrent reset 0.473ms
[1.264s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.264s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.264s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1789M, Non-Taxable: 178M, Alloc Tax Rate: 0.1x
[1.264s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.501ms
[1.265s][info][gc,start    ] GC(0) Concurrent marking roots
[1.265s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.269s][info][gc          ] GC(0) Concurrent marking roots 4.310ms
[1.269s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.269s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.287s][info][gc          ] GC(0) Concurrent marking (unload classes) 17.906ms
[1.287s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.287s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.287s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1892M, Max CSet: 84672K, Min Garbage: 0B
[1.287s][info][gc,ergo     ] GC(0) Collectable Garbage: 82593K (99%), Immediate: 5343K (6%), CSet: 77250K (92%)
[1.287s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 84992K, Free: 1793M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.287s][info][gc          ] GC(0) Pause Final Mark (unload classes) 0.333ms
[1.287s][info][gc,start    ] GC(0) Concurrent thread roots
[1.287s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.287s][info][gc          ] GC(0) Concurrent thread roots 0.211ms
[1.287s][info][gc,start    ] GC(0) Concurrent weak references
[1.287s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.288s][info][gc,ref      ] GC(0) Encountered references: Soft: 3956, Weak: 2146, Final: 20, Phantom: 797
[1.288s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 781, Final: 16, Phantom: 670
[1.288s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 483, Final: 0, Phantom: 318
[1.288s][info][gc          ] GC(0) Concurrent weak references 0.295ms
[1.288s][info][gc,start    ] GC(0) Concurrent weak roots
[1.288s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.292s][info][gc          ] GC(0) Concurrent weak roots 3.942ms
[1.292s][info][gc,start    ] GC(0) Concurrent cleanup
[1.292s][info][gc          ] GC(0) Concurrent cleanup 98M->92M(125M) 0.077ms
[1.292s][info][gc,ergo     ] GC(0) Free: 1792M, Max: 512K regular, 1787M humongous, Frag: 1% external, 0% internal; Reserve: 101083K, Max: 512K
[1.292s][info][gc,start    ] GC(0) Concurrent class unloading
[1.292s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.298s][info][gc          ] GC(0) Concurrent class unloading 5.896ms
[1.298s][info][gc,start    ] GC(0) Concurrent strong roots
[1.298s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.299s][info][gc          ] GC(0) Concurrent strong roots 1.632ms
[1.299s][info][gc,start    ] GC(0) Concurrent evacuation
[1.299s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.307s][info][gc          ] GC(0) Concurrent evacuation 7.388ms
[1.307s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.307s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 101M, Free: 1792M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.307s][info][gc          ] GC(0) Pause Init Update Refs 0.079ms
[1.307s][info][gc,start    ] GC(0) Concurrent update references
[1.307s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.312s][info][gc          ] GC(0) Concurrent update references 4.629ms
[1.312s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.312s][info][gc          ] GC(0) Concurrent update thread roots 0.298ms
[1.312s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.312s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.312s][info][gc          ] GC(0) Pause Final Update Refs 0.078ms
[1.312s][info][gc,start    ] GC(0) Concurrent cleanup
[1.312s][info][gc          ] GC(0) Concurrent cleanup 101M->18M(134M) 0.080ms
[1.312s][info][gc,ergo     ] Free: 1865M, Max: 512K regular, 1777M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.312s][info][gc,stats    ] 
[1.312s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.312s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.312s][info][gc,stats    ] 
[1.312s][info][gc,stats    ] Concurrent Reset                    507 us
[1.312s][info][gc,stats    ] Pause Init Mark (G)                 967 us
[1.312s][info][gc,stats    ] Pause Init Mark (N)                 520 us
[1.312s][info][gc,stats    ]   Update Region States               24 us
[1.312s][info][gc,stats    ] Concurrent Mark Roots              4344 us, parallelism: 0.96x
[1.312s][info][gc,stats    ]   CMR: <total>                     4171 us
[1.312s][info][gc,stats    ]   CMR: Thread Roots                1359 us, workers (us): 1359,   0, ---, ---, ---, ---, ---, ---, 
[1.312s][info][gc,stats    ]   CMR: VM Strong Roots              773 us, workers (us): 773,   0, ---, ---, ---, ---, ---, ---, 
[1.312s][info][gc,stats    ]   CMR: CLDG Roots                  2039 us, workers (us): 2039, ---, ---, ---, ---, ---, ---, ---, 
[1.312s][info][gc,stats    ] Concurrent Marking                17925 us
[1.312s][info][gc,stats    ] Pause Final Mark (G)                458 us
[1.312s][info][gc,stats    ] Pause Final Mark (N)                344 us
[1.312s][info][gc,stats    ]   Finish Mark                       146 us
[1.312s][info][gc,stats    ]   Update Region States               25 us
[1.312s][info][gc,stats    ]   Choose Collection Set              84 us
[1.312s][info][gc,stats    ]   Rebuild Free Set                   20 us
[1.312s][info][gc,stats    ] Concurrent Thread Roots             234 us, parallelism: 1.20x
[1.312s][info][gc,stats    ]   CTR: <total>                      279 us
[1.313s][info][gc,stats    ]   CTR: Thread Roots                 279 us, workers (us): 138, 142, ---, ---, ---, ---, ---, ---, 
[1.313s][info][gc,stats    ] Concurrent Weak References          303 us, parallelism: 0.94x
[1.313s][info][gc,stats    ]   CWRF: <total>                     287 us
[1.313s][info][gc,stats    ]   CWRF: Weak References             287 us, workers (us):  79, 208, ---, ---, ---, ---, ---, ---, 
[1.313s][info][gc,stats    ] Concurrent Weak Roots              3968 us
[1.313s][info][gc,stats    ]   Roots                            1818 us, parallelism: 1.92x
[1.313s][info][gc,stats    ]     CWR: <total>                   3483 us
[1.313s][info][gc,stats    ]     CWR: Code Cache Roots           969 us, workers (us): 470, 499, ---, ---, ---, ---, ---, ---, 
[1.313s][info][gc,stats    ]     CWR: VM Weak Roots             2495 us, workers (us): 1265, 1230, ---, ---, ---, ---, ---, ---, 
[1.313s][info][gc,stats    ]     CWR: CLDG Roots                  18 us, workers (us):  18, ---, ---, ---, ---, ---, ---, ---, 
[1.313s][info][gc,stats    ]   Rendezvous                       2106 us
[1.313s][info][gc,stats    ] Concurrent Cleanup                   86 us
[1.313s][info][gc,stats    ] Concurrent Class Unloading         5914 us
[1.313s][info][gc,stats    ]   Unlink Stale                     3562 us
[1.313s][info][gc,stats    ]     System Dictionary                33 us
[1.313s][info][gc,stats    ]     Weak Class Links                  0 us
[1.313s][info][gc,stats    ]     Code Roots                     3528 us
[1.313s][info][gc,stats    ]   Rendezvous                         41 us
[1.313s][info][gc,stats    ]   Purge Unlinked                   2271 us
[1.313s][info][gc,stats    ]     Code Roots                     2261 us
[1.313s][info][gc,stats    ]     CLDG                              9 us
[1.313s][info][gc,stats    ]     Exception Caches                  0 us
[1.313s][info][gc,stats    ] Concurrent Strong Roots            1651 us, parallelism: 0.96x
[1.313s][info][gc,stats    ]   CSR: <total>                     1581 us
[1.313s][info][gc,stats    ]   CSR: VM Strong Roots               19 us, workers (us):   8,  11, ---, ---, ---, ---, ---, ---, 
[1.313s][info][gc,stats    ]   CSR: CLDG Roots                  1563 us, workers (us): 1563, ---, ---, ---, ---, ---, ---, ---, 
[1.313s][info][gc,stats    ] Concurrent Evacuation              7412 us
[1.313s][info][gc,stats    ] Pause Init Update Refs (G)          200 us
[1.313s][info][gc,stats    ] Pause Init Update Refs (N)           87 us
[1.313s][info][gc,stats    ]   Manage GCLABs                       5 us
[1.313s][info][gc,stats    ] Concurrent Update Refs             4653 us
[1.313s][info][gc,stats    ] Concurrent Update Thread Roots      315 us
[1.313s][info][gc,stats    ] Pause Final Update Refs (G)         189 us
[1.313s][info][gc,stats    ] Pause Final Update Refs (N)          88 us
[1.313s][info][gc,stats    ]   Update Region States               20 us
[1.313s][info][gc,stats    ]   Trash Collection Set                4 us
[1.313s][info][gc,stats    ]   Rebuild Free Set                   17 us
[1.313s][info][gc,stats    ] Concurrent Cleanup                   90 us
[1.313s][info][gc,stats    ] 
[1.313s][info][gc,stats    ] Allocation pacing accrued:
[1.313s][info][gc,stats    ]       0 of  1305 ms (  0.0%): <total>
[1.313s][info][gc,stats    ]       0 of  1305 ms (  0.0%): <average total>
[1.313s][info][gc,stats    ] 
[1.313s][info][gc,metaspace] Metaspace: 21247K(21568K)->21729K(22080K) NonClass: 18908K(19072K)->19315K(19520K) Class: 2338K(2496K)->2414K(2560K)
[1.313s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[7.599s][info][gc          ] Cancelling GC: Stopping VM
[7.600s][info][gc,heap,exit] Heap
[7.600s][info][gc,heap,exit] Shenandoah Heap
[7.600s][info][gc,heap,exit]  1984M max, 1984M soft max, 134M committed, 37876K used
[7.600s][info][gc,heap,exit]  3969 x 512K regions
[7.600s][info][gc,heap,exit] Status: cancelled
[7.600s][info][gc,heap,exit] Reserved region:
[7.600s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[7.600s][info][gc,heap,exit] Collection set:
[7.600s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[7.600s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[7.600s][info][gc,heap,exit] 
[7.600s][info][gc,heap,exit]  Metaspace       used 25408K, committed 25728K, reserved 1114112K
[7.600s][info][gc,heap,exit]   class space    used 2923K, committed 3072K, reserved 1048576K
[7.600s][info][gc,stats    ] 
[7.600s][info][gc,stats    ] GC STATISTICS:
[7.600s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[7.600s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[7.600s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[7.600s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[7.600s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[7.600s][info][gc,stats    ] 
[7.600s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[7.600s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[7.600s][info][gc,stats    ] 
[7.600s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[7.600s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[7.600s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[7.600s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[7.600s][info][gc,stats    ] 
[7.600s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[7.600s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[7.600s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[7.600s][info][gc,stats    ]   Raise max pacing delay with care.
[7.600s][info][gc,stats    ] 
[7.600s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      507 us) (n =     1) (lvls, us =      506,      506,      506,      506,      507)
[7.600s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      967 us) (n =     1) (lvls, us =      967,      967,      967,      967,      967)
[7.600s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      520 us) (n =     1) (lvls, us =      520,      520,      520,      520,      520)
[7.601s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       24 us) (n =     1) (lvls, us =       23,       23,       23,       23,       24)
[7.601s][info][gc,stats    ] Concurrent Mark Roots          =    0.004 s (a =     4344 us) (n =     1) (lvls, us =     4336,     4336,     4336,     4336,     4344)
[7.601s][info][gc,stats    ]   CMR: <total>                 =    0.004 s (a =     4171 us) (n =     1) (lvls, us =     4160,     4160,     4160,     4160,     4171)
[7.601s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1359 us) (n =     1) (lvls, us =     1348,     1348,     1348,     1348,     1359)
[7.601s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      773 us) (n =     1) (lvls, us =      771,      771,      771,      771,      773)
[7.601s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     2039 us) (n =     1) (lvls, us =     2031,     2031,     2031,     2031,     2039)
[7.601s][info][gc,stats    ] Concurrent Marking             =    0.018 s (a =    17925 us) (n =     1) (lvls, us =    17773,    17773,    17773,    17773,    17925)
[7.601s][info][gc,stats    ] Pause Final Mark (G)           =    0.000 s (a =      458 us) (n =     1) (lvls, us =      457,      457,      457,      457,      458)
[7.601s][info][gc,stats    ] Pause Final Mark (N)           =    0.000 s (a =      344 us) (n =     1) (lvls, us =      344,      344,      344,      344,      344)
[7.601s][info][gc,stats    ]   Finish Mark                  =    0.000 s (a =      146 us) (n =     1) (lvls, us =      145,      145,      145,      145,      146)
[7.601s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       25 us) (n =     1) (lvls, us =       25,       25,       25,       25,       25)
[7.601s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       84 us) (n =     1) (lvls, us =       84,       84,       84,       84,       84)
[7.601s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[7.601s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      234 us) (n =     1) (lvls, us =      232,      232,      232,      232,      234)
[7.601s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      279 us) (n =     1) (lvls, us =      279,      279,      279,      279,      279)
[7.601s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      279 us) (n =     1) (lvls, us =      279,      279,      279,      279,      279)
[7.601s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      303 us) (n =     1) (lvls, us =      303,      303,      303,      303,      303)
[7.601s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      287 us) (n =     1) (lvls, us =      285,      285,      285,      285,      287)
[7.601s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      287 us) (n =     1) (lvls, us =      285,      285,      285,      285,      287)
[7.601s][info][gc,stats    ] Concurrent Weak Roots          =    0.004 s (a =     3968 us) (n =     1) (lvls, us =     3965,     3965,     3965,     3965,     3968)
[7.601s][info][gc,stats    ]   Roots                        =    0.002 s (a =     1818 us) (n =     1) (lvls, us =     1816,     1816,     1816,     1816,     1818)
[7.601s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     3483 us) (n =     1) (lvls, us =     3477,     3477,     3477,     3477,     3483)
[7.601s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      969 us) (n =     1) (lvls, us =      969,      969,      969,      969,      969)
[7.601s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     2495 us) (n =     1) (lvls, us =     2480,     2480,     2480,     2480,     2495)
[7.601s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[7.601s][info][gc,stats    ]   Rendezvous                   =    0.002 s (a =     2106 us) (n =     1) (lvls, us =     2090,     2090,     2090,     2090,     2106)
[7.601s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       86 us) (n =     1) (lvls, us =       86,       86,       86,       86,       86)
[7.601s][info][gc,stats    ] Concurrent Class Unloading     =    0.006 s (a =     5914 us) (n =     1) (lvls, us =     5898,     5898,     5898,     5898,     5914)
[7.601s][info][gc,stats    ]   Unlink Stale                 =    0.004 s (a =     3562 us) (n =     1) (lvls, us =     3555,     3555,     3555,     3555,     3562)
[7.601s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       33 us) (n =     1) (lvls, us =       33,       33,       33,       33,       33)
[7.601s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.601s][info][gc,stats    ]     Code Roots                 =    0.004 s (a =     3528 us) (n =     1) (lvls, us =     3516,     3516,     3516,     3516,     3528)
[7.601s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       41 us) (n =     1) (lvls, us =       41,       41,       41,       41,       41)
[7.601s][info][gc,stats    ]   Purge Unlinked               =    0.002 s (a =     2271 us) (n =     1) (lvls, us =     2266,     2266,     2266,     2266,     2271)
[7.601s][info][gc,stats    ]     Code Roots                 =    0.002 s (a =     2261 us) (n =     1) (lvls, us =     2246,     2246,     2246,     2246,     2261)
[7.601s][info][gc,stats    ]     CLDG                       =    0.000 s (a =        9 us) (n =     1) (lvls, us =        9,        9,        9,        9,        9)
[7.601s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.601s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     1651 us) (n =     1) (lvls, us =     1641,     1641,     1641,     1641,     1651)
[7.601s][info][gc,stats    ]   CSR: <total>                 =    0.002 s (a =     1581 us) (n =     1) (lvls, us =     1562,     1562,     1562,     1562,     1581)
[7.601s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[7.601s][info][gc,stats    ]   CSR: CLDG Roots              =    0.002 s (a =     1563 us) (n =     1) (lvls, us =     1562,     1562,     1562,     1562,     1563)
[7.601s][info][gc,stats    ] Concurrent Evacuation          =    0.007 s (a =     7412 us) (n =     1) (lvls, us =     7402,     7402,     7402,     7402,     7412)
[7.601s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      200 us) (n =     1) (lvls, us =      199,      199,      199,      199,      200)
[7.601s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       87 us) (n =     1) (lvls, us =       87,       87,       87,       87,       87)
[7.601s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[7.601s][info][gc,stats    ] Concurrent Update Refs         =    0.005 s (a =     4653 us) (n =     1) (lvls, us =     4648,     4648,     4648,     4648,     4653)
[7.601s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      315 us) (n =     1) (lvls, us =      314,      314,      314,      314,      315)
[7.601s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      189 us) (n =     1) (lvls, us =      188,      188,      188,      188,      189)
[7.601s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =       88 us) (n =     1) (lvls, us =       88,       88,       88,       88,       88)
[7.601s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[7.601s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[7.601s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[7.601s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       90 us) (n =     1) (lvls, us =       90,       90,       90,       90,       90)
[7.601s][info][gc,stats    ] 
[7.601s][info][gc,stats    ] 
[7.601s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[7.601s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[7.601s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[7.601s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[7.601s][info][gc,stats    ] 
[7.601s][info][gc,stats    ]     1 successful concurrent GCs
[7.601s][info][gc,stats    ]       0 invoked explicitly
[7.601s][info][gc,stats    ]       0 invoked implicitly
[7.601s][info][gc,stats    ] 
[7.601s][info][gc,stats    ]     0 Degenerated GCs
[7.601s][info][gc,stats    ]       0 caused by allocation failure
[7.601s][info][gc,stats    ]       0 upgraded to Full GC
[7.601s][info][gc,stats    ] 
[7.601s][info][gc,stats    ]     0 Full GCs
[7.601s][info][gc,stats    ]       0 invoked explicitly
[7.601s][info][gc,stats    ]       0 invoked implicitly
[7.601s][info][gc,stats    ]       0 caused by allocation failure
[7.601s][info][gc,stats    ]       0 upgraded from Degenerated GC
[7.601s][info][gc,stats    ] 
[7.601s][info][gc,stats    ] 
