[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.005s][info][gc] Using Shenandoah
[0.006s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.006s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.006s][info][gc,init] CPUs: 4 total, 4 available
[0.006s][info][gc,init] Memory: 7937M
[0.006s][info][gc,init] Large Page Support: Disabled
[0.006s][info][gc,init] NUMA Support: Disabled
[0.006s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.006s][info][gc,init] Heap Min Capacity: 6656K
[0.006s][info][gc,init] Heap Initial Capacity: 127488K
[0.006s][info][gc,init] Heap Max Capacity: 2032128K
[0.006s][info][gc,init] Pre-touch: Disabled
[0.006s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.006s][info][gc,init] Heuristics: Adaptive
[0.006s][info][gc,init] Heap Region Count: 3969
[0.006s][info][gc,init] Heap Region Size: 512K
[0.006s][info][gc,init] TLAB Size Max: 512K
[0.006s][info][gc,init] Humongous Object Threshold: 512K
[0.006s][info][gc,init] Parallel Workers: 8
[0.006s][info][gc,init] Concurrent Workers: 2
[0.013s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f1b6b000000-0x00007f1b6bc97000-0x00007f1b6bc97000), size 13201408, SharedBaseAddress: 0x00007f1b6b000000, ArchiveRelocationMode: 1.
[0.013s][info][gc,metaspace] Compressed class space mapped at: 0x00007f1b6c000000-0x00007f1bac000000, reserved size: 1073741824
[0.013s][info][gc,metaspace] Narrow klass base: 0x00007f1b6b000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.824s][info][gc          ] Trigger: Metadata GC Threshold
[1.824s][info][gc,ergo     ] Free: 1747M, Max: 512K regular, 1747M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.824s][info][gc,start    ] GC(0) Concurrent reset
[1.825s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.825s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.825s][info][gc          ] GC(0) Concurrent reset 0.351ms
[1.825s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.825s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.825s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.825s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.506ms
[1.826s][info][gc,start    ] GC(0) Concurrent marking roots
[1.826s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.832s][info][gc          ] GC(0) Concurrent marking roots 6.070ms
[1.832s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.832s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.898s][info][gc          ] GC(0) Concurrent marking (unload classes) 66.253ms
[1.898s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.898s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.898s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1846M, Max CSet: 84672K, Min Garbage: 0B
[1.898s][info][gc,ergo     ] GC(0) Collectable Garbage: 72031K (98%), Immediate: 5359K (7%), CSet: 66672K (91%)
[1.898s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 74752K, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.898s][info][gc          ] GC(0) Pause Final Mark (unload classes) 0.297ms
[1.898s][info][gc,start    ] GC(0) Concurrent thread roots
[1.898s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.899s][info][gc          ] GC(0) Concurrent thread roots 0.353ms
[1.899s][info][gc,start    ] GC(0) Concurrent weak references
[1.899s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.899s][info][gc,ref      ] GC(0) Encountered references: Soft: 3953, Weak: 2095, Final: 4, Phantom: 820
[1.899s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1269, Final: 0, Phantom: 433
[1.899s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 497, Final: 0, Phantom: 230
[1.899s][info][gc          ] GC(0) Concurrent weak references 0.447ms
[1.899s][info][gc,start    ] GC(0) Concurrent weak roots
[1.899s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.901s][info][gc          ] GC(0) Concurrent weak roots 1.505ms
[1.901s][info][gc,start    ] GC(0) Concurrent cleanup
[1.901s][info][gc          ] GC(0) Concurrent cleanup 141M->136M(145M) 0.182ms
[1.901s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1741M humongous, Frag: 1% external, 0% internal; Reserve: 101244K, Max: 512K
[1.901s][info][gc,start    ] GC(0) Concurrent class unloading
[1.901s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.907s][info][gc          ] GC(0) Concurrent class unloading 6.002ms
[1.907s][info][gc,start    ] GC(0) Concurrent strong roots
[1.907s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.908s][info][gc          ] GC(0) Concurrent strong roots 1.486ms
[1.908s][info][gc,start    ] GC(0) Concurrent evacuation
[1.908s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.917s][info][gc          ] GC(0) Concurrent evacuation 8.695ms
[1.918s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.918s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 145M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.918s][info][gc          ] GC(0) Pause Init Update Refs 0.048ms
[1.918s][info][gc,start    ] GC(0) Concurrent update references
[1.918s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.941s][info][gc          ] GC(0) Concurrent update references 22.733ms
[1.941s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.941s][info][gc          ] GC(0) Concurrent update thread roots 0.314ms
[1.941s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.941s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.941s][info][gc          ] GC(0) Pause Final Update Refs 0.100ms
[1.942s][info][gc,start    ] GC(0) Concurrent cleanup
[1.942s][info][gc          ] GC(0) Concurrent cleanup 145M->72M(152M) 0.098ms
[1.942s][info][gc,ergo     ] Free: 1809M, Max: 512K regular, 1732M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.942s][info][gc,stats    ] 
[1.942s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.942s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.942s][info][gc,stats    ] 
[1.942s][info][gc,stats    ] Concurrent Reset                    366 us
[1.942s][info][gc,stats    ] Pause Init Mark (G)                 733 us
[1.942s][info][gc,stats    ] Pause Init Mark (N)                 524 us
[1.942s][info][gc,stats    ]   Update Region States               32 us
[1.942s][info][gc,stats    ] Concurrent Mark Roots              6098 us, parallelism: 1.95x
[1.942s][info][gc,stats    ]   CMR: <total>                    11911 us
[1.942s][info][gc,stats    ]   CMR: Thread Roots                6210 us, workers (us): 5579, 631, ---, ---, ---, ---, ---, ---, 
[1.942s][info][gc,stats    ]   CMR: VM Strong Roots              610 us, workers (us): 391, 219, ---, ---, ---, ---, ---, ---, 
[1.942s][info][gc,stats    ]   CMR: CLDG Roots                  5091 us, workers (us): ---, 5091, ---, ---, ---, ---, ---, ---, 
[1.942s][info][gc,stats    ] Concurrent Marking                66281 us
[1.942s][info][gc,stats    ] Pause Final Mark (G)                414 us
[1.942s][info][gc,stats    ] Pause Final Mark (N)                306 us
[1.942s][info][gc,stats    ]   Finish Mark                       103 us
[1.942s][info][gc,stats    ]   Update Region States               41 us
[1.942s][info][gc,stats    ]   Choose Collection Set              83 us
[1.942s][info][gc,stats    ]   Rebuild Free Set                   17 us
[1.942s][info][gc,stats    ] Concurrent Thread Roots             370 us, parallelism: 1.08x
[1.942s][info][gc,stats    ]   CTR: <total>                      399 us
[1.942s][info][gc,stats    ]   CTR: Thread Roots                 399 us, workers (us): 306,  93, ---, ---, ---, ---, ---, ---, 
[1.942s][info][gc,stats    ] Concurrent Weak References          456 us, parallelism: 0.82x
[1.942s][info][gc,stats    ]   CWRF: <total>                     373 us
[1.942s][info][gc,stats    ]   CWRF: Weak References             373 us, workers (us): 372,   1, ---, ---, ---, ---, ---, ---, 
[1.942s][info][gc,stats    ] Concurrent Weak Roots              1530 us
[1.942s][info][gc,stats    ]   Roots                            1447 us, parallelism: 1.90x
[1.942s][info][gc,stats    ]     CWR: <total>                   2749 us
[1.942s][info][gc,stats    ]     CWR: Code Cache Roots           785 us, workers (us): 372, 413, ---, ---, ---, ---, ---, ---, 
[1.942s][info][gc,stats    ]     CWR: VM Weak Roots             1945 us, workers (us): 982, 962, ---, ---, ---, ---, ---, ---, 
[1.942s][info][gc,stats    ]     CWR: CLDG Roots                  20 us, workers (us): ---,  20, ---, ---, ---, ---, ---, ---, 
[1.942s][info][gc,stats    ]   Rendezvous                         38 us
[1.942s][info][gc,stats    ] Concurrent Cleanup                  195 us
[1.942s][info][gc,stats    ] Concurrent Class Unloading         6019 us
[1.942s][info][gc,stats    ]   Unlink Stale                     2848 us
[1.942s][info][gc,stats    ]     System Dictionary                40 us
[1.942s][info][gc,stats    ]     Weak Class Links                  0 us
[1.942s][info][gc,stats    ]     Code Roots                     2806 us
[1.942s][info][gc,stats    ]   Rendezvous                        122 us
[1.942s][info][gc,stats    ]   Purge Unlinked                   3015 us
[1.942s][info][gc,stats    ]     Code Roots                     3006 us
[1.942s][info][gc,stats    ]     CLDG                              9 us
[1.942s][info][gc,stats    ]     Exception Caches                  0 us
[1.942s][info][gc,stats    ] Concurrent Strong Roots            1510 us, parallelism: 0.95x
[1.942s][info][gc,stats    ]   CSR: <total>                     1441 us
[1.942s][info][gc,stats    ]   CSR: VM Strong Roots               17 us, workers (us):  13,   5, ---, ---, ---, ---, ---, ---, 
[1.942s][info][gc,stats    ]   CSR: CLDG Roots                  1423 us, workers (us): ---, 1423, ---, ---, ---, ---, ---, ---, 
[1.942s][info][gc,stats    ] Concurrent Evacuation              8720 us
[1.942s][info][gc,stats    ] Pause Init Update Refs (G)         1013 us
[1.942s][info][gc,stats    ] Pause Init Update Refs (N)           57 us
[1.942s][info][gc,stats    ]   Manage GCLABs                       6 us
[1.942s][info][gc,stats    ] Concurrent Update Refs            22765 us
[1.942s][info][gc,stats    ] Concurrent Update Thread Roots      327 us
[1.942s][info][gc,stats    ] Pause Final Update Refs (G)         207 us
[1.942s][info][gc,stats    ] Pause Final Update Refs (N)         112 us
[1.942s][info][gc,stats    ]   Update Region States               37 us
[1.942s][info][gc,stats    ]   Trash Collection Set                4 us
[1.942s][info][gc,stats    ]   Rebuild Free Set                   19 us
[1.942s][info][gc,stats    ] Concurrent Cleanup                  109 us
[1.942s][info][gc,stats    ] 
[1.942s][info][gc,stats    ] Allocation pacing accrued:
[1.942s][info][gc,stats    ]       0 of  1937 ms (  0.0%): <total>
[1.942s][info][gc,stats    ]       0 of  1937 ms (  0.0%): <average total>
[1.942s][info][gc,stats    ] 
[1.942s][info][gc,metaspace] Metaspace: 21232K(21568K)->22434K(22784K) NonClass: 18884K(19072K)->19925K(20096K) Class: 2347K(2496K)->2508K(2688K)
[1.942s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.215s][info][gc          ] Cancelling GC: Stopping VM
[6.216s][info][gc,heap,exit] Heap
[6.216s][info][gc,heap,exit] Shenandoah Heap
[6.216s][info][gc,heap,exit]  1984M max, 1984M soft max, 152M committed, 85488K used
[6.216s][info][gc,heap,exit]  3969 x 512K regions
[6.216s][info][gc,heap,exit] Status: cancelled
[6.216s][info][gc,heap,exit] Reserved region:
[6.216s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.216s][info][gc,heap,exit] Collection set:
[6.216s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.216s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.216s][info][gc,heap,exit] 
[6.216s][info][gc,heap,exit]  Metaspace       used 25095K, committed 25408K, reserved 1114112K
[6.216s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.216s][info][gc,stats    ] 
[6.216s][info][gc,stats    ] GC STATISTICS:
[6.216s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.216s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.216s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.216s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.216s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.216s][info][gc,stats    ] 
[6.216s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.216s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.216s][info][gc,stats    ] 
[6.216s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.216s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.216s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.216s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.216s][info][gc,stats    ] 
[6.216s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.216s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.216s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.216s][info][gc,stats    ]   Raise max pacing delay with care.
[6.216s][info][gc,stats    ] 
[6.216s][info][gc,stats    ] Concurrent Reset               =    0.000 s (a =      366 us) (n =     1) (lvls, us =      365,      365,      365,      365,      366)
[6.216s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      733 us) (n =     1) (lvls, us =      732,      732,      732,      732,      733)
[6.216s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      524 us) (n =     1) (lvls, us =      523,      523,      523,      523,      524)
[6.217s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       32 us) (n =     1) (lvls, us =       32,       32,       32,       32,       32)
[6.217s][info][gc,stats    ] Concurrent Mark Roots          =    0.006 s (a =     6098 us) (n =     1) (lvls, us =     6094,     6094,     6094,     6094,     6098)
[6.217s][info][gc,stats    ]   CMR: <total>                 =    0.012 s (a =    11911 us) (n =     1) (lvls, us =    11719,    11719,    11719,    11719,    11911)
[6.217s][info][gc,stats    ]   CMR: Thread Roots            =    0.006 s (a =     6210 us) (n =     1) (lvls, us =     6191,     6191,     6191,     6191,     6210)
[6.217s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      610 us) (n =     1) (lvls, us =      609,      609,      609,      609,      610)
[6.217s][info][gc,stats    ]   CMR: CLDG Roots              =    0.005 s (a =     5091 us) (n =     1) (lvls, us =     5078,     5078,     5078,     5078,     5091)
[6.217s][info][gc,stats    ] Concurrent Marking             =    0.066 s (a =    66281 us) (n =     1) (lvls, us =    66211,    66211,    66211,    66211,    66281)
[6.217s][info][gc,stats    ] Pause Final Mark (G)           =    0.000 s (a =      414 us) (n =     1) (lvls, us =      412,      412,      412,      412,      414)
[6.217s][info][gc,stats    ] Pause Final Mark (N)           =    0.000 s (a =      306 us) (n =     1) (lvls, us =      305,      305,      305,      305,      306)
[6.217s][info][gc,stats    ]   Finish Mark                  =    0.000 s (a =      103 us) (n =     1) (lvls, us =      102,      102,      102,      102,      103)
[6.217s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       41 us) (n =     1) (lvls, us =       41,       41,       41,       41,       41)
[6.217s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       83 us) (n =     1) (lvls, us =       83,       83,       83,       83,       83)
[6.217s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[6.217s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      370 us) (n =     1) (lvls, us =      369,      369,      369,      369,      370)
[6.217s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      399 us) (n =     1) (lvls, us =      398,      398,      398,      398,      399)
[6.217s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      399 us) (n =     1) (lvls, us =      398,      398,      398,      398,      399)
[6.217s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      456 us) (n =     1) (lvls, us =      455,      455,      455,      455,      456)
[6.217s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      373 us) (n =     1) (lvls, us =      373,      373,      373,      373,      373)
[6.217s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      373 us) (n =     1) (lvls, us =      373,      373,      373,      373,      373)
[6.217s][info][gc,stats    ] Concurrent Weak Roots          =    0.002 s (a =     1530 us) (n =     1) (lvls, us =     1523,     1523,     1523,     1523,     1530)
[6.217s][info][gc,stats    ]   Roots                        =    0.001 s (a =     1447 us) (n =     1) (lvls, us =     1445,     1445,     1445,     1445,     1447)
[6.217s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     2749 us) (n =     1) (lvls, us =     2734,     2734,     2734,     2734,     2749)
[6.217s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      785 us) (n =     1) (lvls, us =      783,      783,      783,      783,      785)
[6.217s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1945 us) (n =     1) (lvls, us =     1934,     1934,     1934,     1934,     1945)
[6.217s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[6.217s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       38 us) (n =     1) (lvls, us =       38,       38,       38,       38,       38)
[6.217s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      195 us) (n =     1) (lvls, us =      193,      193,      193,      193,      195)
[6.217s][info][gc,stats    ] Concurrent Class Unloading     =    0.006 s (a =     6019 us) (n =     1) (lvls, us =     6016,     6016,     6016,     6016,     6019)
[6.217s][info][gc,stats    ]   Unlink Stale                 =    0.003 s (a =     2848 us) (n =     1) (lvls, us =     2832,     2832,     2832,     2832,     2848)
[6.217s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       40 us) (n =     1) (lvls, us =       40,       40,       40,       40,       40)
[6.217s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.217s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2806 us) (n =     1) (lvls, us =     2793,     2793,     2793,     2793,     2806)
[6.217s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      122 us) (n =     1) (lvls, us =      121,      121,      121,      121,      122)
[6.217s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     3015 us) (n =     1) (lvls, us =     3008,     3008,     3008,     3008,     3015)
[6.217s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     3006 us) (n =     1) (lvls, us =     2988,     2988,     2988,     2988,     3006)
[6.217s][info][gc,stats    ]     CLDG                       =    0.000 s (a =        9 us) (n =     1) (lvls, us =        9,        9,        9,        9,        9)
[6.217s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.217s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     1510 us) (n =     1) (lvls, us =     1504,     1504,     1504,     1504,     1510)
[6.217s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1441 us) (n =     1) (lvls, us =     1426,     1426,     1426,     1426,     1441)
[6.217s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[6.217s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1423 us) (n =     1) (lvls, us =     1406,     1406,     1406,     1406,     1423)
[6.217s][info][gc,stats    ] Concurrent Evacuation          =    0.009 s (a =     8720 us) (n =     1) (lvls, us =     8711,     8711,     8711,     8711,     8720)
[6.217s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.001 s (a =     1013 us) (n =     1) (lvls, us =      996,      996,      996,      996,     1013)
[6.217s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       57 us) (n =     1) (lvls, us =       57,       57,       57,       57,       57)
[6.217s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        6 us) (n =     1) (lvls, us =        6,        6,        6,        6,        6)
[6.217s][info][gc,stats    ] Concurrent Update Refs         =    0.023 s (a =    22765 us) (n =     1) (lvls, us =    22656,    22656,    22656,    22656,    22765)
[6.217s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      327 us) (n =     1) (lvls, us =      326,      326,      326,      326,      327)
[6.217s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      207 us) (n =     1) (lvls, us =      205,      205,      205,      205,      207)
[6.217s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      112 us) (n =     1) (lvls, us =      111,      111,      111,      111,      112)
[6.217s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       37 us) (n =     1) (lvls, us =       37,       37,       37,       37,       37)
[6.217s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.217s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[6.218s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      109 us) (n =     1) (lvls, us =      107,      107,      107,      107,      109)
[6.218s][info][gc,stats    ] 
[6.218s][info][gc,stats    ] 
[6.218s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.218s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.218s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.218s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.218s][info][gc,stats    ] 
[6.218s][info][gc,stats    ]     1 successful concurrent GCs
[6.218s][info][gc,stats    ]       0 invoked explicitly
[6.218s][info][gc,stats    ]       0 invoked implicitly
[6.218s][info][gc,stats    ] 
[6.218s][info][gc,stats    ]     0 Degenerated GCs
[6.218s][info][gc,stats    ]       0 caused by allocation failure
[6.218s][info][gc,stats    ]       0 upgraded to Full GC
[6.218s][info][gc,stats    ] 
[6.218s][info][gc,stats    ]     0 Full GCs
[6.218s][info][gc,stats    ]       0 invoked explicitly
[6.218s][info][gc,stats    ]       0 invoked implicitly
[6.218s][info][gc,stats    ]       0 caused by allocation failure
[6.218s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.218s][info][gc,stats    ] 
[6.218s][info][gc,stats    ] 
