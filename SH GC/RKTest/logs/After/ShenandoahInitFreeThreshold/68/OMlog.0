[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.004s][info][gc] Using Shenandoah
[0.005s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.005s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.005s][info][gc,init] CPUs: 4 total, 4 available
[0.005s][info][gc,init] Memory: 7937M
[0.005s][info][gc,init] Large Page Support: Disabled
[0.005s][info][gc,init] NUMA Support: Disabled
[0.005s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.005s][info][gc,init] Heap Min Capacity: 6656K
[0.005s][info][gc,init] Heap Initial Capacity: 127488K
[0.005s][info][gc,init] Heap Max Capacity: 2032128K
[0.005s][info][gc,init] Pre-touch: Disabled
[0.005s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.005s][info][gc,init] Heuristics: Adaptive
[0.005s][info][gc,init] Heap Region Count: 3969
[0.005s][info][gc,init] Heap Region Size: 512K
[0.005s][info][gc,init] TLAB Size Max: 512K
[0.005s][info][gc,init] Humongous Object Threshold: 512K
[0.005s][info][gc,init] Parallel Workers: 8
[0.005s][info][gc,init] Concurrent Workers: 2
[0.015s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f0ae3000000-0x00007f0ae3c97000-0x00007f0ae3c97000), size 13201408, SharedBaseAddress: 0x00007f0ae3000000, ArchiveRelocationMode: 1.
[0.015s][info][gc,metaspace] Compressed class space mapped at: 0x00007f0ae4000000-0x00007f0b24000000, reserved size: 1073741824
[0.015s][info][gc,metaspace] Narrow klass base: 0x00007f0ae3000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[2.078s][info][gc          ] Trigger: Metadata GC Threshold
[2.078s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[2.079s][info][gc,start    ] GC(0) Concurrent reset
[2.079s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[2.079s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[2.079s][info][gc          ] GC(0) Concurrent reset 0.505ms
[2.079s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[2.080s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[2.080s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[2.080s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.899ms
[2.080s][info][gc,start    ] GC(0) Concurrent marking roots
[2.080s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[2.084s][info][gc          ] GC(0) Concurrent marking roots 3.743ms
[2.084s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[2.084s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[2.121s][info][gc          ] GC(0) Concurrent marking (unload classes) 36.846ms
[2.121s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[2.121s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[2.124s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1846M, Max CSet: 84672K, Min Garbage: 0B
[2.125s][info][gc,ergo     ] GC(0) Collectable Garbage: 73546K (98%), Immediate: 4847K (6%), CSet: 68699K (92%)
[2.125s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 76800K, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.125s][info][gc          ] GC(0) Pause Final Mark (unload classes) 3.332ms
[2.125s][info][gc,start    ] GC(0) Concurrent thread roots
[2.125s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[2.125s][info][gc          ] GC(0) Concurrent thread roots 0.306ms
[2.125s][info][gc,start    ] GC(0) Concurrent weak references
[2.125s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[2.125s][info][gc,ref      ] GC(0) Encountered references: Soft: 3955, Weak: 2098, Final: 4, Phantom: 820
[2.125s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 729, Final: 0, Phantom: 477
[2.125s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 498, Final: 0, Phantom: 230
[2.125s][info][gc          ] GC(0) Concurrent weak references 0.236ms
[2.125s][info][gc,start    ] GC(0) Concurrent weak roots
[2.125s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[2.127s][info][gc          ] GC(0) Concurrent weak roots 1.747ms
[2.127s][info][gc,start    ] GC(0) Concurrent cleanup
[2.127s][info][gc          ] GC(0) Concurrent cleanup 141M->136M(144M) 0.187ms
[2.127s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1741M humongous, Frag: 1% external, 0% internal; Reserve: 101107K, Max: 512K
[2.128s][info][gc,start    ] GC(0) Concurrent class unloading
[2.128s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[2.135s][info][gc          ] GC(0) Concurrent class unloading 6.982ms
[2.135s][info][gc,start    ] GC(0) Concurrent strong roots
[2.135s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[2.136s][info][gc          ] GC(0) Concurrent strong roots 1.078ms
[2.136s][info][gc,start    ] GC(0) Concurrent evacuation
[2.136s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[2.141s][info][gc          ] GC(0) Concurrent evacuation 5.324ms
[2.141s][info][gc,start    ] GC(0) Pause Init Update Refs
[2.142s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 146M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.142s][info][gc          ] GC(0) Pause Init Update Refs 0.042ms
[2.142s][info][gc,start    ] GC(0) Concurrent update references
[2.142s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[2.158s][info][gc          ] GC(0) Concurrent update references 16.825ms
[2.158s][info][gc,start    ] GC(0) Concurrent update thread roots
[2.159s][info][gc          ] GC(0) Concurrent update thread roots 0.226ms
[2.159s][info][gc,start    ] GC(0) Pause Final Update Refs
[2.159s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[2.159s][info][gc          ] GC(0) Pause Final Update Refs 0.089ms
[2.159s][info][gc,start    ] GC(0) Concurrent cleanup
[2.159s][info][gc          ] GC(0) Concurrent cleanup 146M->71M(153M) 0.108ms
[2.159s][info][gc,ergo     ] Free: 1810M, Max: 512K regular, 1732M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[2.159s][info][gc,stats    ] 
[2.159s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[2.159s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[2.159s][info][gc,stats    ] 
[2.159s][info][gc,stats    ] Concurrent Reset                    532 us
[2.159s][info][gc,stats    ] Pause Init Mark (G)                1429 us
[2.159s][info][gc,stats    ] Pause Init Mark (N)                 926 us
[2.159s][info][gc,stats    ]   Update Region States               32 us
[2.159s][info][gc,stats    ] Concurrent Mark Roots              3767 us, parallelism: 1.05x
[2.159s][info][gc,stats    ]   CMR: <total>                     3971 us
[2.159s][info][gc,stats    ]   CMR: Thread Roots                1224 us, workers (us): 872, 352, ---, ---, ---, ---, ---, ---, 
[2.159s][info][gc,stats    ]   CMR: VM Strong Roots              857 us, workers (us): 856,   1, ---, ---, ---, ---, ---, ---, 
[2.159s][info][gc,stats    ]   CMR: CLDG Roots                  1890 us, workers (us): 1890, ---, ---, ---, ---, ---, ---, ---, 
[2.159s][info][gc,stats    ] Concurrent Marking                36878 us
[2.159s][info][gc,stats    ] Pause Final Mark (G)               3470 us
[2.159s][info][gc,stats    ] Pause Final Mark (N)               3341 us
[2.159s][info][gc,stats    ]   Finish Mark                      3126 us
[2.159s][info][gc,stats    ]   Update Region States               29 us
[2.159s][info][gc,stats    ]   Choose Collection Set             103 us
[2.160s][info][gc,stats    ]   Rebuild Free Set                   20 us
[2.160s][info][gc,stats    ] Concurrent Thread Roots             324 us, parallelism: 1.16x
[2.160s][info][gc,stats    ]   CTR: <total>                      376 us
[2.160s][info][gc,stats    ]   CTR: Thread Roots                 376 us, workers (us): 267, 108, ---, ---, ---, ---, ---, ---, 
[2.160s][info][gc,stats    ] Concurrent Weak References          445 us, parallelism: 0.56x
[2.160s][info][gc,stats    ]   CWRF: <total>                     248 us
[2.160s][info][gc,stats    ]   CWRF: Weak References             248 us, workers (us): 103, 145, ---, ---, ---, ---, ---, ---, 
[2.160s][info][gc,stats    ] Concurrent Weak Roots              1773 us
[2.160s][info][gc,stats    ]   Roots                            1415 us, parallelism: 1.92x
[2.160s][info][gc,stats    ]     CWR: <total>                   2716 us
[2.160s][info][gc,stats    ]     CWR: Code Cache Roots           765 us, workers (us): 377, 388, ---, ---, ---, ---, ---, ---, 
[2.160s][info][gc,stats    ]     CWR: VM Weak Roots             1939 us, workers (us): 978, 961, ---, ---, ---, ---, ---, ---, 
[2.160s][info][gc,stats    ]     CWR: CLDG Roots                  12 us, workers (us): ---,  12, ---, ---, ---, ---, ---, ---, 
[2.160s][info][gc,stats    ]   Rendezvous                        304 us
[2.160s][info][gc,stats    ] Concurrent Cleanup                  204 us
[2.160s][info][gc,stats    ] Concurrent Class Unloading         7010 us
[2.160s][info][gc,stats    ]   Unlink Stale                     2271 us
[2.160s][info][gc,stats    ]     System Dictionary                53 us
[2.160s][info][gc,stats    ]     Weak Class Links                  0 us
[2.160s][info][gc,stats    ]     Code Roots                     2216 us
[2.160s][info][gc,stats    ]   Rendezvous                        143 us
[2.160s][info][gc,stats    ]   Purge Unlinked                   4536 us
[2.160s][info][gc,stats    ]     Code Roots                     4502 us
[2.160s][info][gc,stats    ]     CLDG                             34 us
[2.160s][info][gc,stats    ]     Exception Caches                  0 us
[2.160s][info][gc,stats    ] Concurrent Strong Roots            1103 us, parallelism: 0.94x
[2.160s][info][gc,stats    ]   CSR: <total>                     1039 us
[2.160s][info][gc,stats    ]   CSR: VM Strong Roots               17 us, workers (us):  13,   3, ---, ---, ---, ---, ---, ---, 
[2.160s][info][gc,stats    ]   CSR: CLDG Roots                  1023 us, workers (us): ---, 1023, ---, ---, ---, ---, ---, ---, 
[2.160s][info][gc,stats    ] Concurrent Evacuation              5353 us
[2.160s][info][gc,stats    ] Pause Init Update Refs (G)          274 us
[2.160s][info][gc,stats    ] Pause Init Update Refs (N)           51 us
[2.160s][info][gc,stats    ]   Manage GCLABs                       7 us
[2.160s][info][gc,stats    ] Concurrent Update Refs            16866 us
[2.160s][info][gc,stats    ] Concurrent Update Thread Roots      245 us
[2.160s][info][gc,stats    ] Pause Final Update Refs (G)         300 us
[2.160s][info][gc,stats    ] Pause Final Update Refs (N)          99 us
[2.160s][info][gc,stats    ]   Update Region States               30 us
[2.160s][info][gc,stats    ]   Trash Collection Set                4 us
[2.160s][info][gc,stats    ]   Rebuild Free Set                   16 us
[2.160s][info][gc,stats    ] Concurrent Cleanup                  207 us
[2.160s][info][gc,stats    ] 
[2.160s][info][gc,stats    ] Allocation pacing accrued:
[2.160s][info][gc,stats    ]       0 of  2155 ms (  0.0%): <total>
[2.160s][info][gc,stats    ]       0 of  2155 ms (  0.0%): <average total>
[2.160s][info][gc,stats    ] 
[2.160s][info][gc,metaspace] Metaspace: 21248K(21568K)->21756K(22144K) NonClass: 18899K(19072K)->19339K(19520K) Class: 2348K(2496K)->2416K(2624K)
[2.160s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.441s][info][gc          ] Cancelling GC: Stopping VM
[6.442s][info][gc,heap,exit] Heap
[6.442s][info][gc,heap,exit] Shenandoah Heap
[6.442s][info][gc,heap,exit]  1984M max, 1984M soft max, 153M committed, 85921K used
[6.442s][info][gc,heap,exit]  3969 x 512K regions
[6.442s][info][gc,heap,exit] Status: cancelled
[6.442s][info][gc,heap,exit] Reserved region:
[6.442s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.442s][info][gc,heap,exit] Collection set:
[6.442s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.442s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.442s][info][gc,heap,exit] 
[6.442s][info][gc,heap,exit]  Metaspace       used 25103K, committed 25408K, reserved 1114112K
[6.442s][info][gc,heap,exit]   class space    used 2774K, committed 2880K, reserved 1048576K
[6.442s][info][gc,stats    ] 
[6.442s][info][gc,stats    ] GC STATISTICS:
[6.442s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.442s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.442s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.442s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.442s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.442s][info][gc,stats    ] 
[6.442s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.442s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.442s][info][gc,stats    ] 
[6.442s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.442s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.442s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.442s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.442s][info][gc,stats    ] 
[6.442s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.442s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.442s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.442s][info][gc,stats    ]   Raise max pacing delay with care.
[6.442s][info][gc,stats    ] 
[6.442s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      532 us) (n =     1) (lvls, us =      531,      531,      531,      531,      532)
[6.442s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =     1429 us) (n =     1) (lvls, us =     1426,     1426,     1426,     1426,     1429)
[6.442s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      926 us) (n =     1) (lvls, us =      924,      924,      924,      924,      926)
[6.443s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       32 us) (n =     1) (lvls, us =       32,       32,       32,       32,       32)
[6.443s][info][gc,stats    ] Concurrent Mark Roots          =    0.004 s (a =     3767 us) (n =     1) (lvls, us =     3750,     3750,     3750,     3750,     3767)
[6.443s][info][gc,stats    ]   CMR: <total>                 =    0.004 s (a =     3971 us) (n =     1) (lvls, us =     3965,     3965,     3965,     3965,     3971)
[6.443s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1224 us) (n =     1) (lvls, us =     1211,     1211,     1211,     1211,     1224)
[6.443s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      857 us) (n =     1) (lvls, us =      855,      855,      855,      855,      857)
[6.443s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     1890 us) (n =     1) (lvls, us =     1875,     1875,     1875,     1875,     1890)
[6.443s][info][gc,stats    ] Concurrent Marking             =    0.037 s (a =    36878 us) (n =     1) (lvls, us =    36719,    36719,    36719,    36719,    36878)
[6.443s][info][gc,stats    ] Pause Final Mark (G)           =    0.003 s (a =     3470 us) (n =     1) (lvls, us =     3457,     3457,     3457,     3457,     3470)
[6.443s][info][gc,stats    ] Pause Final Mark (N)           =    0.003 s (a =     3341 us) (n =     1) (lvls, us =     3340,     3340,     3340,     3340,     3341)
[6.443s][info][gc,stats    ]   Finish Mark                  =    0.003 s (a =     3126 us) (n =     1) (lvls, us =     3125,     3125,     3125,     3125,     3126)
[6.443s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       29 us) (n =     1) (lvls, us =       29,       29,       29,       29,       29)
[6.443s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =      103 us) (n =     1) (lvls, us =      102,      102,      102,      102,      103)
[6.443s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[6.443s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      324 us) (n =     1) (lvls, us =      322,      322,      322,      322,      324)
[6.443s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      376 us) (n =     1) (lvls, us =      375,      375,      375,      375,      376)
[6.443s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      376 us) (n =     1) (lvls, us =      375,      375,      375,      375,      376)
[6.443s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      445 us) (n =     1) (lvls, us =      443,      443,      443,      443,      445)
[6.443s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      248 us) (n =     1) (lvls, us =      246,      246,      246,      246,      248)
[6.443s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      248 us) (n =     1) (lvls, us =      246,      246,      246,      246,      248)
[6.443s][info][gc,stats    ] Concurrent Weak Roots          =    0.002 s (a =     1773 us) (n =     1) (lvls, us =     1758,     1758,     1758,     1758,     1773)
[6.443s][info][gc,stats    ]   Roots                        =    0.001 s (a =     1415 us) (n =     1) (lvls, us =     1406,     1406,     1406,     1406,     1415)
[6.443s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     2716 us) (n =     1) (lvls, us =     2715,     2715,     2715,     2715,     2716)
[6.443s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      765 us) (n =     1) (lvls, us =      764,      764,      764,      764,      765)
[6.443s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1939 us) (n =     1) (lvls, us =     1934,     1934,     1934,     1934,     1939)
[6.443s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       12 us) (n =     1) (lvls, us =       12,       12,       12,       12,       12)
[6.443s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      304 us) (n =     1) (lvls, us =      303,      303,      303,      303,      304)
[6.443s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      204 us) (n =     1) (lvls, us =      203,      203,      203,      203,      204)
[6.443s][info][gc,stats    ] Concurrent Class Unloading     =    0.007 s (a =     7010 us) (n =     1) (lvls, us =     6992,     6992,     6992,     6992,     7010)
[6.443s][info][gc,stats    ]   Unlink Stale                 =    0.002 s (a =     2271 us) (n =     1) (lvls, us =     2266,     2266,     2266,     2266,     2271)
[6.443s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       53 us) (n =     1) (lvls, us =       53,       53,       53,       53,       53)
[6.443s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.443s][info][gc,stats    ]     Code Roots                 =    0.002 s (a =     2216 us) (n =     1) (lvls, us =     2207,     2207,     2207,     2207,     2216)
[6.443s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      143 us) (n =     1) (lvls, us =      143,      143,      143,      143,      143)
[6.443s][info][gc,stats    ]   Purge Unlinked               =    0.005 s (a =     4536 us) (n =     1) (lvls, us =     4531,     4531,     4531,     4531,     4536)
[6.443s][info][gc,stats    ]     Code Roots                 =    0.005 s (a =     4502 us) (n =     1) (lvls, us =     4492,     4492,     4492,     4492,     4502)
[6.443s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       34 us) (n =     1) (lvls, us =       34,       34,       34,       34,       34)
[6.443s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.443s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1103 us) (n =     1) (lvls, us =     1094,     1094,     1094,     1094,     1103)
[6.443s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1039 us) (n =     1) (lvls, us =     1035,     1035,     1035,     1035,     1039)
[6.443s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[6.443s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1023 us) (n =     1) (lvls, us =     1016,     1016,     1016,     1016,     1023)
[6.443s][info][gc,stats    ] Concurrent Evacuation          =    0.005 s (a =     5353 us) (n =     1) (lvls, us =     5352,     5352,     5352,     5352,     5353)
[6.443s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      274 us) (n =     1) (lvls, us =      273,      273,      273,      273,      274)
[6.443s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       51 us) (n =     1) (lvls, us =       51,       51,       51,       51,       51)
[6.443s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        7 us) (n =     1) (lvls, us =        7,        7,        7,        7,        7)
[6.443s][info][gc,stats    ] Concurrent Update Refs         =    0.017 s (a =    16866 us) (n =     1) (lvls, us =    16797,    16797,    16797,    16797,    16866)
[6.443s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      245 us) (n =     1) (lvls, us =      244,      244,      244,      244,      245)
[6.443s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      300 us) (n =     1) (lvls, us =      299,      299,      299,      299,      300)
[6.443s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =       99 us) (n =     1) (lvls, us =       99,       99,       99,       99,       99)
[6.443s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       30 us) (n =     1) (lvls, us =       30,       30,       30,       30,       30)
[6.443s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.443s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[6.443s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      207 us) (n =     1) (lvls, us =      207,      207,      207,      207,      207)
[6.443s][info][gc,stats    ] 
[6.443s][info][gc,stats    ] 
[6.443s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.443s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.443s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.443s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.443s][info][gc,stats    ] 
[6.443s][info][gc,stats    ]     1 successful concurrent GCs
[6.443s][info][gc,stats    ]       0 invoked explicitly
[6.443s][info][gc,stats    ]       0 invoked implicitly
[6.443s][info][gc,stats    ] 
[6.443s][info][gc,stats    ]     0 Degenerated GCs
[6.443s][info][gc,stats    ]       0 caused by allocation failure
[6.443s][info][gc,stats    ]       0 upgraded to Full GC
[6.443s][info][gc,stats    ] 
[6.443s][info][gc,stats    ]     0 Full GCs
[6.443s][info][gc,stats    ]       0 invoked explicitly
[6.443s][info][gc,stats    ]       0 invoked implicitly
[6.443s][info][gc,stats    ]       0 caused by allocation failure
[6.444s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.444s][info][gc,stats    ] 
[6.444s][info][gc,stats    ] 
