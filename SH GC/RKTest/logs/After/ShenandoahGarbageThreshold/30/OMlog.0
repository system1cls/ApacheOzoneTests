[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.004s][info][gc] Using Shenandoah
[0.005s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.005s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.005s][info][gc,init] CPUs: 4 total, 4 available
[0.005s][info][gc,init] Memory: 7937M
[0.005s][info][gc,init] Large Page Support: Disabled
[0.005s][info][gc,init] NUMA Support: Disabled
[0.005s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.005s][info][gc,init] Heap Min Capacity: 6656K
[0.005s][info][gc,init] Heap Initial Capacity: 127488K
[0.005s][info][gc,init] Heap Max Capacity: 2032128K
[0.005s][info][gc,init] Pre-touch: Disabled
[0.005s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.005s][info][gc,init] Heuristics: Adaptive
[0.005s][info][gc,init] Heap Region Count: 3969
[0.005s][info][gc,init] Heap Region Size: 512K
[0.005s][info][gc,init] TLAB Size Max: 512K
[0.005s][info][gc,init] Humongous Object Threshold: 512K
[0.005s][info][gc,init] Parallel Workers: 8
[0.005s][info][gc,init] Concurrent Workers: 2
[0.012s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f56c3000000-0x00007f56c3c97000-0x00007f56c3c97000), size 13201408, SharedBaseAddress: 0x00007f56c3000000, ArchiveRelocationMode: 1.
[0.012s][info][gc,metaspace] Compressed class space mapped at: 0x00007f56c4000000-0x00007f5704000000, reserved size: 1073741824
[0.012s][info][gc,metaspace] Narrow klass base: 0x00007f56c3000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.864s][info][gc          ] Trigger: Metadata GC Threshold
[1.864s][info][gc,ergo     ] Free: 1745M, Max: 512K regular, 1745M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.864s][info][gc,start    ] GC(0) Concurrent reset
[1.865s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.865s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.865s][info][gc          ] GC(0) Concurrent reset 0.955ms
[1.865s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.866s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.866s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.866s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.471ms
[1.866s][info][gc,start    ] GC(0) Concurrent marking roots
[1.866s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.870s][info][gc          ] GC(0) Concurrent marking roots 4.176ms
[1.870s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.870s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.921s][info][gc          ] GC(0) Concurrent marking (unload classes) 50.452ms
[1.921s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.921s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.927s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1846M, Max CSet: 84672K, Min Garbage: 0B
[1.927s][info][gc,ergo     ] GC(0) Collectable Garbage: 73393K (98%), Immediate: 4847K (6%), CSet: 68546K (92%)
[1.927s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 76288K, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.927s][info][gc          ] GC(0) Pause Final Mark (unload classes) 6.045ms
[1.927s][info][gc,start    ] GC(0) Concurrent thread roots
[1.927s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.927s][info][gc          ] GC(0) Concurrent thread roots 0.350ms
[1.927s][info][gc,start    ] GC(0) Concurrent weak references
[1.927s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.927s][info][gc,ref      ] GC(0) Encountered references: Soft: 3958, Weak: 2102, Final: 4, Phantom: 820
[1.927s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 823, Final: 0, Phantom: 432
[1.927s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 499, Final: 0, Phantom: 230
[1.927s][info][gc          ] GC(0) Concurrent weak references 0.242ms
[1.927s][info][gc,start    ] GC(0) Concurrent weak roots
[1.927s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.931s][info][gc          ] GC(0) Concurrent weak roots 3.758ms
[1.931s][info][gc,start    ] GC(0) Concurrent cleanup
[1.931s][info][gc          ] GC(0) Concurrent cleanup 141M->137M(145M) 0.099ms
[1.931s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1741M humongous, Frag: 1% external, 0% internal; Reserve: 100827K, Max: 512K
[1.931s][info][gc,start    ] GC(0) Concurrent class unloading
[1.931s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.937s][info][gc          ] GC(0) Concurrent class unloading 6.176ms
[1.938s][info][gc,start    ] GC(0) Concurrent strong roots
[1.938s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.939s][info][gc          ] GC(0) Concurrent strong roots 1.181ms
[1.939s][info][gc,start    ] GC(0) Concurrent evacuation
[1.939s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.949s][info][gc          ] GC(0) Concurrent evacuation 9.483ms
[1.949s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.949s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 145M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.949s][info][gc          ] GC(0) Pause Init Update Refs 0.042ms
[1.949s][info][gc,start    ] GC(0) Concurrent update references
[1.949s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.972s][info][gc          ] GC(0) Concurrent update references 23.116ms
[1.972s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.972s][info][gc          ] GC(0) Concurrent update thread roots 0.430ms
[1.972s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.972s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.972s][info][gc          ] GC(0) Pause Final Update Refs 0.094ms
[1.973s][info][gc,start    ] GC(0) Concurrent cleanup
[1.973s][info][gc          ] GC(0) Concurrent cleanup 145M->71M(152M) 0.094ms
[1.973s][info][gc,ergo     ] Free: 1811M, Max: 512K regular, 1732M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.973s][info][gc,stats    ] 
[1.973s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.973s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.973s][info][gc,stats    ] 
[1.973s][info][gc,stats    ] Concurrent Reset                    983 us
[1.973s][info][gc,stats    ] Pause Init Mark (G)                 650 us
[1.973s][info][gc,stats    ] Pause Init Mark (N)                 493 us
[1.973s][info][gc,stats    ]   Update Region States               21 us
[1.973s][info][gc,stats    ] Concurrent Mark Roots              4197 us, parallelism: 0.57x
[1.973s][info][gc,stats    ]   CMR: <total>                     2385 us
[1.973s][info][gc,stats    ]   CMR: Thread Roots                 967 us, workers (us): 967,   0, ---, ---, ---, ---, ---, ---, 
[1.973s][info][gc,stats    ]   CMR: VM Strong Roots              401 us, workers (us): 401,   0, ---, ---, ---, ---, ---, ---, 
[1.973s][info][gc,stats    ]   CMR: CLDG Roots                  1017 us, workers (us): 1017, ---, ---, ---, ---, ---, ---, ---, 
[1.973s][info][gc,stats    ] Concurrent Marking                50476 us
[1.973s][info][gc,stats    ] Pause Final Mark (G)               6169 us
[1.973s][info][gc,stats    ] Pause Final Mark (N)               6055 us
[1.973s][info][gc,stats    ]   Finish Mark                      5789 us
[1.973s][info][gc,stats    ]   Update Region States               44 us
[1.973s][info][gc,stats    ]   Choose Collection Set             124 us
[1.973s][info][gc,stats    ]   Rebuild Free Set                   23 us
[1.973s][info][gc,stats    ] Concurrent Thread Roots             360 us, parallelism: 0.53x
[1.973s][info][gc,stats    ]   CTR: <total>                      189 us
[1.973s][info][gc,stats    ]   CTR: Thread Roots                 189 us, workers (us): 189,   0, ---, ---, ---, ---, ---, ---, 
[1.973s][info][gc,stats    ] Concurrent Weak References          251 us, parallelism: 1.21x
[1.973s][info][gc,stats    ]   CWRF: <total>                     303 us
[1.973s][info][gc,stats    ]   CWRF: Weak References             303 us, workers (us): 173, 130, ---, ---, ---, ---, ---, ---, 
[1.973s][info][gc,stats    ] Concurrent Weak Roots              3780 us
[1.973s][info][gc,stats    ]   Roots                            2798 us, parallelism: 1.76x
[1.973s][info][gc,stats    ]     CWR: <total>                   4919 us
[1.973s][info][gc,stats    ]     CWR: Code Cache Roots           773 us, workers (us): 773,   0, ---, ---, ---, ---, ---, ---, 
[1.973s][info][gc,stats    ]     CWR: VM Weak Roots             4127 us, workers (us): 1837, 2290, ---, ---, ---, ---, ---, ---, 
[1.973s][info][gc,stats    ]     CWR: CLDG Roots                  19 us, workers (us):  19, ---, ---, ---, ---, ---, ---, ---, 
[1.973s][info][gc,stats    ]   Rendezvous                        941 us
[1.973s][info][gc,stats    ] Concurrent Cleanup                  108 us
[1.973s][info][gc,stats    ] Concurrent Class Unloading         6499 us
[1.973s][info][gc,stats    ]   Unlink Stale                     2657 us
[1.973s][info][gc,stats    ]     System Dictionary                40 us
[1.973s][info][gc,stats    ]     Weak Class Links                  0 us
[1.973s][info][gc,stats    ]     Code Roots                     2616 us
[1.973s][info][gc,stats    ]   Rendezvous                        300 us
[1.973s][info][gc,stats    ]   Purge Unlinked                   3200 us
[1.973s][info][gc,stats    ]     Code Roots                     3191 us
[1.973s][info][gc,stats    ]     CLDG                              9 us
[1.973s][info][gc,stats    ]     Exception Caches                  0 us
[1.973s][info][gc,stats    ] Concurrent Strong Roots            1202 us, parallelism: 0.95x
[1.973s][info][gc,stats    ]   CSR: <total>                     1136 us
[1.973s][info][gc,stats    ]   CSR: VM Strong Roots               37 us, workers (us):  27,  10, ---, ---, ---, ---, ---, ---, 
[1.973s][info][gc,stats    ]   CSR: CLDG Roots                  1100 us, workers (us): ---, 1100, ---, ---, ---, ---, ---, ---, 
[1.973s][info][gc,stats    ] Concurrent Evacuation              9510 us
[1.973s][info][gc,stats    ] Pause Init Update Refs (G)          174 us
[1.973s][info][gc,stats    ] Pause Init Update Refs (N)           59 us
[1.973s][info][gc,stats    ]   Manage GCLABs                       5 us
[1.973s][info][gc,stats    ] Concurrent Update Refs            23138 us
[1.973s][info][gc,stats    ] Concurrent Update Thread Roots      452 us
[1.973s][info][gc,stats    ] Pause Final Update Refs (G)         224 us
[1.973s][info][gc,stats    ] Pause Final Update Refs (N)         108 us
[1.973s][info][gc,stats    ]   Update Region States               30 us
[1.973s][info][gc,stats    ]   Trash Collection Set                3 us
[1.973s][info][gc,stats    ]   Rebuild Free Set                   18 us
[1.973s][info][gc,stats    ] Concurrent Cleanup                  104 us
[1.973s][info][gc,stats    ] 
[1.973s][info][gc,stats    ] Allocation pacing accrued:
[1.973s][info][gc,stats    ]       0 of  1968 ms (  0.0%): <total>
[1.973s][info][gc,stats    ]       0 of  1968 ms (  0.0%): <average total>
[1.973s][info][gc,stats    ] 
[1.973s][info][gc,metaspace] Metaspace: 21219K(21568K)->21653K(22016K) NonClass: 18867K(19008K)->19248K(19456K) Class: 2352K(2560K)->2405K(2560K)
[1.973s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.280s][info][gc          ] Cancelling GC: Stopping VM
[6.281s][info][gc,heap,exit] Heap
[6.281s][info][gc,heap,exit] Shenandoah Heap
[6.281s][info][gc,heap,exit]  1984M max, 1984M soft max, 152M committed, 86033K used
[6.281s][info][gc,heap,exit]  3969 x 512K regions
[6.281s][info][gc,heap,exit] Status: cancelled
[6.281s][info][gc,heap,exit] Reserved region:
[6.281s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.281s][info][gc,heap,exit] Collection set:
[6.281s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.281s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.281s][info][gc,heap,exit] 
[6.281s][info][gc,heap,exit]  Metaspace       used 25068K, committed 25344K, reserved 1114112K
[6.281s][info][gc,heap,exit]   class space    used 2776K, committed 2880K, reserved 1048576K
[6.281s][info][gc,stats    ] 
[6.281s][info][gc,stats    ] GC STATISTICS:
[6.281s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.281s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.281s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.281s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.281s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.281s][info][gc,stats    ] 
[6.281s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.282s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.282s][info][gc,stats    ] 
[6.282s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.282s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.282s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.282s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.282s][info][gc,stats    ] 
[6.282s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.282s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.282s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.282s][info][gc,stats    ]   Raise max pacing delay with care.
[6.282s][info][gc,stats    ] 
[6.282s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      983 us) (n =     1) (lvls, us =      982,      982,      982,      982,      983)
[6.282s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      650 us) (n =     1) (lvls, us =      648,      648,      648,      648,      650)
[6.282s][info][gc,stats    ] Pause Init Mark (N)            =    0.000 s (a =      493 us) (n =     1) (lvls, us =      492,      492,      492,      492,      493)
[6.282s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       21 us) (n =     1) (lvls, us =       21,       21,       21,       21,       21)
[6.282s][info][gc,stats    ] Concurrent Mark Roots          =    0.004 s (a =     4197 us) (n =     1) (lvls, us =     4180,     4180,     4180,     4180,     4197)
[6.282s][info][gc,stats    ]   CMR: <total>                 =    0.002 s (a =     2385 us) (n =     1) (lvls, us =     2383,     2383,     2383,     2383,     2385)
[6.282s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =      967 us) (n =     1) (lvls, us =      967,      967,      967,      967,      967)
[6.282s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.000 s (a =      401 us) (n =     1) (lvls, us =      400,      400,      400,      400,      401)
[6.282s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1017 us) (n =     1) (lvls, us =     1016,     1016,     1016,     1016,     1017)
[6.282s][info][gc,stats    ] Concurrent Marking             =    0.050 s (a =    50476 us) (n =     1) (lvls, us =    50391,    50391,    50391,    50391,    50476)
[6.282s][info][gc,stats    ] Pause Final Mark (G)           =    0.006 s (a =     6169 us) (n =     1) (lvls, us =     6152,     6152,     6152,     6152,     6169)
[6.282s][info][gc,stats    ] Pause Final Mark (N)           =    0.006 s (a =     6055 us) (n =     1) (lvls, us =     6055,     6055,     6055,     6055,     6055)
[6.282s][info][gc,stats    ]   Finish Mark                  =    0.006 s (a =     5789 us) (n =     1) (lvls, us =     5781,     5781,     5781,     5781,     5789)
[6.282s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       44 us) (n =     1) (lvls, us =       44,       44,       44,       44,       44)
[6.282s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =      124 us) (n =     1) (lvls, us =      123,      123,      123,      123,      124)
[6.282s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       23 us) (n =     1) (lvls, us =       23,       23,       23,       23,       23)
[6.282s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      360 us) (n =     1) (lvls, us =      359,      359,      359,      359,      360)
[6.282s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      189 us) (n =     1) (lvls, us =      188,      188,      188,      188,      189)
[6.282s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      189 us) (n =     1) (lvls, us =      188,      188,      188,      188,      189)
[6.282s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      251 us) (n =     1) (lvls, us =      250,      250,      250,      250,      251)
[6.282s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      303 us) (n =     1) (lvls, us =      303,      303,      303,      303,      303)
[6.282s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      303 us) (n =     1) (lvls, us =      303,      303,      303,      303,      303)
[6.282s][info][gc,stats    ] Concurrent Weak Roots          =    0.004 s (a =     3780 us) (n =     1) (lvls, us =     3770,     3770,     3770,     3770,     3780)
[6.282s][info][gc,stats    ]   Roots                        =    0.003 s (a =     2798 us) (n =     1) (lvls, us =     2793,     2793,     2793,     2793,     2798)
[6.282s][info][gc,stats    ]     CWR: <total>               =    0.005 s (a =     4919 us) (n =     1) (lvls, us =     4902,     4902,     4902,     4902,     4919)
[6.282s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      773 us) (n =     1) (lvls, us =      771,      771,      771,      771,      773)
[6.282s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.004 s (a =     4127 us) (n =     1) (lvls, us =     4121,     4121,     4121,     4121,     4127)
[6.282s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[6.282s][info][gc,stats    ]   Rendezvous                   =    0.001 s (a =      941 us) (n =     1) (lvls, us =      941,      941,      941,      941,      941)
[6.283s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      108 us) (n =     1) (lvls, us =      107,      107,      107,      107,      108)
[6.283s][info][gc,stats    ] Concurrent Class Unloading     =    0.006 s (a =     6499 us) (n =     1) (lvls, us =     6484,     6484,     6484,     6484,     6499)
[6.283s][info][gc,stats    ]   Unlink Stale                 =    0.003 s (a =     2657 us) (n =     1) (lvls, us =     2656,     2656,     2656,     2656,     2657)
[6.283s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       40 us) (n =     1) (lvls, us =       40,       40,       40,       40,       40)
[6.283s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.283s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2616 us) (n =     1) (lvls, us =     2598,     2598,     2598,     2598,     2616)
[6.283s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      300 us) (n =     1) (lvls, us =      299,      299,      299,      299,      300)
[6.283s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     3200 us) (n =     1) (lvls, us =     3184,     3184,     3184,     3184,     3200)
[6.283s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     3191 us) (n =     1) (lvls, us =     3184,     3184,     3184,     3184,     3191)
[6.283s][info][gc,stats    ]     CLDG                       =    0.000 s (a =        9 us) (n =     1) (lvls, us =        9,        9,        9,        9,        9)
[6.283s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.283s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1202 us) (n =     1) (lvls, us =     1191,     1191,     1191,     1191,     1202)
[6.283s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1136 us) (n =     1) (lvls, us =     1133,     1133,     1133,     1133,     1136)
[6.283s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       37 us) (n =     1) (lvls, us =       37,       37,       37,       37,       37)
[6.283s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1100 us) (n =     1) (lvls, us =     1094,     1094,     1094,     1094,     1100)
[6.283s][info][gc,stats    ] Concurrent Evacuation          =    0.010 s (a =     9510 us) (n =     1) (lvls, us =     9492,     9492,     9492,     9492,     9510)
[6.283s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      174 us) (n =     1) (lvls, us =      174,      174,      174,      174,      174)
[6.283s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       59 us) (n =     1) (lvls, us =       59,       59,       59,       59,       59)
[6.283s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.283s][info][gc,stats    ] Concurrent Update Refs         =    0.023 s (a =    23138 us) (n =     1) (lvls, us =    23047,    23047,    23047,    23047,    23138)
[6.283s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      452 us) (n =     1) (lvls, us =      451,      451,      451,      451,      452)
[6.283s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      224 us) (n =     1) (lvls, us =      223,      223,      223,      223,      224)
[6.283s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      108 us) (n =     1) (lvls, us =      107,      107,      107,      107,      108)
[6.283s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       30 us) (n =     1) (lvls, us =       30,       30,       30,       30,       30)
[6.283s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        3 us) (n =     1) (lvls, us =        3,        3,        3,        3,        3)
[6.283s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[6.283s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      104 us) (n =     1) (lvls, us =      104,      104,      104,      104,      104)
[6.283s][info][gc,stats    ] 
[6.283s][info][gc,stats    ] 
[6.283s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.283s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.283s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.283s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.283s][info][gc,stats    ] 
[6.283s][info][gc,stats    ]     1 successful concurrent GCs
[6.283s][info][gc,stats    ]       0 invoked explicitly
[6.283s][info][gc,stats    ]       0 invoked implicitly
[6.283s][info][gc,stats    ] 
[6.284s][info][gc,stats    ]     0 Degenerated GCs
[6.284s][info][gc,stats    ]       0 caused by allocation failure
[6.284s][info][gc,stats    ]       0 upgraded to Full GC
[6.284s][info][gc,stats    ] 
[6.284s][info][gc,stats    ]     0 Full GCs
[6.284s][info][gc,stats    ]       0 invoked explicitly
[6.284s][info][gc,stats    ]       0 invoked implicitly
[6.284s][info][gc,stats    ]       0 caused by allocation failure
[6.284s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.284s][info][gc,stats    ] 
[6.284s][info][gc,stats    ] 
