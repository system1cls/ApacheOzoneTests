[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.005s][info][gc] Using Shenandoah
[0.005s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.006s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.006s][info][gc,init] CPUs: 4 total, 4 available
[0.006s][info][gc,init] Memory: 7937M
[0.006s][info][gc,init] Large Page Support: Disabled
[0.006s][info][gc,init] NUMA Support: Disabled
[0.006s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.006s][info][gc,init] Heap Min Capacity: 6656K
[0.006s][info][gc,init] Heap Initial Capacity: 127488K
[0.006s][info][gc,init] Heap Max Capacity: 2032128K
[0.006s][info][gc,init] Pre-touch: Disabled
[0.006s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.006s][info][gc,init] Heuristics: Adaptive
[0.006s][info][gc,init] Heap Region Count: 3969
[0.006s][info][gc,init] Heap Region Size: 512K
[0.006s][info][gc,init] TLAB Size Max: 512K
[0.006s][info][gc,init] Humongous Object Threshold: 512K
[0.006s][info][gc,init] Parallel Workers: 8
[0.006s][info][gc,init] Concurrent Workers: 2
[0.014s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f91f3000000-0x00007f91f3c97000-0x00007f91f3c97000), size 13201408, SharedBaseAddress: 0x00007f91f3000000, ArchiveRelocationMode: 1.
[0.014s][info][gc,metaspace] Compressed class space mapped at: 0x00007f91f4000000-0x00007f9234000000, reserved size: 1073741824
[0.014s][info][gc,metaspace] Narrow klass base: 0x00007f91f3000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[2.014s][info][gc          ] Trigger: Metadata GC Threshold
[2.014s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[2.014s][info][gc,start    ] GC(0) Concurrent reset
[2.014s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[2.014s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[2.014s][info][gc          ] GC(0) Concurrent reset 0.355ms
[2.014s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[2.015s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[2.015s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[2.015s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.530ms
[2.015s][info][gc,start    ] GC(0) Concurrent marking roots
[2.015s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[2.017s][info][gc          ] GC(0) Concurrent marking roots 2.277ms
[2.017s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[2.017s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[2.063s][info][gc          ] GC(0) Concurrent marking (unload classes) 45.807ms
[2.063s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[2.063s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[2.069s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1844M, Max CSet: 84672K, Min Garbage: 0B
[2.069s][info][gc,ergo     ] GC(0) Collectable Garbage: 73160K (98%), Immediate: 3823K (5%), CSet: 69337K (93%)
[2.069s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 77824K, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.069s][info][gc          ] GC(0) Pause Final Mark (unload classes) 6.346ms
[2.070s][info][gc,start    ] GC(0) Concurrent thread roots
[2.070s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[2.070s][info][gc          ] GC(0) Concurrent thread roots 0.257ms
[2.070s][info][gc,start    ] GC(0) Concurrent weak references
[2.070s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[2.070s][info][gc,ref      ] GC(0) Encountered references: Soft: 3954, Weak: 2099, Final: 4, Phantom: 820
[2.070s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1271, Final: 0, Phantom: 612
[2.070s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 498, Final: 0, Phantom: 230
[2.070s][info][gc          ] GC(0) Concurrent weak references 0.475ms
[2.070s][info][gc,start    ] GC(0) Concurrent weak roots
[2.070s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[2.072s][info][gc          ] GC(0) Concurrent weak roots 1.945ms
[2.072s][info][gc,start    ] GC(0) Concurrent cleanup
[2.072s][info][gc          ] GC(0) Concurrent cleanup 143M->139M(146M) 0.107ms
[2.072s][info][gc,ergo     ] GC(0) Free: 1744M, Max: 512K regular, 1740M humongous, Frag: 1% external, 0% internal; Reserve: 100892K, Max: 512K
[2.072s][info][gc,start    ] GC(0) Concurrent class unloading
[2.072s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[2.077s][info][gc          ] GC(0) Concurrent class unloading 4.497ms
[2.077s][info][gc,start    ] GC(0) Concurrent strong roots
[2.077s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[2.078s][info][gc          ] GC(0) Concurrent strong roots 1.532ms
[2.078s][info][gc,start    ] GC(0) Concurrent evacuation
[2.078s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[2.087s][info][gc          ] GC(0) Concurrent evacuation 8.921ms
[2.087s][info][gc,start    ] GC(0) Pause Init Update Refs
[2.087s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 149M, Free: 1743M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.088s][info][gc          ] GC(0) Pause Init Update Refs 0.035ms
[2.088s][info][gc,start    ] GC(0) Concurrent update references
[2.088s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[2.107s][info][gc          ] GC(0) Concurrent update references 19.807ms
[2.107s][info][gc,start    ] GC(0) Concurrent update thread roots
[2.108s][info][gc          ] GC(0) Concurrent update thread roots 0.206ms
[2.108s][info][gc,start    ] GC(0) Pause Final Update Refs
[2.108s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[2.108s][info][gc          ] GC(0) Pause Final Update Refs 0.101ms
[2.108s][info][gc,start    ] GC(0) Concurrent cleanup
[2.108s][info][gc          ] GC(0) Concurrent cleanup 149M->73M(155M) 0.108ms
[2.108s][info][gc,ergo     ] Free: 1809M, Max: 512K regular, 1730M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[2.108s][info][gc,stats    ] 
[2.108s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[2.108s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[2.108s][info][gc,stats    ] 
[2.108s][info][gc,stats    ] Concurrent Reset                    388 us
[2.108s][info][gc,stats    ] Pause Init Mark (G)                 745 us
[2.108s][info][gc,stats    ] Pause Init Mark (N)                 549 us
[2.108s][info][gc,stats    ]   Update Region States               28 us
[2.108s][info][gc,stats    ] Concurrent Mark Roots              2299 us, parallelism: 1.88x
[2.108s][info][gc,stats    ]   CMR: <total>                     4318 us
[2.108s][info][gc,stats    ]   CMR: Thread Roots                1886 us, workers (us): 1532, 354, ---, ---, ---, ---, ---, ---, 
[2.108s][info][gc,stats    ]   CMR: VM Strong Roots              851 us, workers (us): 646, 205, ---, ---, ---, ---, ---, ---, 
[2.108s][info][gc,stats    ]   CMR: CLDG Roots                  1582 us, workers (us): ---, 1582, ---, ---, ---, ---, ---, ---, 
[2.108s][info][gc,stats    ] Concurrent Marking                45842 us
[2.108s][info][gc,stats    ] Pause Final Mark (G)               6548 us
[2.108s][info][gc,stats    ] Pause Final Mark (N)               6354 us
[2.108s][info][gc,stats    ]   Finish Mark                      6139 us
[2.108s][info][gc,stats    ]   Update Region States               40 us
[2.108s][info][gc,stats    ]   Choose Collection Set              94 us
[2.108s][info][gc,stats    ]   Rebuild Free Set                   19 us
[2.108s][info][gc,stats    ] Concurrent Thread Roots             271 us, parallelism: 1.04x
[2.108s][info][gc,stats    ]   CTR: <total>                      282 us
[2.108s][info][gc,stats    ]   CTR: Thread Roots                 282 us, workers (us): 209,  73, ---, ---, ---, ---, ---, ---, 
[2.108s][info][gc,stats    ] Concurrent Weak References          484 us, parallelism: 0.81x
[2.108s][info][gc,stats    ]   CWRF: <total>                     389 us
[2.108s][info][gc,stats    ]   CWRF: Weak References             389 us, workers (us): 389,   1, ---, ---, ---, ---, ---, ---, 
[2.108s][info][gc,stats    ] Concurrent Weak Roots              1966 us
[2.108s][info][gc,stats    ]   Roots                            1819 us, parallelism: 1.92x
[2.108s][info][gc,stats    ]     CWR: <total>                   3492 us
[2.108s][info][gc,stats    ]     CWR: Code Cache Roots           720 us, workers (us): 378, 341, ---, ---, ---, ---, ---, ---, 
[2.108s][info][gc,stats    ]     CWR: VM Weak Roots             2757 us, workers (us): 1388, 1369, ---, ---, ---, ---, ---, ---, 
[2.108s][info][gc,stats    ]     CWR: CLDG Roots                  15 us, workers (us): ---,  15, ---, ---, ---, ---, ---, ---, 
[2.108s][info][gc,stats    ]   Rendezvous                        108 us
[2.108s][info][gc,stats    ] Concurrent Cleanup                  115 us
[2.108s][info][gc,stats    ] Concurrent Class Unloading         4515 us
[2.108s][info][gc,stats    ]   Unlink Stale                     1520 us
[2.108s][info][gc,stats    ]     System Dictionary                38 us
[2.108s][info][gc,stats    ]     Weak Class Links                  0 us
[2.108s][info][gc,stats    ]     Code Roots                     1481 us
[2.108s][info][gc,stats    ]   Rendezvous                         93 us
[2.108s][info][gc,stats    ]   Purge Unlinked                   2866 us
[2.108s][info][gc,stats    ]     Code Roots                     2855 us
[2.108s][info][gc,stats    ]     CLDG                             10 us
[2.108s][info][gc,stats    ]     Exception Caches                  0 us
[2.108s][info][gc,stats    ] Concurrent Strong Roots            1551 us, parallelism: 0.94x
[2.108s][info][gc,stats    ]   CSR: <total>                     1453 us
[2.108s][info][gc,stats    ]   CSR: VM Strong Roots               29 us, workers (us):  29,   0, ---, ---, ---, ---, ---, ---, 
[2.108s][info][gc,stats    ]   CSR: CLDG Roots                  1424 us, workers (us): 1424, ---, ---, ---, ---, ---, ---, ---, 
[2.108s][info][gc,stats    ] Concurrent Evacuation              8945 us
[2.108s][info][gc,stats    ] Pause Init Update Refs (G)          129 us
[2.108s][info][gc,stats    ] Pause Init Update Refs (N)           44 us
[2.108s][info][gc,stats    ]   Manage GCLABs                       5 us
[2.108s][info][gc,stats    ] Concurrent Update Refs            19839 us
[2.108s][info][gc,stats    ] Concurrent Update Thread Roots      216 us
[2.108s][info][gc,stats    ] Pause Final Update Refs (G)         284 us
[2.108s][info][gc,stats    ] Pause Final Update Refs (N)         116 us
[2.109s][info][gc,stats    ]   Update Region States               35 us
[2.109s][info][gc,stats    ]   Trash Collection Set                4 us
[2.109s][info][gc,stats    ]   Rebuild Free Set                   20 us
[2.109s][info][gc,stats    ] Concurrent Cleanup                  119 us
[2.109s][info][gc,stats    ] 
[2.109s][info][gc,stats    ] Allocation pacing accrued:
[2.109s][info][gc,stats    ]       0 of  2103 ms (  0.0%): <total>
[2.109s][info][gc,stats    ]       0 of  2103 ms (  0.0%): <average total>
[2.109s][info][gc,stats    ] 
[2.109s][info][gc,metaspace] Metaspace: 21241K(21632K)->22218K(22528K) NonClass: 18890K(19072K)->19732K(19904K) Class: 2350K(2560K)->2486K(2624K)
[2.109s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.396s][info][gc          ] Cancelling GC: Stopping VM
[6.397s][info][gc,heap,exit] Heap
[6.397s][info][gc,heap,exit] Shenandoah Heap
[6.398s][info][gc,heap,exit]  1984M max, 1984M soft max, 155M committed, 86577K used
[6.398s][info][gc,heap,exit]  3969 x 512K regions
[6.398s][info][gc,heap,exit] Status: cancelled
[6.398s][info][gc,heap,exit] Reserved region:
[6.398s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.398s][info][gc,heap,exit] Collection set:
[6.398s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.398s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.398s][info][gc,heap,exit] 
[6.398s][info][gc,heap,exit]  Metaspace       used 25073K, committed 25408K, reserved 1114112K
[6.398s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.398s][info][gc,stats    ] 
[6.398s][info][gc,stats    ] GC STATISTICS:
[6.398s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.398s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.398s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.398s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.398s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.398s][info][gc,stats    ] 
[6.398s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.398s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.399s][info][gc,stats    ] 
[6.399s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.399s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.399s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.399s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.399s][info][gc,stats    ] 
[6.399s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.399s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.399s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.399s][info][gc,stats    ]   Raise max pacing delay with care.
[6.399s][info][gc,stats    ] 
[6.399s][info][gc,stats    ] Concurrent Reset               =    0.000 s (a =      388 us) (n =     1) (lvls, us =      387,      387,      387,      387,      388)
[6.399s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      745 us) (n =     1) (lvls, us =      744,      744,      744,      744,      745)
[6.399s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      549 us) (n =     1) (lvls, us =      547,      547,      547,      547,      549)
[6.399s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       28 us) (n =     1) (lvls, us =       28,       28,       28,       28,       28)
[6.399s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     2299 us) (n =     1) (lvls, us =     2285,     2285,     2285,     2285,     2299)
[6.399s][info][gc,stats    ]   CMR: <total>                 =    0.004 s (a =     4318 us) (n =     1) (lvls, us =     4316,     4316,     4316,     4316,     4318)
[6.399s][info][gc,stats    ]   CMR: Thread Roots            =    0.002 s (a =     1886 us) (n =     1) (lvls, us =     1875,     1875,     1875,     1875,     1886)
[6.399s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      851 us) (n =     1) (lvls, us =      850,      850,      850,      850,      851)
[6.399s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     1582 us) (n =     1) (lvls, us =     1562,     1562,     1562,     1562,     1582)
[6.399s][info][gc,stats    ] Concurrent Marking             =    0.046 s (a =    45842 us) (n =     1) (lvls, us =    45703,    45703,    45703,    45703,    45842)
[6.399s][info][gc,stats    ] Pause Final Mark (G)           =    0.007 s (a =     6548 us) (n =     1) (lvls, us =     6543,     6543,     6543,     6543,     6548)
[6.399s][info][gc,stats    ] Pause Final Mark (N)           =    0.006 s (a =     6354 us) (n =     1) (lvls, us =     6348,     6348,     6348,     6348,     6354)
[6.399s][info][gc,stats    ]   Finish Mark                  =    0.006 s (a =     6139 us) (n =     1) (lvls, us =     6133,     6133,     6133,     6133,     6139)
[6.399s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       40 us) (n =     1) (lvls, us =       40,       40,       40,       40,       40)
[6.399s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       94 us) (n =     1) (lvls, us =       94,       94,       94,       94,       94)
[6.399s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[6.399s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      271 us) (n =     1) (lvls, us =      270,      270,      270,      270,      271)
[6.399s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      282 us) (n =     1) (lvls, us =      281,      281,      281,      281,      282)
[6.399s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      282 us) (n =     1) (lvls, us =      281,      281,      281,      281,      282)
[6.399s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      484 us) (n =     1) (lvls, us =      482,      482,      482,      482,      484)
[6.399s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      389 us) (n =     1) (lvls, us =      389,      389,      389,      389,      389)
[6.399s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      389 us) (n =     1) (lvls, us =      389,      389,      389,      389,      389)
[6.400s][info][gc,stats    ] Concurrent Weak Roots          =    0.002 s (a =     1966 us) (n =     1) (lvls, us =     1953,     1953,     1953,     1953,     1966)
[6.400s][info][gc,stats    ]   Roots                        =    0.002 s (a =     1819 us) (n =     1) (lvls, us =     1816,     1816,     1816,     1816,     1819)
[6.400s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     3492 us) (n =     1) (lvls, us =     3477,     3477,     3477,     3477,     3492)
[6.400s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      720 us) (n =     1) (lvls, us =      719,      719,      719,      719,      720)
[6.400s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.003 s (a =     2757 us) (n =     1) (lvls, us =     2754,     2754,     2754,     2754,     2757)
[6.400s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       15 us) (n =     1) (lvls, us =       15,       15,       15,       15,       15)
[6.400s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      108 us) (n =     1) (lvls, us =      107,      107,      107,      107,      108)
[6.400s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      115 us) (n =     1) (lvls, us =      115,      115,      115,      115,      115)
[6.400s][info][gc,stats    ] Concurrent Class Unloading     =    0.005 s (a =     4515 us) (n =     1) (lvls, us =     4512,     4512,     4512,     4512,     4515)
[6.400s][info][gc,stats    ]   Unlink Stale                 =    0.002 s (a =     1520 us) (n =     1) (lvls, us =     1504,     1504,     1504,     1504,     1520)
[6.400s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       38 us) (n =     1) (lvls, us =       38,       38,       38,       38,       38)
[6.400s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.400s][info][gc,stats    ]     Code Roots                 =    0.001 s (a =     1481 us) (n =     1) (lvls, us =     1465,     1465,     1465,     1465,     1481)
[6.400s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       93 us) (n =     1) (lvls, us =       92,       92,       92,       92,       93)
[6.400s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     2866 us) (n =     1) (lvls, us =     2852,     2852,     2852,     2852,     2866)
[6.400s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2855 us) (n =     1) (lvls, us =     2852,     2852,     2852,     2852,     2855)
[6.400s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       10 us) (n =     1) (lvls, us =       10,       10,       10,       10,       10)
[6.400s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.400s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     1551 us) (n =     1) (lvls, us =     1543,     1543,     1543,     1543,     1551)
[6.400s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1453 us) (n =     1) (lvls, us =     1445,     1445,     1445,     1445,     1453)
[6.400s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       29 us) (n =     1) (lvls, us =       29,       29,       29,       29,       29)
[6.400s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1424 us) (n =     1) (lvls, us =     1406,     1406,     1406,     1406,     1424)
[6.400s][info][gc,stats    ] Concurrent Evacuation          =    0.009 s (a =     8945 us) (n =     1) (lvls, us =     8945,     8945,     8945,     8945,     8945)
[6.400s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      129 us) (n =     1) (lvls, us =      127,      127,      127,      127,      129)
[6.400s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       44 us) (n =     1) (lvls, us =       44,       44,       44,       44,       44)
[6.400s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.400s][info][gc,stats    ] Concurrent Update Refs         =    0.020 s (a =    19839 us) (n =     1) (lvls, us =    19727,    19727,    19727,    19727,    19839)
[6.400s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      216 us) (n =     1) (lvls, us =      215,      215,      215,      215,      216)
[6.400s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      284 us) (n =     1) (lvls, us =      283,      283,      283,      283,      284)
[6.400s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      116 us) (n =     1) (lvls, us =      115,      115,      115,      115,      116)
[6.400s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       35 us) (n =     1) (lvls, us =       35,       35,       35,       35,       35)
[6.400s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.400s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[6.400s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      119 us) (n =     1) (lvls, us =      117,      117,      117,      117,      119)
[6.400s][info][gc,stats    ] 
[6.400s][info][gc,stats    ] 
[6.400s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.400s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.400s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.400s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.400s][info][gc,stats    ] 
[6.400s][info][gc,stats    ]     1 successful concurrent GCs
[6.401s][info][gc,stats    ]       0 invoked explicitly
[6.401s][info][gc,stats    ]       0 invoked implicitly
[6.401s][info][gc,stats    ] 
[6.401s][info][gc,stats    ]     0 Degenerated GCs
[6.401s][info][gc,stats    ]       0 caused by allocation failure
[6.401s][info][gc,stats    ]       0 upgraded to Full GC
[6.401s][info][gc,stats    ] 
[6.401s][info][gc,stats    ]     0 Full GCs
[6.401s][info][gc,stats    ]       0 invoked explicitly
[6.401s][info][gc,stats    ]       0 invoked implicitly
[6.401s][info][gc,stats    ]       0 caused by allocation failure
[6.401s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.401s][info][gc,stats    ] 
[6.401s][info][gc,stats    ] 
