[0.006s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.006s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.007s][info][gc] Using Shenandoah
[0.008s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.008s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.008s][info][gc,init] CPUs: 4 total, 4 available
[0.008s][info][gc,init] Memory: 7937M
[0.008s][info][gc,init] Large Page Support: Disabled
[0.008s][info][gc,init] NUMA Support: Disabled
[0.008s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.008s][info][gc,init] Heap Min Capacity: 6656K
[0.008s][info][gc,init] Heap Initial Capacity: 127488K
[0.008s][info][gc,init] Heap Max Capacity: 2032128K
[0.008s][info][gc,init] Pre-touch: Disabled
[0.008s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.008s][info][gc,init] Heuristics: Adaptive
[0.008s][info][gc,init] Heap Region Count: 3969
[0.008s][info][gc,init] Heap Region Size: 512K
[0.008s][info][gc,init] TLAB Size Max: 512K
[0.008s][info][gc,init] Humongous Object Threshold: 512K
[0.008s][info][gc,init] Parallel Workers: 8
[0.008s][info][gc,init] Concurrent Workers: 2
[0.022s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007ff287000000-0x00007ff287c97000-0x00007ff287c97000), size 13201408, SharedBaseAddress: 0x00007ff287000000, ArchiveRelocationMode: 1.
[0.022s][info][gc,metaspace] Compressed class space mapped at: 0x00007ff288000000-0x00007ff2c8000000, reserved size: 1073741824
[0.022s][info][gc,metaspace] Narrow klass base: 0x00007ff287000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.387s][info][gc          ] Trigger: Metadata GC Threshold
[1.388s][info][gc,ergo     ] Free: 1790M, Max: 512K regular, 1790M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.388s][info][gc,start    ] GC(0) Concurrent reset
[1.388s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.388s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.388s][info][gc          ] GC(0) Concurrent reset 0.638ms
[1.389s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.389s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.389s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1790M, Non-Taxable: 179M, Alloc Tax Rate: 0.1x
[1.389s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.529ms
[1.389s][info][gc,start    ] GC(0) Concurrent marking roots
[1.389s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.393s][info][gc          ] GC(0) Concurrent marking roots 3.565ms
[1.393s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.393s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.405s][info][gc          ] GC(0) Concurrent marking (unload classes) 12.418ms
[1.405s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.405s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.407s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1893M, Max CSet: 84672K, Min Garbage: 0B
[1.407s][info][gc,ergo     ] GC(0) Collectable Garbage: 82090K (99%), Immediate: 5343K (6%), CSet: 76746K (92%)
[1.407s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 84480K, Free: 1794M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.407s][info][gc          ] GC(0) Pause Final Mark (unload classes) 1.472ms
[1.407s][info][gc,start    ] GC(0) Concurrent thread roots
[1.407s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.407s][info][gc          ] GC(0) Concurrent thread roots 0.288ms
[1.407s][info][gc,start    ] GC(0) Concurrent weak references
[1.407s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.408s][info][gc,ref      ] GC(0) Encountered references: Soft: 3955, Weak: 2135, Final: 20, Phantom: 796
[1.408s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 910, Final: 0, Phantom: 500
[1.408s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 482, Final: 0, Phantom: 317
[1.408s][info][gc          ] GC(0) Concurrent weak references 0.383ms
[1.408s][info][gc,start    ] GC(0) Concurrent weak roots
[1.408s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.414s][info][gc          ] GC(0) Concurrent weak roots 6.110ms
[1.414s][info][gc,start    ] GC(0) Concurrent cleanup
[1.414s][info][gc          ] GC(0) Concurrent cleanup 97M->92M(125M) 0.081ms
[1.414s][info][gc,ergo     ] GC(0) Free: 1793M, Max: 512K regular, 1787M humongous, Frag: 1% external, 0% internal; Reserve: 100864K, Max: 512K
[1.414s][info][gc,start    ] GC(0) Concurrent class unloading
[1.414s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.422s][info][gc          ] GC(0) Concurrent class unloading 7.839ms
[1.422s][info][gc,start    ] GC(0) Concurrent strong roots
[1.422s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.423s][info][gc          ] GC(0) Concurrent strong roots 1.223ms
[1.423s][info][gc,start    ] GC(0) Concurrent evacuation
[1.423s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.428s][info][gc          ] GC(0) Concurrent evacuation 5.301ms
[1.429s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.429s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 101M, Free: 1792M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.429s][info][gc          ] GC(0) Pause Init Update Refs 0.079ms
[1.429s][info][gc,start    ] GC(0) Concurrent update references
[1.429s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.434s][info][gc          ] GC(0) Concurrent update references 5.294ms
[1.434s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.435s][info][gc          ] GC(0) Concurrent update thread roots 0.453ms
[1.435s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.435s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.435s][info][gc          ] GC(0) Pause Final Update Refs 0.078ms
[1.435s][info][gc,start    ] GC(0) Concurrent cleanup
[1.435s][info][gc          ] GC(0) Concurrent cleanup 101M->18M(133M) 0.089ms
[1.435s][info][gc,ergo     ] Free: 1866M, Max: 512K regular, 1778M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.435s][info][gc,stats    ] 
[1.435s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.435s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.435s][info][gc,stats    ] 
[1.435s][info][gc,stats    ] Concurrent Reset                    726 us
[1.435s][info][gc,stats    ] Pause Init Mark (G)                 811 us
[1.435s][info][gc,stats    ] Pause Init Mark (N)                 546 us
[1.435s][info][gc,stats    ]   Update Region States               36 us
[1.435s][info][gc,stats    ] Concurrent Mark Roots              3598 us, parallelism: 0.92x
[1.435s][info][gc,stats    ]   CMR: <total>                     3295 us
[1.435s][info][gc,stats    ]   CMR: Thread Roots                 791 us, workers (us): 791,   0, ---, ---, ---, ---, ---, ---, 
[1.435s][info][gc,stats    ]   CMR: VM Strong Roots              733 us, workers (us): 732,   0, ---, ---, ---, ---, ---, ---, 
[1.435s][info][gc,stats    ]   CMR: CLDG Roots                  1771 us, workers (us): 1771, ---, ---, ---, ---, ---, ---, ---, 
[1.435s][info][gc,stats    ] Concurrent Marking                12456 us
[1.435s][info][gc,stats    ] Pause Final Mark (G)               1605 us
[1.435s][info][gc,stats    ] Pause Final Mark (N)               1482 us
[1.435s][info][gc,stats    ]   Finish Mark                      1227 us
[1.435s][info][gc,stats    ]   Update Region States               39 us
[1.435s][info][gc,stats    ]   Choose Collection Set             122 us
[1.435s][info][gc,stats    ]   Rebuild Free Set                   26 us
[1.435s][info][gc,stats    ] Concurrent Thread Roots             303 us, parallelism: 0.81x
[1.435s][info][gc,stats    ]   CTR: <total>                      246 us
[1.435s][info][gc,stats    ]   CTR: Thread Roots                 246 us, workers (us): 246,   0, ---, ---, ---, ---, ---, ---, 
[1.435s][info][gc,stats    ] Concurrent Weak References          564 us, parallelism: 0.51x
[1.435s][info][gc,stats    ]   CWRF: <total>                     288 us
[1.435s][info][gc,stats    ]   CWRF: Weak References             288 us, workers (us): 288,   0, ---, ---, ---, ---, ---, ---, 
[1.435s][info][gc,stats    ] Concurrent Weak Roots              6141 us
[1.435s][info][gc,stats    ]   Roots                            5925 us, parallelism: 0.83x
[1.435s][info][gc,stats    ]     CWR: <total>                   4920 us
[1.435s][info][gc,stats    ]     CWR: Code Cache Roots          1514 us, workers (us): 922, 592, ---, ---, ---, ---, ---, ---, 
[1.435s][info][gc,stats    ]     CWR: VM Weak Roots             3389 us, workers (us): 3388,   1, ---, ---, ---, ---, ---, ---, 
[1.435s][info][gc,stats    ]     CWR: CLDG Roots                  17 us, workers (us):  17, ---, ---, ---, ---, ---, ---, ---, 
[1.435s][info][gc,stats    ]   Rendezvous                        157 us
[1.435s][info][gc,stats    ] Concurrent Cleanup                   95 us
[1.435s][info][gc,stats    ] Concurrent Class Unloading         7860 us
[1.435s][info][gc,stats    ]   Unlink Stale                     3010 us
[1.435s][info][gc,stats    ]     System Dictionary                55 us
[1.435s][info][gc,stats    ]     Weak Class Links                  0 us
[1.435s][info][gc,stats    ]     Code Roots                     2954 us
[1.435s][info][gc,stats    ]   Rendezvous                        172 us
[1.435s][info][gc,stats    ]   Purge Unlinked                   4627 us
[1.435s][info][gc,stats    ]     Code Roots                     4598 us
[1.435s][info][gc,stats    ]     CLDG                             29 us
[1.435s][info][gc,stats    ]     Exception Caches                  0 us
[1.435s][info][gc,stats    ] Concurrent Strong Roots            1238 us, parallelism: 0.96x
[1.435s][info][gc,stats    ]   CSR: <total>                     1188 us
[1.435s][info][gc,stats    ]   CSR: VM Strong Roots               27 us, workers (us):  20,   6, ---, ---, ---, ---, ---, ---, 
[1.435s][info][gc,stats    ]   CSR: CLDG Roots                  1161 us, workers (us): ---, 1161, ---, ---, ---, ---, ---, ---, 
[1.435s][info][gc,stats    ] Concurrent Evacuation              5331 us
[1.435s][info][gc,stats    ] Pause Init Update Refs (G)          242 us
[1.435s][info][gc,stats    ] Pause Init Update Refs (N)           99 us
[1.435s][info][gc,stats    ]   Manage GCLABs                       6 us
[1.435s][info][gc,stats    ] Concurrent Update Refs             5321 us
[1.435s][info][gc,stats    ] Concurrent Update Thread Roots      470 us
[1.435s][info][gc,stats    ] Pause Final Update Refs (G)         184 us
[1.436s][info][gc,stats    ] Pause Final Update Refs (N)          88 us
[1.436s][info][gc,stats    ]   Update Region States               20 us
[1.436s][info][gc,stats    ]   Trash Collection Set                4 us
[1.436s][info][gc,stats    ]   Rebuild Free Set                   17 us
[1.436s][info][gc,stats    ] Concurrent Cleanup                  103 us
[1.436s][info][gc,stats    ] 
[1.436s][info][gc,stats    ] Allocation pacing accrued:
[1.436s][info][gc,stats    ]       0 of  1428 ms (  0.0%): <total>
[1.436s][info][gc,stats    ]       0 of  1428 ms (  0.0%): <average total>
[1.436s][info][gc,stats    ] 
[1.436s][info][gc,metaspace] Metaspace: 21200K(21568K)->21540K(21888K) NonClass: 18863K(19072K)->19151K(19328K) Class: 2337K(2496K)->2388K(2560K)
[1.436s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[7.861s][info][gc          ] Cancelling GC: Stopping VM
[7.861s][info][gc,heap,exit] Heap
[7.861s][info][gc,heap,exit] Shenandoah Heap
[7.861s][info][gc,heap,exit]  1984M max, 1984M soft max, 133M committed, 37930K used
[7.861s][info][gc,heap,exit]  3969 x 512K regions
[7.861s][info][gc,heap,exit] Status: cancelled
[7.861s][info][gc,heap,exit] Reserved region:
[7.861s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[7.861s][info][gc,heap,exit] Collection set:
[7.861s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[7.861s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[7.861s][info][gc,heap,exit] 
[7.861s][info][gc,heap,exit]  Metaspace       used 25386K, committed 25728K, reserved 1114112K
[7.861s][info][gc,heap,exit]   class space    used 2924K, committed 3072K, reserved 1048576K
[7.861s][info][gc,stats    ] 
[7.861s][info][gc,stats    ] GC STATISTICS:
[7.862s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[7.862s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[7.862s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[7.862s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[7.862s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[7.862s][info][gc,stats    ] 
[7.862s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[7.862s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[7.862s][info][gc,stats    ] 
[7.862s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[7.862s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[7.862s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[7.862s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[7.862s][info][gc,stats    ] 
[7.862s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[7.862s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[7.862s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[7.862s][info][gc,stats    ]   Raise max pacing delay with care.
[7.862s][info][gc,stats    ] 
[7.862s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      726 us) (n =     1) (lvls, us =      725,      725,      725,      725,      726)
[7.862s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      811 us) (n =     1) (lvls, us =      811,      811,      811,      811,      811)
[7.862s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      546 us) (n =     1) (lvls, us =      545,      545,      545,      545,      546)
[7.862s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       36 us) (n =     1) (lvls, us =       36,       36,       36,       36,       36)
[7.862s][info][gc,stats    ] Concurrent Mark Roots          =    0.004 s (a =     3598 us) (n =     1) (lvls, us =     3594,     3594,     3594,     3594,     3598)
[7.862s][info][gc,stats    ]   CMR: <total>                 =    0.003 s (a =     3295 us) (n =     1) (lvls, us =     3281,     3281,     3281,     3281,     3295)
[7.862s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =      791 us) (n =     1) (lvls, us =      789,      789,      789,      789,      791)
[7.862s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      733 us) (n =     1) (lvls, us =      732,      732,      732,      732,      733)
[7.862s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     1771 us) (n =     1) (lvls, us =     1758,     1758,     1758,     1758,     1771)
[7.862s][info][gc,stats    ] Concurrent Marking             =    0.012 s (a =    12456 us) (n =     1) (lvls, us =    12305,    12305,    12305,    12305,    12456)
[7.863s][info][gc,stats    ] Pause Final Mark (G)           =    0.002 s (a =     1605 us) (n =     1) (lvls, us =     1602,     1602,     1602,     1602,     1605)
[7.863s][info][gc,stats    ] Pause Final Mark (N)           =    0.001 s (a =     1482 us) (n =     1) (lvls, us =     1465,     1465,     1465,     1465,     1482)
[7.863s][info][gc,stats    ]   Finish Mark                  =    0.001 s (a =     1227 us) (n =     1) (lvls, us =     1211,     1211,     1211,     1211,     1227)
[7.863s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       39 us) (n =     1) (lvls, us =       39,       39,       39,       39,       39)
[7.863s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =      122 us) (n =     1) (lvls, us =      121,      121,      121,      121,      122)
[7.863s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       26 us) (n =     1) (lvls, us =       25,       25,       25,       25,       26)
[7.863s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      303 us) (n =     1) (lvls, us =      303,      303,      303,      303,      303)
[7.863s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      246 us) (n =     1) (lvls, us =      244,      244,      244,      244,      246)
[7.863s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      246 us) (n =     1) (lvls, us =      244,      244,      244,      244,      246)
[7.863s][info][gc,stats    ] Concurrent Weak References     =    0.001 s (a =      564 us) (n =     1) (lvls, us =      563,      563,      563,      563,      564)
[7.863s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      288 us) (n =     1) (lvls, us =      287,      287,      287,      287,      288)
[7.863s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      288 us) (n =     1) (lvls, us =      287,      287,      287,      287,      288)
[7.863s][info][gc,stats    ] Concurrent Weak Roots          =    0.006 s (a =     6141 us) (n =     1) (lvls, us =     6133,     6133,     6133,     6133,     6141)
[7.863s][info][gc,stats    ]   Roots                        =    0.006 s (a =     5925 us) (n =     1) (lvls, us =     5918,     5918,     5918,     5918,     5925)
[7.863s][info][gc,stats    ]     CWR: <total>               =    0.005 s (a =     4920 us) (n =     1) (lvls, us =     4902,     4902,     4902,     4902,     4920)
[7.863s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.002 s (a =     1514 us) (n =     1) (lvls, us =     1504,     1504,     1504,     1504,     1514)
[7.863s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.003 s (a =     3389 us) (n =     1) (lvls, us =     3379,     3379,     3379,     3379,     3389)
[7.863s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[7.863s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      157 us) (n =     1) (lvls, us =      156,      156,      156,      156,      157)
[7.863s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       95 us) (n =     1) (lvls, us =       95,       95,       95,       95,       95)
[7.863s][info][gc,stats    ] Concurrent Class Unloading     =    0.008 s (a =     7860 us) (n =     1) (lvls, us =     7852,     7852,     7852,     7852,     7860)
[7.863s][info][gc,stats    ]   Unlink Stale                 =    0.003 s (a =     3010 us) (n =     1) (lvls, us =     3008,     3008,     3008,     3008,     3010)
[7.863s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       55 us) (n =     1) (lvls, us =       55,       55,       55,       55,       55)
[7.863s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.863s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2954 us) (n =     1) (lvls, us =     2949,     2949,     2949,     2949,     2954)
[7.863s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      172 us) (n =     1) (lvls, us =      170,      170,      170,      170,      172)
[7.876s][info][gc,stats    ]   Purge Unlinked               =    0.005 s (a =     4627 us) (n =     1) (lvls, us =     4609,     4609,     4609,     4609,     4627)
[7.876s][info][gc,stats    ]     Code Roots                 =    0.005 s (a =     4598 us) (n =     1) (lvls, us =     4590,     4590,     4590,     4590,     4598)
[7.876s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       29 us) (n =     1) (lvls, us =       29,       29,       29,       29,       29)
[7.876s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.876s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1238 us) (n =     1) (lvls, us =     1230,     1230,     1230,     1230,     1238)
[7.876s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1188 us) (n =     1) (lvls, us =     1172,     1172,     1172,     1172,     1188)
[7.876s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       27 us) (n =     1) (lvls, us =       26,       26,       26,       26,       27)
[7.876s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1161 us) (n =     1) (lvls, us =     1152,     1152,     1152,     1152,     1161)
[7.876s][info][gc,stats    ] Concurrent Evacuation          =    0.005 s (a =     5331 us) (n =     1) (lvls, us =     5312,     5312,     5312,     5312,     5331)
[7.876s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      242 us) (n =     1) (lvls, us =      240,      240,      240,      240,      242)
[7.876s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       99 us) (n =     1) (lvls, us =       99,       99,       99,       99,       99)
[7.876s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        6 us) (n =     1) (lvls, us =        6,        6,        6,        6,        6)
[7.876s][info][gc,stats    ] Concurrent Update Refs         =    0.005 s (a =     5321 us) (n =     1) (lvls, us =     5312,     5312,     5312,     5312,     5321)
[7.876s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      470 us) (n =     1) (lvls, us =      469,      469,      469,      469,      470)
[7.876s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      184 us) (n =     1) (lvls, us =      184,      184,      184,      184,      184)
[7.876s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =       88 us) (n =     1) (lvls, us =       88,       88,       88,       88,       88)
[7.876s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[7.876s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[7.876s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[7.876s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      103 us) (n =     1) (lvls, us =      102,      102,      102,      102,      103)
[7.876s][info][gc,stats    ] 
[7.876s][info][gc,stats    ] 
[7.876s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[7.876s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[7.876s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[7.876s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[7.876s][info][gc,stats    ] 
[7.876s][info][gc,stats    ]     1 successful concurrent GCs
[7.876s][info][gc,stats    ]       0 invoked explicitly
[7.876s][info][gc,stats    ]       0 invoked implicitly
[7.876s][info][gc,stats    ] 
[7.876s][info][gc,stats    ]     0 Degenerated GCs
[7.876s][info][gc,stats    ]       0 caused by allocation failure
[7.876s][info][gc,stats    ]       0 upgraded to Full GC
[7.876s][info][gc,stats    ] 
[7.876s][info][gc,stats    ]     0 Full GCs
[7.876s][info][gc,stats    ]       0 invoked explicitly
[7.876s][info][gc,stats    ]       0 invoked implicitly
[7.876s][info][gc,stats    ]       0 caused by allocation failure
[7.876s][info][gc,stats    ]       0 upgraded from Degenerated GC
[7.876s][info][gc,stats    ] 
[7.876s][info][gc,stats    ] 
