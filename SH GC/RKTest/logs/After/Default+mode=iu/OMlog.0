[0.005s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.005s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.007s][info][gc] Using Shenandoah
[0.008s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.008s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.008s][info][gc,init] CPUs: 4 total, 4 available
[0.008s][info][gc,init] Memory: 7937M
[0.008s][info][gc,init] Large Page Support: Disabled
[0.008s][info][gc,init] NUMA Support: Disabled
[0.008s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.008s][info][gc,init] Heap Min Capacity: 6656K
[0.008s][info][gc,init] Heap Initial Capacity: 127488K
[0.008s][info][gc,init] Heap Max Capacity: 2032128K
[0.008s][info][gc,init] Pre-touch: Disabled
[0.008s][info][gc,init] Mode: Incremental-Update (IU)
[0.008s][info][gc,init] Heuristics: Adaptive
[0.008s][info][gc,init] Heap Region Count: 3969
[0.008s][info][gc,init] Heap Region Size: 512K
[0.008s][info][gc,init] TLAB Size Max: 512K
[0.008s][info][gc,init] Humongous Object Threshold: 512K
[0.008s][info][gc,init] Parallel Workers: 8
[0.008s][info][gc,init] Concurrent Workers: 2
[0.019s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f243f000000-0x00007f243fc97000-0x00007f243fc97000), size 13201408, SharedBaseAddress: 0x00007f243f000000, ArchiveRelocationMode: 1.
[0.019s][info][gc,metaspace] Compressed class space mapped at: 0x00007f2440000000-0x00007f2480000000, reserved size: 1073741824
[0.019s][info][gc,metaspace] Narrow klass base: 0x00007f243f000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[2.079s][info][gc          ] Trigger: Metadata GC Threshold
[2.079s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[2.079s][info][gc,start    ] GC(0) Concurrent reset
[2.080s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[2.080s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[2.080s][info][gc          ] GC(0) Concurrent reset 0.364ms
[2.080s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[2.080s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[2.080s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[2.080s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.440ms
[2.080s][info][gc,start    ] GC(0) Concurrent marking roots
[2.080s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[2.082s][info][gc          ] GC(0) Concurrent marking roots 1.546ms
[2.082s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[2.082s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[2.121s][info][gc          ] GC(0) Concurrent marking (unload classes) 38.457ms
[2.121s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[2.121s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[2.127s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1847M, Max CSet: 84672K, Min Garbage: 0B
[2.127s][info][gc,ergo     ] GC(0) Collectable Garbage: 72107K (98%), Immediate: 4847K (6%), CSet: 67260K (91%)
[2.127s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 75776K, Free: 1748M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.127s][info][gc          ] GC(0) Pause Final Mark (unload classes) 6.328ms
[2.127s][info][gc,start    ] GC(0) Concurrent thread roots
[2.127s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[2.127s][info][gc          ] GC(0) Concurrent thread roots 0.273ms
[2.127s][info][gc,start    ] GC(0) Concurrent weak references
[2.127s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[2.128s][info][gc,ref      ] GC(0) Encountered references: Soft: 3953, Weak: 2092, Final: 4, Phantom: 821
[2.128s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1197, Final: 0, Phantom: 457
[2.128s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 498, Final: 0, Phantom: 230
[2.128s][info][gc          ] GC(0) Concurrent weak references 0.552ms
[2.128s][info][gc,start    ] GC(0) Concurrent weak roots
[2.128s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[2.133s][info][gc          ] GC(0) Concurrent weak roots 5.475ms
[2.133s][info][gc,start    ] GC(0) Concurrent cleanup
[2.133s][info][gc          ] GC(0) Concurrent cleanup 141M->136M(144M) 0.103ms
[2.133s][info][gc,ergo     ] GC(0) Free: 1747M, Max: 512K regular, 1742M humongous, Frag: 1% external, 0% internal; Reserve: 100610K, Max: 512K
[2.133s][info][gc,start    ] GC(0) Concurrent class unloading
[2.133s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[2.139s][info][gc          ] GC(0) Concurrent class unloading 5.116ms
[2.139s][info][gc,start    ] GC(0) Concurrent strong roots
[2.139s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[2.140s][info][gc          ] GC(0) Concurrent strong roots 1.195ms
[2.140s][info][gc,start    ] GC(0) Concurrent evacuation
[2.140s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[2.148s][info][gc          ] GC(0) Concurrent evacuation 8.609ms
[2.148s][info][gc,start    ] GC(0) Pause Init Update Refs
[2.149s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 146M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[2.149s][info][gc          ] GC(0) Pause Init Update Refs 0.032ms
[2.149s][info][gc,start    ] GC(0) Concurrent update references
[2.149s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[2.168s][info][gc          ] GC(0) Concurrent update references 19.863ms
[2.168s][info][gc,start    ] GC(0) Concurrent update thread roots
[2.169s][info][gc          ] GC(0) Concurrent update thread roots 0.205ms
[2.169s][info][gc,start    ] GC(0) Pause Final Update Refs
[2.169s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[2.169s][info][gc          ] GC(0) Pause Final Update Refs 0.072ms
[2.169s][info][gc,start    ] GC(0) Concurrent cleanup
[2.169s][info][gc          ] GC(0) Concurrent cleanup 147M->73M(153M) 0.060ms
[2.169s][info][gc,ergo     ] Free: 1809M, Max: 512K regular, 1731M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[2.169s][info][gc,stats    ] 
[2.169s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[2.169s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[2.169s][info][gc,stats    ] 
[2.169s][info][gc,stats    ] Concurrent Reset                    384 us
[2.169s][info][gc,stats    ] Pause Init Mark (G)                 722 us
[2.169s][info][gc,stats    ] Pause Init Mark (N)                 462 us
[2.169s][info][gc,stats    ]   Update Region States               29 us
[2.169s][info][gc,stats    ] Concurrent Mark Roots              1564 us, parallelism: 1.84x
[2.169s][info][gc,stats    ]   CMR: <total>                     2873 us
[2.169s][info][gc,stats    ]   CMR: Thread Roots                1060 us, workers (us): 1013,  48, ---, ---, ---, ---, ---, ---, 
[2.169s][info][gc,stats    ]   CMR: VM Strong Roots              653 us, workers (us): 405, 248, ---, ---, ---, ---, ---, ---, 
[2.169s][info][gc,stats    ]   CMR: CLDG Roots                  1159 us, workers (us): ---, 1159, ---, ---, ---, ---, ---, ---, 
[2.169s][info][gc,stats    ] Concurrent Marking                38489 us
[2.169s][info][gc,stats    ] Pause Final Mark (G)               6375 us
[2.169s][info][gc,stats    ] Pause Final Mark (N)               6337 us
[2.169s][info][gc,stats    ]   Finish Mark                      6136 us
[2.169s][info][gc,stats    ]   Update Region States               40 us
[2.169s][info][gc,stats    ]   Choose Collection Set             102 us
[2.169s][info][gc,stats    ]   Rebuild Free Set                   17 us
[2.169s][info][gc,stats    ] Concurrent Thread Roots             288 us, parallelism: 1.49x
[2.169s][info][gc,stats    ]   CTR: <total>                      428 us
[2.169s][info][gc,stats    ]   CTR: Thread Roots                 428 us, workers (us): 230, 198, ---, ---, ---, ---, ---, ---, 
[2.169s][info][gc,stats    ] Concurrent Weak References          560 us, parallelism: 0.85x
[2.169s][info][gc,stats    ]   CWRF: <total>                     478 us
[2.169s][info][gc,stats    ]   CWRF: Weak References             478 us, workers (us): 448,  30, ---, ---, ---, ---, ---, ---, 
[2.169s][info][gc,stats    ] Concurrent Weak Roots              5496 us
[2.169s][info][gc,stats    ]   Roots                            3325 us, parallelism: 1.80x
[2.169s][info][gc,stats    ]     CWR: <total>                   5992 us
[2.169s][info][gc,stats    ]     CWR: Code Cache Roots          2252 us, workers (us): 936, 1315, ---, ---, ---, ---, ---, ---, 
[2.169s][info][gc,stats    ]     CWR: VM Weak Roots             3723 us, workers (us): 2075, 1648, ---, ---, ---, ---, ---, ---, 
[2.169s][info][gc,stats    ]     CWR: CLDG Roots                  18 us, workers (us): ---,  18, ---, ---, ---, ---, ---, ---, 
[2.169s][info][gc,stats    ]   Rendezvous                       2133 us
[2.169s][info][gc,stats    ] Concurrent Cleanup                  113 us
[2.169s][info][gc,stats    ] Concurrent Class Unloading         5137 us
[2.169s][info][gc,stats    ]   Unlink Stale                     2604 us
[2.169s][info][gc,stats    ]     System Dictionary                43 us
[2.169s][info][gc,stats    ]     Weak Class Links                  0 us
[2.169s][info][gc,stats    ]     Code Roots                     2560 us
[2.169s][info][gc,stats    ]   Rendezvous                         20 us
[2.169s][info][gc,stats    ]   Purge Unlinked                   2473 us
[2.169s][info][gc,stats    ]     Code Roots                     2464 us
[2.169s][info][gc,stats    ]     CLDG                              9 us
[2.169s][info][gc,stats    ]     Exception Caches                  0 us
[2.169s][info][gc,stats    ] Concurrent Strong Roots            1218 us, parallelism: 0.94x
[2.169s][info][gc,stats    ]   CSR: <total>                     1148 us
[2.169s][info][gc,stats    ]   CSR: VM Strong Roots               35 us, workers (us):  31,   5, ---, ---, ---, ---, ---, ---, 
[2.169s][info][gc,stats    ]   CSR: CLDG Roots                  1113 us, workers (us): ---, 1113, ---, ---, ---, ---, ---, ---, 
[2.169s][info][gc,stats    ] Concurrent Evacuation              8637 us
[2.169s][info][gc,stats    ] Pause Init Update Refs (G)          145 us
[2.169s][info][gc,stats    ] Pause Init Update Refs (N)           41 us
[2.169s][info][gc,stats    ]   Manage GCLABs                       5 us
[2.169s][info][gc,stats    ] Concurrent Update Refs            19894 us
[2.169s][info][gc,stats    ] Concurrent Update Thread Roots      218 us
[2.169s][info][gc,stats    ] Pause Final Update Refs (G)         107 us
[2.169s][info][gc,stats    ] Pause Final Update Refs (N)          81 us
[2.169s][info][gc,stats    ]   Update Region States               31 us
[2.169s][info][gc,stats    ]   Trash Collection Set                3 us
[2.169s][info][gc,stats    ]   Rebuild Free Set                   18 us
[2.169s][info][gc,stats    ] Concurrent Cleanup                   69 us
[2.169s][info][gc,stats    ] 
[2.169s][info][gc,stats    ] Allocation pacing accrued:
[2.169s][info][gc,stats    ]       0 of  2162 ms (  0.0%): <total>
[2.169s][info][gc,stats    ]       0 of  2162 ms (  0.0%): <average total>
[2.169s][info][gc,stats    ] 
[2.169s][info][gc,metaspace] Metaspace: 21273K(21632K)->22185K(22528K) NonClass: 18926K(19136K)->19715K(19904K) Class: 2346K(2496K)->2470K(2624K)
[2.169s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.466s][info][gc          ] Cancelling GC: Stopping VM
[6.466s][info][gc,heap,exit] Heap
[6.466s][info][gc,heap,exit] Shenandoah Heap
[6.466s][info][gc,heap,exit]  1984M max, 1984M soft max, 153M committed, 86507K used
[6.466s][info][gc,heap,exit]  3969 x 512K regions
[6.466s][info][gc,heap,exit] Status: cancelled
[6.466s][info][gc,heap,exit] Reserved region:
[6.466s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.466s][info][gc,heap,exit] Collection set:
[6.466s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.466s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.466s][info][gc,heap,exit] 
[6.466s][info][gc,heap,exit]  Metaspace       used 25123K, committed 25408K, reserved 1114112K
[6.466s][info][gc,heap,exit]   class space    used 2773K, committed 2880K, reserved 1048576K
[6.467s][info][gc,stats    ] 
[6.467s][info][gc,stats    ] GC STATISTICS:
[6.467s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.467s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.467s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.467s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.467s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.467s][info][gc,stats    ] 
[6.467s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.467s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.467s][info][gc,stats    ] 
[6.467s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.467s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.467s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.467s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.467s][info][gc,stats    ] 
[6.467s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.467s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.467s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.467s][info][gc,stats    ]   Raise max pacing delay with care.
[6.467s][info][gc,stats    ] 
[6.467s][info][gc,stats    ] Concurrent Reset               =    0.000 s (a =      384 us) (n =     1) (lvls, us =      383,      383,      383,      383,      384)
[6.467s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      722 us) (n =     1) (lvls, us =      721,      721,      721,      721,      722)
[6.467s][info][gc,stats    ] Pause Init Mark (N)            =    0.000 s (a =      462 us) (n =     1) (lvls, us =      461,      461,      461,      461,      462)
[6.467s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       29 us) (n =     1) (lvls, us =       29,       29,       29,       29,       29)
[6.467s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     1564 us) (n =     1) (lvls, us =     1562,     1562,     1562,     1562,     1564)
[6.467s][info][gc,stats    ]   CMR: <total>                 =    0.003 s (a =     2873 us) (n =     1) (lvls, us =     2871,     2871,     2871,     2871,     2873)
[6.467s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1060 us) (n =     1) (lvls, us =     1055,     1055,     1055,     1055,     1060)
[6.467s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      653 us) (n =     1) (lvls, us =      652,      652,      652,      652,      653)
[6.467s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1159 us) (n =     1) (lvls, us =     1152,     1152,     1152,     1152,     1159)
[6.467s][info][gc,stats    ] Concurrent Marking             =    0.038 s (a =    38489 us) (n =     1) (lvls, us =    38477,    38477,    38477,    38477,    38489)
[6.467s][info][gc,stats    ] Pause Final Mark (G)           =    0.006 s (a =     6375 us) (n =     1) (lvls, us =     6367,     6367,     6367,     6367,     6375)
[6.467s][info][gc,stats    ] Pause Final Mark (N)           =    0.006 s (a =     6337 us) (n =     1) (lvls, us =     6328,     6328,     6328,     6328,     6337)
[6.467s][info][gc,stats    ]   Finish Mark                  =    0.006 s (a =     6136 us) (n =     1) (lvls, us =     6133,     6133,     6133,     6133,     6136)
[6.467s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       40 us) (n =     1) (lvls, us =       40,       40,       40,       40,       40)
[6.467s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =      102 us) (n =     1) (lvls, us =      102,      102,      102,      102,      102)
[6.467s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[6.467s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      288 us) (n =     1) (lvls, us =      287,      287,      287,      287,      288)
[6.467s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      428 us) (n =     1) (lvls, us =      428,      428,      428,      428,      428)
[6.467s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      428 us) (n =     1) (lvls, us =      428,      428,      428,      428,      428)
[6.467s][info][gc,stats    ] Concurrent Weak References     =    0.001 s (a =      560 us) (n =     1) (lvls, us =      559,      559,      559,      559,      560)
[6.467s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      478 us) (n =     1) (lvls, us =      477,      477,      477,      477,      478)
[6.467s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      478 us) (n =     1) (lvls, us =      477,      477,      477,      477,      478)
[6.467s][info][gc,stats    ] Concurrent Weak Roots          =    0.005 s (a =     5496 us) (n =     1) (lvls, us =     5488,     5488,     5488,     5488,     5496)
[6.467s][info][gc,stats    ]   Roots                        =    0.003 s (a =     3325 us) (n =     1) (lvls, us =     3320,     3320,     3320,     3320,     3325)
[6.467s][info][gc,stats    ]     CWR: <total>               =    0.006 s (a =     5992 us) (n =     1) (lvls, us =     5977,     5977,     5977,     5977,     5992)
[6.467s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.002 s (a =     2252 us) (n =     1) (lvls, us =     2246,     2246,     2246,     2246,     2252)
[6.467s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.004 s (a =     3723 us) (n =     1) (lvls, us =     3711,     3711,     3711,     3711,     3723)
[6.467s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[6.467s][info][gc,stats    ]   Rendezvous                   =    0.002 s (a =     2133 us) (n =     1) (lvls, us =     2129,     2129,     2129,     2129,     2133)
[6.467s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      113 us) (n =     1) (lvls, us =      111,      111,      111,      111,      113)
[6.467s][info][gc,stats    ] Concurrent Class Unloading     =    0.005 s (a =     5137 us) (n =     1) (lvls, us =     5137,     5137,     5137,     5137,     5137)
[6.467s][info][gc,stats    ]   Unlink Stale                 =    0.003 s (a =     2604 us) (n =     1) (lvls, us =     2598,     2598,     2598,     2598,     2604)
[6.467s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       43 us) (n =     1) (lvls, us =       43,       43,       43,       43,       43)
[6.467s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.467s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2560 us) (n =     1) (lvls, us =     2559,     2559,     2559,     2559,     2560)
[6.467s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[6.467s][info][gc,stats    ]   Purge Unlinked               =    0.002 s (a =     2473 us) (n =     1) (lvls, us =     2461,     2461,     2461,     2461,     2473)
[6.467s][info][gc,stats    ]     Code Roots                 =    0.002 s (a =     2464 us) (n =     1) (lvls, us =     2461,     2461,     2461,     2461,     2464)
[6.467s][info][gc,stats    ]     CLDG                       =    0.000 s (a =        9 us) (n =     1) (lvls, us =        9,        9,        9,        9,        9)
[6.467s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.467s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1218 us) (n =     1) (lvls, us =     1211,     1211,     1211,     1211,     1218)
[6.467s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1148 us) (n =     1) (lvls, us =     1133,     1133,     1133,     1133,     1148)
[6.467s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       35 us) (n =     1) (lvls, us =       35,       35,       35,       35,       35)
[6.467s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1113 us) (n =     1) (lvls, us =     1094,     1094,     1094,     1094,     1113)
[6.467s][info][gc,stats    ] Concurrent Evacuation          =    0.009 s (a =     8637 us) (n =     1) (lvls, us =     8633,     8633,     8633,     8633,     8637)
[6.467s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      145 us) (n =     1) (lvls, us =      145,      145,      145,      145,      145)
[6.467s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       41 us) (n =     1) (lvls, us =       41,       41,       41,       41,       41)
[6.467s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.467s][info][gc,stats    ] Concurrent Update Refs         =    0.020 s (a =    19894 us) (n =     1) (lvls, us =    19727,    19727,    19727,    19727,    19894)
[6.468s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      218 us) (n =     1) (lvls, us =      217,      217,      217,      217,      218)
[6.468s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      107 us) (n =     1) (lvls, us =      107,      107,      107,      107,      107)
[6.468s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =       81 us) (n =     1) (lvls, us =       81,       81,       81,       81,       81)
[6.468s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       31 us) (n =     1) (lvls, us =       31,       31,       31,       31,       31)
[6.468s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        3 us) (n =     1) (lvls, us =        3,        3,        3,        3,        3)
[6.468s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[6.468s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       69 us) (n =     1) (lvls, us =       69,       69,       69,       69,       69)
[6.468s][info][gc,stats    ] 
[6.468s][info][gc,stats    ] 
[6.468s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.468s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.468s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.468s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.468s][info][gc,stats    ] 
[6.468s][info][gc,stats    ]     1 successful concurrent GCs
[6.468s][info][gc,stats    ]       0 invoked explicitly
[6.468s][info][gc,stats    ]       0 invoked implicitly
[6.468s][info][gc,stats    ] 
[6.468s][info][gc,stats    ]     0 Degenerated GCs
[6.468s][info][gc,stats    ]       0 caused by allocation failure
[6.468s][info][gc,stats    ]       0 upgraded to Full GC
[6.468s][info][gc,stats    ] 
[6.468s][info][gc,stats    ]     0 Full GCs
[6.468s][info][gc,stats    ]       0 invoked explicitly
[6.468s][info][gc,stats    ]       0 invoked implicitly
[6.468s][info][gc,stats    ]       0 caused by allocation failure
[6.468s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.468s][info][gc,stats    ] 
[6.468s][info][gc,stats    ] 
