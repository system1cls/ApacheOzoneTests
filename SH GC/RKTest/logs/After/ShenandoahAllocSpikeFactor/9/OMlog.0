[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.004s][info][gc] Using Shenandoah
[0.005s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.005s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.005s][info][gc,init] CPUs: 4 total, 4 available
[0.005s][info][gc,init] Memory: 7937M
[0.005s][info][gc,init] Large Page Support: Disabled
[0.005s][info][gc,init] NUMA Support: Disabled
[0.005s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.005s][info][gc,init] Heap Min Capacity: 6656K
[0.005s][info][gc,init] Heap Initial Capacity: 127488K
[0.005s][info][gc,init] Heap Max Capacity: 2032128K
[0.005s][info][gc,init] Pre-touch: Disabled
[0.005s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.005s][info][gc,init] Heuristics: Adaptive
[0.005s][info][gc,init] Heap Region Count: 3969
[0.005s][info][gc,init] Heap Region Size: 512K
[0.005s][info][gc,init] TLAB Size Max: 512K
[0.005s][info][gc,init] Humongous Object Threshold: 512K
[0.005s][info][gc,init] Parallel Workers: 8
[0.005s][info][gc,init] Concurrent Workers: 2
[0.013s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f3297000000-0x00007f3297c97000-0x00007f3297c97000), size 13201408, SharedBaseAddress: 0x00007f3297000000, ArchiveRelocationMode: 1.
[0.013s][info][gc,metaspace] Compressed class space mapped at: 0x00007f3298000000-0x00007f32d8000000, reserved size: 1073741824
[0.013s][info][gc,metaspace] Narrow klass base: 0x00007f3297000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.835s][info][gc          ] Trigger: Metadata GC Threshold
[1.835s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.835s][info][gc,start    ] GC(0) Concurrent reset
[1.835s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.835s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.835s][info][gc          ] GC(0) Concurrent reset 0.319ms
[1.835s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.836s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.836s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.836s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.577ms
[1.836s][info][gc,start    ] GC(0) Concurrent marking roots
[1.836s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.838s][info][gc          ] GC(0) Concurrent marking roots 1.512ms
[1.838s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.838s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.882s][info][gc          ] GC(0) Concurrent marking (unload classes) 44.495ms
[1.882s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.882s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.883s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1846M, Max CSet: 84672K, Min Garbage: 0B
[1.883s][info][gc,ergo     ] GC(0) Collectable Garbage: 73084K (98%), Immediate: 3823K (5%), CSet: 69261K (93%)
[1.883s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 77312K, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.883s][info][gc          ] GC(0) Pause Final Mark (unload classes) 0.496ms
[1.883s][info][gc,start    ] GC(0) Concurrent thread roots
[1.883s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.883s][info][gc          ] GC(0) Concurrent thread roots 0.434ms
[1.883s][info][gc,start    ] GC(0) Concurrent weak references
[1.883s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.884s][info][gc,ref      ] GC(0) Encountered references: Soft: 3953, Weak: 2097, Final: 4, Phantom: 820
[1.884s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1448, Final: 0, Phantom: 429
[1.884s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 498, Final: 0, Phantom: 230
[1.884s][info][gc          ] GC(0) Concurrent weak references 0.426ms
[1.884s][info][gc,start    ] GC(0) Concurrent weak roots
[1.884s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.887s][info][gc          ] GC(0) Concurrent weak roots 3.472ms
[1.887s][info][gc,start    ] GC(0) Concurrent cleanup
[1.887s][info][gc          ] GC(0) Concurrent cleanup 140M->137M(143M) 0.095ms
[1.887s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1742M humongous, Frag: 1% external, 0% internal; Reserve: 101341K, Max: 512K
[1.887s][info][gc,start    ] GC(0) Concurrent class unloading
[1.887s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.894s][info][gc          ] GC(0) Concurrent class unloading 6.853ms
[1.894s][info][gc,start    ] GC(0) Concurrent strong roots
[1.894s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.895s][info][gc          ] GC(0) Concurrent strong roots 1.148ms
[1.895s][info][gc,start    ] GC(0) Concurrent evacuation
[1.895s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.905s][info][gc          ] GC(0) Concurrent evacuation 9.418ms
[1.905s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.905s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 145M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.905s][info][gc          ] GC(0) Pause Init Update Refs 0.052ms
[1.905s][info][gc,start    ] GC(0) Concurrent update references
[1.905s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.928s][info][gc          ] GC(0) Concurrent update references 22.498ms
[1.928s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.928s][info][gc          ] GC(0) Concurrent update thread roots 0.289ms
[1.928s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.928s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.928s][info][gc          ] GC(0) Pause Final Update Refs 0.094ms
[1.928s][info][gc,start    ] GC(0) Concurrent cleanup
[1.928s][info][gc          ] GC(0) Concurrent cleanup 145M->70M(151M) 0.122ms
[1.928s][info][gc,ergo     ] Free: 1812M, Max: 512K regular, 1733M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.928s][info][gc,stats    ] 
[1.928s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.928s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.928s][info][gc,stats    ] 
[1.928s][info][gc,stats    ] Concurrent Reset                    333 us
[1.928s][info][gc,stats    ] Pause Init Mark (G)                 826 us
[1.928s][info][gc,stats    ] Pause Init Mark (N)                 619 us
[1.928s][info][gc,stats    ]   Update Region States               27 us
[1.928s][info][gc,stats    ] Concurrent Mark Roots              1533 us, parallelism: 1.73x
[1.928s][info][gc,stats    ]   CMR: <total>                     2651 us
[1.928s][info][gc,stats    ]   CMR: Thread Roots                1144 us, workers (us): 1055,  89, ---, ---, ---, ---, ---, ---, 
[1.928s][info][gc,stats    ]   CMR: VM Strong Roots              451 us, workers (us): 363,  88, ---, ---, ---, ---, ---, ---, 
[1.928s][info][gc,stats    ]   CMR: CLDG Roots                  1056 us, workers (us): ---, 1056, ---, ---, ---, ---, ---, ---, 
[1.928s][info][gc,stats    ] Concurrent Marking                44526 us
[1.928s][info][gc,stats    ] Pause Final Mark (G)                724 us
[1.929s][info][gc,stats    ] Pause Final Mark (N)                540 us
[1.929s][info][gc,stats    ]   Finish Mark                       122 us
[1.929s][info][gc,stats    ]   Update Region States               43 us
[1.929s][info][gc,stats    ]   Choose Collection Set             157 us
[1.929s][info][gc,stats    ]   Rebuild Free Set                   29 us
[1.929s][info][gc,stats    ] Concurrent Thread Roots             446 us, parallelism: 1.31x
[1.929s][info][gc,stats    ]   CTR: <total>                      583 us
[1.929s][info][gc,stats    ]   CTR: Thread Roots                 583 us, workers (us): 392, 191, ---, ---, ---, ---, ---, ---, 
[1.929s][info][gc,stats    ] Concurrent Weak References          455 us, parallelism: 0.81x
[1.929s][info][gc,stats    ]   CWRF: <total>                     370 us
[1.929s][info][gc,stats    ]   CWRF: Weak References             370 us, workers (us):  36, 334, ---, ---, ---, ---, ---, ---, 
[1.929s][info][gc,stats    ] Concurrent Weak Roots              3494 us
[1.929s][info][gc,stats    ]   Roots                            2583 us, parallelism: 1.91x
[1.929s][info][gc,stats    ]     CWR: <total>                   4934 us
[1.929s][info][gc,stats    ]     CWR: Code Cache Roots           789 us, workers (us): 789,   0, ---, ---, ---, ---, ---, ---, 
[1.929s][info][gc,stats    ]     CWR: VM Weak Roots             4120 us, workers (us): 1690, 2431, ---, ---, ---, ---, ---, ---, 
[1.929s][info][gc,stats    ]     CWR: CLDG Roots                  24 us, workers (us):  24, ---, ---, ---, ---, ---, ---, ---, 
[1.929s][info][gc,stats    ]   Rendezvous                        865 us
[1.929s][info][gc,stats    ] Concurrent Cleanup                  108 us
[1.929s][info][gc,stats    ] Concurrent Class Unloading         6881 us
[1.929s][info][gc,stats    ]   Unlink Stale                     2782 us
[1.929s][info][gc,stats    ]     System Dictionary                72 us
[1.929s][info][gc,stats    ]     Weak Class Links                  0 us
[1.929s][info][gc,stats    ]     Code Roots                     2709 us
[1.929s][info][gc,stats    ]   Rendezvous                         35 us
[1.929s][info][gc,stats    ]   Purge Unlinked                   4008 us
[1.929s][info][gc,stats    ]     Code Roots                     3997 us
[1.929s][info][gc,stats    ]     CLDG                             10 us
[1.929s][info][gc,stats    ]     Exception Caches                  0 us
[1.929s][info][gc,stats    ] Concurrent Strong Roots            1173 us, parallelism: 0.92x
[1.929s][info][gc,stats    ]   CSR: <total>                     1085 us
[1.929s][info][gc,stats    ]   CSR: VM Strong Roots               30 us, workers (us):  25,   5, ---, ---, ---, ---, ---, ---, 
[1.929s][info][gc,stats    ]   CSR: CLDG Roots                  1055 us, workers (us): ---, 1055, ---, ---, ---, ---, ---, ---, 
[1.929s][info][gc,stats    ] Concurrent Evacuation              9448 us
[1.929s][info][gc,stats    ] Pause Init Update Refs (G)          127 us
[1.929s][info][gc,stats    ] Pause Init Update Refs (N)           64 us
[1.929s][info][gc,stats    ]   Manage GCLABs                       5 us
[1.929s][info][gc,stats    ] Concurrent Update Refs            22537 us
[1.929s][info][gc,stats    ] Concurrent Update Thread Roots      309 us
[1.929s][info][gc,stats    ] Pause Final Update Refs (G)         133 us
[1.929s][info][gc,stats    ] Pause Final Update Refs (N)         106 us
[1.929s][info][gc,stats    ]   Update Region States               31 us
[1.929s][info][gc,stats    ]   Trash Collection Set                4 us
[1.929s][info][gc,stats    ]   Rebuild Free Set                   20 us
[1.929s][info][gc,stats    ] Concurrent Cleanup                  153 us
[1.929s][info][gc,stats    ] 
[1.929s][info][gc,stats    ] Allocation pacing accrued:
[1.929s][info][gc,stats    ]       0 of  1924 ms (  0.0%): <total>
[1.929s][info][gc,stats    ]       0 of  1924 ms (  0.0%): <average total>
[1.929s][info][gc,stats    ] 
[1.929s][info][gc,metaspace] Metaspace: 21252K(21568K)->21696K(22080K) NonClass: 18905K(19072K)->19291K(19520K) Class: 2346K(2496K)->2404K(2560K)
[1.929s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.217s][info][gc          ] Cancelling GC: Stopping VM
[6.218s][info][gc,heap,exit] Heap
[6.218s][info][gc,heap,exit] Shenandoah Heap
[6.218s][info][gc,heap,exit]  1984M max, 1984M soft max, 151M committed, 85015K used
[6.218s][info][gc,heap,exit]  3969 x 512K regions
[6.218s][info][gc,heap,exit] Status: cancelled
[6.218s][info][gc,heap,exit] Reserved region:
[6.218s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.218s][info][gc,heap,exit] Collection set:
[6.218s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.218s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.218s][info][gc,heap,exit] 
[6.218s][info][gc,heap,exit]  Metaspace       used 25124K, committed 25408K, reserved 1114112K
[6.218s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.218s][info][gc,stats    ] 
[6.218s][info][gc,stats    ] GC STATISTICS:
[6.218s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.218s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.218s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.218s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.218s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.218s][info][gc,stats    ] 
[6.218s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.218s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.218s][info][gc,stats    ] 
[6.218s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.218s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.218s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.218s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.218s][info][gc,stats    ] 
[6.218s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.218s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.218s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.218s][info][gc,stats    ]   Raise max pacing delay with care.
[6.218s][info][gc,stats    ] 
[6.218s][info][gc,stats    ] Concurrent Reset               =    0.000 s (a =      333 us) (n =     1) (lvls, us =      332,      332,      332,      332,      333)
[6.218s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      826 us) (n =     1) (lvls, us =      826,      826,      826,      826,      826)
[6.218s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      619 us) (n =     1) (lvls, us =      617,      617,      617,      617,      619)
[6.218s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       27 us) (n =     1) (lvls, us =       27,       27,       27,       27,       27)
[6.218s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     1533 us) (n =     1) (lvls, us =     1523,     1523,     1523,     1523,     1533)
[6.218s][info][gc,stats    ]   CMR: <total>                 =    0.003 s (a =     2651 us) (n =     1) (lvls, us =     2637,     2637,     2637,     2637,     2651)
[6.218s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1144 us) (n =     1) (lvls, us =     1133,     1133,     1133,     1133,     1144)
[6.218s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.000 s (a =      451 us) (n =     1) (lvls, us =      451,      451,      451,      451,      451)
[6.218s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1056 us) (n =     1) (lvls, us =     1055,     1055,     1055,     1055,     1056)
[6.218s][info][gc,stats    ] Concurrent Marking             =    0.045 s (a =    44526 us) (n =     1) (lvls, us =    44336,    44336,    44336,    44336,    44526)
[6.219s][info][gc,stats    ] Pause Final Mark (G)           =    0.001 s (a =      724 us) (n =     1) (lvls, us =      723,      723,      723,      723,      724)
[6.219s][info][gc,stats    ] Pause Final Mark (N)           =    0.001 s (a =      540 us) (n =     1) (lvls, us =      539,      539,      539,      539,      540)
[6.219s][info][gc,stats    ]   Finish Mark                  =    0.000 s (a =      122 us) (n =     1) (lvls, us =      121,      121,      121,      121,      122)
[6.219s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       43 us) (n =     1) (lvls, us =       43,       43,       43,       43,       43)
[6.219s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =      157 us) (n =     1) (lvls, us =      156,      156,      156,      156,      157)
[6.219s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       29 us) (n =     1) (lvls, us =       29,       29,       29,       29,       29)
[6.219s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      446 us) (n =     1) (lvls, us =      445,      445,      445,      445,      446)
[6.219s][info][gc,stats    ]   CTR: <total>                 =    0.001 s (a =      583 us) (n =     1) (lvls, us =      582,      582,      582,      582,      583)
[6.219s][info][gc,stats    ]   CTR: Thread Roots            =    0.001 s (a =      583 us) (n =     1) (lvls, us =      582,      582,      582,      582,      583)
[6.219s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      455 us) (n =     1) (lvls, us =      453,      453,      453,      453,      455)
[6.219s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      370 us) (n =     1) (lvls, us =      369,      369,      369,      369,      370)
[6.219s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      370 us) (n =     1) (lvls, us =      369,      369,      369,      369,      370)
[6.219s][info][gc,stats    ] Concurrent Weak Roots          =    0.003 s (a =     3494 us) (n =     1) (lvls, us =     3477,     3477,     3477,     3477,     3494)
[6.219s][info][gc,stats    ]   Roots                        =    0.003 s (a =     2583 us) (n =     1) (lvls, us =     2578,     2578,     2578,     2578,     2583)
[6.219s][info][gc,stats    ]     CWR: <total>               =    0.005 s (a =     4934 us) (n =     1) (lvls, us =     4922,     4922,     4922,     4922,     4934)
[6.219s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      789 us) (n =     1) (lvls, us =      789,      789,      789,      789,      789)
[6.219s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.004 s (a =     4120 us) (n =     1) (lvls, us =     4102,     4102,     4102,     4102,     4120)
[6.219s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       24 us) (n =     1) (lvls, us =       24,       24,       24,       24,       24)
[6.219s][info][gc,stats    ]   Rendezvous                   =    0.001 s (a =      865 us) (n =     1) (lvls, us =      865,      865,      865,      865,      865)
[6.219s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      108 us) (n =     1) (lvls, us =      107,      107,      107,      107,      108)
[6.219s][info][gc,stats    ] Concurrent Class Unloading     =    0.007 s (a =     6881 us) (n =     1) (lvls, us =     6875,     6875,     6875,     6875,     6881)
[6.219s][info][gc,stats    ]   Unlink Stale                 =    0.003 s (a =     2782 us) (n =     1) (lvls, us =     2773,     2773,     2773,     2773,     2782)
[6.219s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       72 us) (n =     1) (lvls, us =       72,       72,       72,       72,       72)
[6.219s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.219s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2709 us) (n =     1) (lvls, us =     2695,     2695,     2695,     2695,     2709)
[6.219s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       35 us) (n =     1) (lvls, us =       35,       35,       35,       35,       35)
[6.219s][info][gc,stats    ]   Purge Unlinked               =    0.004 s (a =     4008 us) (n =     1) (lvls, us =     4004,     4004,     4004,     4004,     4008)
[6.219s][info][gc,stats    ]     Code Roots                 =    0.004 s (a =     3997 us) (n =     1) (lvls, us =     3984,     3984,     3984,     3984,     3997)
[6.219s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       10 us) (n =     1) (lvls, us =       10,       10,       10,       10,       10)
[6.219s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.219s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1173 us) (n =     1) (lvls, us =     1172,     1172,     1172,     1172,     1173)
[6.219s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1085 us) (n =     1) (lvls, us =     1074,     1074,     1074,     1074,     1085)
[6.219s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       30 us) (n =     1) (lvls, us =       30,       30,       30,       30,       30)
[6.219s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1055 us) (n =     1) (lvls, us =     1055,     1055,     1055,     1055,     1055)
[6.219s][info][gc,stats    ] Concurrent Evacuation          =    0.009 s (a =     9448 us) (n =     1) (lvls, us =     9434,     9434,     9434,     9434,     9448)
[6.219s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      127 us) (n =     1) (lvls, us =      127,      127,      127,      127,      127)
[6.219s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       64 us) (n =     1) (lvls, us =       64,       64,       64,       64,       64)
[6.219s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.219s][info][gc,stats    ] Concurrent Update Refs         =    0.023 s (a =    22537 us) (n =     1) (lvls, us =    22461,    22461,    22461,    22461,    22537)
[6.219s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      309 us) (n =     1) (lvls, us =      307,      307,      307,      307,      309)
[6.219s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      133 us) (n =     1) (lvls, us =      133,      133,      133,      133,      133)
[6.219s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      106 us) (n =     1) (lvls, us =      105,      105,      105,      105,      106)
[6.219s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       31 us) (n =     1) (lvls, us =       31,       31,       31,       31,       31)
[6.219s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.219s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[6.219s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      153 us) (n =     1) (lvls, us =      152,      152,      152,      152,      153)
[6.219s][info][gc,stats    ] 
[6.219s][info][gc,stats    ] 
[6.219s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.219s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.219s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.219s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.219s][info][gc,stats    ] 
[6.219s][info][gc,stats    ]     1 successful concurrent GCs
[6.219s][info][gc,stats    ]       0 invoked explicitly
[6.219s][info][gc,stats    ]       0 invoked implicitly
[6.219s][info][gc,stats    ] 
[6.219s][info][gc,stats    ]     0 Degenerated GCs
[6.219s][info][gc,stats    ]       0 caused by allocation failure
[6.219s][info][gc,stats    ]       0 upgraded to Full GC
[6.219s][info][gc,stats    ] 
[6.219s][info][gc,stats    ]     0 Full GCs
[6.219s][info][gc,stats    ]       0 invoked explicitly
[6.219s][info][gc,stats    ]       0 invoked implicitly
[6.219s][info][gc,stats    ]       0 caused by allocation failure
[6.219s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.219s][info][gc,stats    ] 
[6.219s][info][gc,stats    ] 
