[0.006s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.006s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.008s][info][gc] Using Shenandoah
[0.009s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.009s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.009s][info][gc,init] CPUs: 4 total, 4 available
[0.009s][info][gc,init] Memory: 7937M
[0.009s][info][gc,init] Large Page Support: Disabled
[0.009s][info][gc,init] NUMA Support: Disabled
[0.009s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.009s][info][gc,init] Heap Min Capacity: 6656K
[0.009s][info][gc,init] Heap Initial Capacity: 127488K
[0.009s][info][gc,init] Heap Max Capacity: 2032128K
[0.009s][info][gc,init] Pre-touch: Disabled
[0.010s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.010s][info][gc,init] Heuristics: Adaptive
[0.010s][info][gc,init] Heap Region Count: 3969
[0.010s][info][gc,init] Heap Region Size: 512K
[0.010s][info][gc,init] TLAB Size Max: 512K
[0.010s][info][gc,init] Humongous Object Threshold: 512K
[0.010s][info][gc,init] Parallel Workers: 8
[0.010s][info][gc,init] Concurrent Workers: 2
[0.018s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f0c67000000-0x00007f0c67c97000-0x00007f0c67c97000), size 13201408, SharedBaseAddress: 0x00007f0c67000000, ArchiveRelocationMode: 1.
[0.018s][info][gc,metaspace] Compressed class space mapped at: 0x00007f0c68000000-0x00007f0ca8000000, reserved size: 1073741824
[0.018s][info][gc,metaspace] Narrow klass base: 0x00007f0c67000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.767s][info][gc          ] Trigger: Metadata GC Threshold
[1.767s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.767s][info][gc,start    ] GC(0) Concurrent reset
[1.767s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.767s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.768s][info][gc          ] GC(0) Concurrent reset 0.457ms
[1.772s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.773s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.773s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.773s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.672ms
[1.773s][info][gc,start    ] GC(0) Concurrent marking roots
[1.774s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.776s][info][gc          ] GC(0) Concurrent marking roots 2.323ms
[1.776s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.776s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.821s][info][gc          ] GC(0) Concurrent marking (unload classes) 44.942ms
[1.821s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.821s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.821s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1846M, Max CSet: 84672K, Min Garbage: 0B
[1.821s][info][gc,ergo     ] GC(0) Collectable Garbage: 73117K (98%), Immediate: 4335K (5%), CSet: 68782K (92%)
[1.821s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 77312K, Free: 1747M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.821s][info][gc          ] GC(0) Pause Final Mark (unload classes) 0.499ms
[1.821s][info][gc,start    ] GC(0) Concurrent thread roots
[1.821s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.822s][info][gc          ] GC(0) Concurrent thread roots 0.379ms
[1.822s][info][gc,start    ] GC(0) Concurrent weak references
[1.822s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.822s][info][gc,ref      ] GC(0) Encountered references: Soft: 3956, Weak: 2096, Final: 4, Phantom: 822
[1.822s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 803, Final: 0, Phantom: 456
[1.822s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 499, Final: 0, Phantom: 230
[1.822s][info][gc          ] GC(0) Concurrent weak references 0.513ms
[1.823s][info][gc,start    ] GC(0) Concurrent weak roots
[1.823s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.825s][info][gc          ] GC(0) Concurrent weak roots 1.921ms
[1.825s][info][gc,start    ] GC(0) Concurrent cleanup
[1.825s][info][gc          ] GC(0) Concurrent cleanup 141M->137M(144M) 0.091ms
[1.825s][info][gc,ergo     ] GC(0) Free: 1746M, Max: 512K regular, 1741M humongous, Frag: 1% external, 0% internal; Reserve: 101247K, Max: 512K
[1.825s][info][gc,start    ] GC(0) Concurrent class unloading
[1.825s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.835s][info][gc          ] GC(0) Concurrent class unloading 10.002ms
[1.835s][info][gc,start    ] GC(0) Concurrent strong roots
[1.835s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.837s][info][gc          ] GC(0) Concurrent strong roots 1.862ms
[1.837s][info][gc,start    ] GC(0) Concurrent evacuation
[1.837s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.846s][info][gc          ] GC(0) Concurrent evacuation 9.071ms
[1.846s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.846s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 145M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.846s][info][gc          ] GC(0) Pause Init Update Refs 0.045ms
[1.846s][info][gc,start    ] GC(0) Concurrent update references
[1.846s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.864s][info][gc          ] GC(0) Concurrent update references 17.673ms
[1.864s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.866s][info][gc          ] GC(0) Concurrent update thread roots 2.199ms
[1.866s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.866s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.866s][info][gc          ] GC(0) Pause Final Update Refs 0.205ms
[1.866s][info][gc,start    ] GC(0) Concurrent cleanup
[1.866s][info][gc          ] GC(0) Concurrent cleanup 145M->70M(152M) 0.094ms
[1.867s][info][gc,ergo     ] Free: 1812M, Max: 512K regular, 1732M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.867s][info][gc,stats    ] 
[1.867s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.867s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.867s][info][gc,stats    ] 
[1.867s][info][gc,stats    ] Concurrent Reset                    512 us
[1.867s][info][gc,stats    ] Pause Init Mark (G)                5564 us
[1.867s][info][gc,stats    ] Pause Init Mark (N)                 720 us
[1.867s][info][gc,stats    ]   Update Region States               37 us
[1.867s][info][gc,stats    ] Concurrent Mark Roots              2400 us, parallelism: 0.76x
[1.867s][info][gc,stats    ]   CMR: <total>                     1829 us
[1.867s][info][gc,stats    ]   CMR: Thread Roots                 620 us, workers (us): 620,   0, ---, ---, ---, ---, ---, ---, 
[1.867s][info][gc,stats    ]   CMR: VM Strong Roots              312 us, workers (us): 312,   0, ---, ---, ---, ---, ---, ---, 
[1.867s][info][gc,stats    ]   CMR: CLDG Roots                   896 us, workers (us): 896, ---, ---, ---, ---, ---, ---, ---, 
[1.867s][info][gc,stats    ] Concurrent Marking                45014 us
[1.867s][info][gc,stats    ] Pause Final Mark (G)                680 us
[1.867s][info][gc,stats    ] Pause Final Mark (N)                559 us
[1.867s][info][gc,stats    ]   Finish Mark                       121 us
[1.867s][info][gc,stats    ]   Update Region States               40 us
[1.867s][info][gc,stats    ]   Choose Collection Set             159 us
[1.867s][info][gc,stats    ]   Rebuild Free Set                   38 us
[1.867s][info][gc,stats    ] Concurrent Thread Roots             432 us, parallelism: 1.00x
[1.867s][info][gc,stats    ]   CTR: <total>                      433 us
[1.867s][info][gc,stats    ]   CTR: Thread Roots                 433 us, workers (us): 333, 100, ---, ---, ---, ---, ---, ---, 
[1.868s][info][gc,stats    ] Concurrent Weak References          791 us, parallelism: 0.35x
[1.868s][info][gc,stats    ]   CWRF: <total>                     273 us
[1.868s][info][gc,stats    ]   CWRF: Weak References             273 us, workers (us): 273,   0, ---, ---, ---, ---, ---, ---, 
[1.868s][info][gc,stats    ] Concurrent Weak Roots              1948 us
[1.868s][info][gc,stats    ]   Roots                            1843 us, parallelism: 1.88x
[1.868s][info][gc,stats    ]     CWR: <total>                   3457 us
[1.868s][info][gc,stats    ]     CWR: Code Cache Roots          1163 us, workers (us): 574, 589, ---, ---, ---, ---, ---, ---, 
[1.868s][info][gc,stats    ]     CWR: VM Weak Roots             2276 us, workers (us): 1187, 1089, ---, ---, ---, ---, ---, ---, 
[1.868s][info][gc,stats    ]     CWR: CLDG Roots                  18 us, workers (us):  18, ---, ---, ---, ---, ---, ---, ---, 
[1.868s][info][gc,stats    ]   Rendezvous                         22 us
[1.868s][info][gc,stats    ] Concurrent Cleanup                  101 us
[1.868s][info][gc,stats    ] Concurrent Class Unloading        10050 us
[1.868s][info][gc,stats    ]   Unlink Stale                     1450 us
[1.868s][info][gc,stats    ]     System Dictionary                82 us
[1.868s][info][gc,stats    ]     Weak Class Links                  0 us
[1.868s][info][gc,stats    ]     Code Roots                     1367 us
[1.868s][info][gc,stats    ]   Rendezvous                         18 us
[1.868s][info][gc,stats    ]   Purge Unlinked                   8514 us
[1.868s][info][gc,stats    ]     Code Roots                     8476 us
[1.868s][info][gc,stats    ]     CLDG                             38 us
[1.868s][info][gc,stats    ]     Exception Caches                  0 us
[1.868s][info][gc,stats    ] Concurrent Strong Roots            1925 us, parallelism: 0.71x
[1.868s][info][gc,stats    ]   CSR: <total>                     1366 us
[1.868s][info][gc,stats    ]   CSR: VM Strong Roots               16 us, workers (us):  16,   0, ---, ---, ---, ---, ---, ---, 
[1.868s][info][gc,stats    ]   CSR: CLDG Roots                  1351 us, workers (us): 1351, ---, ---, ---, ---, ---, ---, ---, 
[1.868s][info][gc,stats    ] Concurrent Evacuation              9102 us
[1.868s][info][gc,stats    ] Pause Init Update Refs (G)          182 us
[1.868s][info][gc,stats    ] Pause Init Update Refs (N)           55 us
[1.868s][info][gc,stats    ]   Manage GCLABs                       5 us
[1.868s][info][gc,stats    ] Concurrent Update Refs            17747 us
[1.868s][info][gc,stats    ] Concurrent Update Thread Roots     2272 us
[1.868s][info][gc,stats    ] Pause Final Update Refs (G)         368 us
[1.868s][info][gc,stats    ] Pause Final Update Refs (N)         263 us
[1.868s][info][gc,stats    ]   Update Region States               28 us
[1.868s][info][gc,stats    ]   Trash Collection Set                4 us
[1.868s][info][gc,stats    ]   Rebuild Free Set                   22 us
[1.868s][info][gc,stats    ] Concurrent Cleanup                  169 us
[1.868s][info][gc,stats    ] 
[1.868s][info][gc,stats    ] Allocation pacing accrued:
[1.869s][info][gc,stats    ]       0 of  1859 ms (  0.0%): <total>
[1.869s][info][gc,stats    ]       0 of  1859 ms (  0.0%): <average total>
[1.869s][info][gc,stats    ] 
[1.869s][info][gc,metaspace] Metaspace: 21226K(21632K)->21650K(22016K) NonClass: 18874K(19072K)->19245K(19456K) Class: 2352K(2560K)->2404K(2560K)
[1.869s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.234s][info][gc          ] Cancelling GC: Stopping VM
[6.234s][info][gc,heap,exit] Heap
[6.234s][info][gc,heap,exit] Shenandoah Heap
[6.234s][info][gc,heap,exit]  1984M max, 1984M soft max, 152M committed, 85387K used
[6.234s][info][gc,heap,exit]  3969 x 512K regions
[6.234s][info][gc,heap,exit] Status: cancelled
[6.234s][info][gc,heap,exit] Reserved region:
[6.234s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.234s][info][gc,heap,exit] Collection set:
[6.234s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.234s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.234s][info][gc,heap,exit] 
[6.234s][info][gc,heap,exit]  Metaspace       used 25053K, committed 25344K, reserved 1114112K
[6.234s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.234s][info][gc,stats    ] 
[6.235s][info][gc,stats    ] GC STATISTICS:
[6.235s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.235s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.235s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.235s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.235s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.235s][info][gc,stats    ] 
[6.235s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.235s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.235s][info][gc,stats    ] 
[6.235s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.235s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.235s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.235s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.235s][info][gc,stats    ] 
[6.235s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.235s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.235s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.235s][info][gc,stats    ]   Raise max pacing delay with care.
[6.235s][info][gc,stats    ] 
[6.235s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      512 us) (n =     1) (lvls, us =      512,      512,      512,      512,      512)
[6.235s][info][gc,stats    ] Pause Init Mark (G)            =    0.006 s (a =     5564 us) (n =     1) (lvls, us =     5547,     5547,     5547,     5547,     5564)
[6.235s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      720 us) (n =     1) (lvls, us =      719,      719,      719,      719,      720)
[6.235s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       37 us) (n =     1) (lvls, us =       37,       37,       37,       37,       37)
[6.235s][info][gc,stats    ] Concurrent Mark Roots          =    0.002 s (a =     2400 us) (n =     1) (lvls, us =     2383,     2383,     2383,     2383,     2400)
[6.235s][info][gc,stats    ]   CMR: <total>                 =    0.002 s (a =     1829 us) (n =     1) (lvls, us =     1816,     1816,     1816,     1816,     1829)
[6.235s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =      620 us) (n =     1) (lvls, us =      619,      619,      619,      619,      620)
[6.235s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.000 s (a =      312 us) (n =     1) (lvls, us =      311,      311,      311,      311,      312)
[6.235s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =      896 us) (n =     1) (lvls, us =      895,      895,      895,      895,      896)
[6.236s][info][gc,stats    ] Concurrent Marking             =    0.045 s (a =    45014 us) (n =     1) (lvls, us =    44922,    44922,    44922,    44922,    45014)
[6.236s][info][gc,stats    ] Pause Final Mark (G)           =    0.001 s (a =      680 us) (n =     1) (lvls, us =      680,      680,      680,      680,      680)
[6.236s][info][gc,stats    ] Pause Final Mark (N)           =    0.001 s (a =      559 us) (n =     1) (lvls, us =      559,      559,      559,      559,      559)
[6.236s][info][gc,stats    ]   Finish Mark                  =    0.000 s (a =      121 us) (n =     1) (lvls, us =      119,      119,      119,      119,      121)
[6.236s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       40 us) (n =     1) (lvls, us =       40,       40,       40,       40,       40)
[6.236s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =      159 us) (n =     1) (lvls, us =      158,      158,      158,      158,      159)
[6.236s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       38 us) (n =     1) (lvls, us =       38,       38,       38,       38,       38)
[6.236s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      432 us) (n =     1) (lvls, us =      432,      432,      432,      432,      432)
[6.236s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      433 us) (n =     1) (lvls, us =      432,      432,      432,      432,      433)
[6.236s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      433 us) (n =     1) (lvls, us =      432,      432,      432,      432,      433)
[6.236s][info][gc,stats    ] Concurrent Weak References     =    0.001 s (a =      791 us) (n =     1) (lvls, us =      791,      791,      791,      791,      791)
[6.236s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      273 us) (n =     1) (lvls, us =      271,      271,      271,      271,      273)
[6.236s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      273 us) (n =     1) (lvls, us =      271,      271,      271,      271,      273)
[6.236s][info][gc,stats    ] Concurrent Weak Roots          =    0.002 s (a =     1948 us) (n =     1) (lvls, us =     1934,     1934,     1934,     1934,     1948)
[6.236s][info][gc,stats    ]   Roots                        =    0.002 s (a =     1843 us) (n =     1) (lvls, us =     1836,     1836,     1836,     1836,     1843)
[6.236s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     3457 us) (n =     1) (lvls, us =     3438,     3438,     3438,     3438,     3457)
[6.236s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =     1163 us) (n =     1) (lvls, us =     1152,     1152,     1152,     1152,     1163)
[6.236s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     2276 us) (n =     1) (lvls, us =     2266,     2266,     2266,     2266,     2276)
[6.236s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[6.236s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       22 us) (n =     1) (lvls, us =       22,       22,       22,       22,       22)
[6.236s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      101 us) (n =     1) (lvls, us =      100,      100,      100,      100,      101)
[6.236s][info][gc,stats    ] Concurrent Class Unloading     =    0.010 s (a =    10050 us) (n =     1) (lvls, us =     9961,     9961,     9961,     9961,    10050)
[6.236s][info][gc,stats    ]   Unlink Stale                 =    0.001 s (a =     1450 us) (n =     1) (lvls, us =     1445,     1445,     1445,     1445,     1450)
[6.236s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       82 us) (n =     1) (lvls, us =       82,       82,       82,       82,       82)
[6.236s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.237s][info][gc,stats    ]     Code Roots                 =    0.001 s (a =     1367 us) (n =     1) (lvls, us =     1348,     1348,     1348,     1348,     1367)
[6.237s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       18 us) (n =     1) (lvls, us =       17,       17,       17,       17,       18)
[6.237s][info][gc,stats    ]   Purge Unlinked               =    0.009 s (a =     8514 us) (n =     1) (lvls, us =     8496,     8496,     8496,     8496,     8514)
[6.237s][info][gc,stats    ]     Code Roots                 =    0.008 s (a =     8476 us) (n =     1) (lvls, us =     8457,     8457,     8457,     8457,     8476)
[6.237s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       38 us) (n =     1) (lvls, us =       38,       38,       38,       38,       38)
[6.237s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.237s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     1925 us) (n =     1) (lvls, us =     1914,     1914,     1914,     1914,     1925)
[6.237s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1366 us) (n =     1) (lvls, us =     1348,     1348,     1348,     1348,     1366)
[6.237s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[6.237s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1351 us) (n =     1) (lvls, us =     1348,     1348,     1348,     1348,     1351)
[6.237s][info][gc,stats    ] Concurrent Evacuation          =    0.009 s (a =     9102 us) (n =     1) (lvls, us =     9102,     9102,     9102,     9102,     9102)
[6.237s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      182 us) (n =     1) (lvls, us =      182,      182,      182,      182,      182)
[6.237s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       55 us) (n =     1) (lvls, us =       54,       54,       54,       54,       55)
[6.237s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.237s][info][gc,stats    ] Concurrent Update Refs         =    0.018 s (a =    17747 us) (n =     1) (lvls, us =    17578,    17578,    17578,    17578,    17747)
[6.237s][info][gc,stats    ] Concurrent Update Thread Roots =    0.002 s (a =     2272 us) (n =     1) (lvls, us =     2266,     2266,     2266,     2266,     2272)
[6.237s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      368 us) (n =     1) (lvls, us =      367,      367,      367,      367,      368)
[6.237s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      263 us) (n =     1) (lvls, us =      262,      262,      262,      262,      263)
[6.237s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       28 us) (n =     1) (lvls, us =       28,       28,       28,       28,       28)
[6.237s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.237s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       22 us) (n =     1) (lvls, us =       21,       21,       21,       21,       22)
[6.237s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      169 us) (n =     1) (lvls, us =      168,      168,      168,      168,      169)
[6.237s][info][gc,stats    ] 
[6.237s][info][gc,stats    ] 
[6.237s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.237s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.238s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.238s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.238s][info][gc,stats    ] 
[6.238s][info][gc,stats    ]     1 successful concurrent GCs
[6.238s][info][gc,stats    ]       0 invoked explicitly
[6.238s][info][gc,stats    ]       0 invoked implicitly
[6.238s][info][gc,stats    ] 
[6.238s][info][gc,stats    ]     0 Degenerated GCs
[6.238s][info][gc,stats    ]       0 caused by allocation failure
[6.238s][info][gc,stats    ]       0 upgraded to Full GC
[6.238s][info][gc,stats    ] 
[6.238s][info][gc,stats    ]     0 Full GCs
[6.238s][info][gc,stats    ]       0 invoked explicitly
[6.238s][info][gc,stats    ]       0 invoked implicitly
[6.238s][info][gc,stats    ]       0 caused by allocation failure
[6.238s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.238s][info][gc,stats    ] 
[6.238s][info][gc,stats    ] 
