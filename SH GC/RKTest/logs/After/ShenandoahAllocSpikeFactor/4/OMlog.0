[0.004s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.005s][info][gc] Using Shenandoah
[0.006s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.006s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.006s][info][gc,init] CPUs: 4 total, 4 available
[0.006s][info][gc,init] Memory: 7937M
[0.006s][info][gc,init] Large Page Support: Disabled
[0.006s][info][gc,init] NUMA Support: Disabled
[0.006s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.006s][info][gc,init] Heap Min Capacity: 6656K
[0.006s][info][gc,init] Heap Initial Capacity: 127488K
[0.006s][info][gc,init] Heap Max Capacity: 2032128K
[0.006s][info][gc,init] Pre-touch: Disabled
[0.006s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.006s][info][gc,init] Heuristics: Adaptive
[0.006s][info][gc,init] Heap Region Count: 3969
[0.006s][info][gc,init] Heap Region Size: 512K
[0.006s][info][gc,init] TLAB Size Max: 512K
[0.006s][info][gc,init] Humongous Object Threshold: 512K
[0.006s][info][gc,init] Parallel Workers: 8
[0.006s][info][gc,init] Concurrent Workers: 2
[0.019s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f91cb000000-0x00007f91cbc97000-0x00007f91cbc97000), size 13201408, SharedBaseAddress: 0x00007f91cb000000, ArchiveRelocationMode: 1.
[0.019s][info][gc,metaspace] Compressed class space mapped at: 0x00007f91cc000000-0x00007f920c000000, reserved size: 1073741824
[0.019s][info][gc,metaspace] Narrow klass base: 0x00007f91cb000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.790s][info][gc          ] Trigger: Metadata GC Threshold
[1.790s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.790s][info][gc,start    ] GC(0) Concurrent reset
[1.796s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.796s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.796s][info][gc          ] GC(0) Concurrent reset 6.626ms
[1.797s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.797s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.797s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.797s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.549ms
[1.800s][info][gc,start    ] GC(0) Concurrent marking roots
[1.800s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.802s][info][gc          ] GC(0) Concurrent marking roots 2.551ms
[1.802s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.802s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.850s][info][gc          ] GC(0) Concurrent marking (unload classes) 47.685ms
[1.850s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.850s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.852s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1847M, Max CSet: 84672K, Min Garbage: 0B
[1.852s][info][gc,ergo     ] GC(0) Collectable Garbage: 73067K (98%), Immediate: 4847K (6%), CSet: 68220K (92%)
[1.852s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 76800K, Free: 1748M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.852s][info][gc          ] GC(0) Pause Final Mark (unload classes) 1.649ms
[1.852s][info][gc,start    ] GC(0) Concurrent thread roots
[1.852s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.852s][info][gc          ] GC(0) Concurrent thread roots 0.682ms
[1.852s][info][gc,start    ] GC(0) Concurrent weak references
[1.852s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.853s][info][gc,ref      ] GC(0) Encountered references: Soft: 3960, Weak: 2102, Final: 4, Phantom: 821
[1.853s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 824, Final: 0, Phantom: 476
[1.853s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 502, Final: 0, Phantom: 231
[1.853s][info][gc          ] GC(0) Concurrent weak references 0.388ms
[1.853s][info][gc,start    ] GC(0) Concurrent weak roots
[1.853s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.856s][info][gc          ] GC(0) Concurrent weak roots 2.818ms
[1.856s][info][gc,start    ] GC(0) Concurrent cleanup
[1.856s][info][gc          ] GC(0) Concurrent cleanup 140M->135M(143M) 0.098ms
[1.856s][info][gc,ergo     ] GC(0) Free: 1747M, Max: 512K regular, 1742M humongous, Frag: 1% external, 0% internal; Reserve: 101341K, Max: 512K
[1.856s][info][gc,start    ] GC(0) Concurrent class unloading
[1.856s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.864s][info][gc          ] GC(0) Concurrent class unloading 8.249ms
[1.864s][info][gc,start    ] GC(0) Concurrent strong roots
[1.864s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.866s][info][gc          ] GC(0) Concurrent strong roots 1.669ms
[1.866s][info][gc,start    ] GC(0) Concurrent evacuation
[1.866s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.879s][info][gc          ] GC(0) Concurrent evacuation 13.089ms
[1.879s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.879s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 145M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.879s][info][gc          ] GC(0) Pause Init Update Refs 0.043ms
[1.879s][info][gc,start    ] GC(0) Concurrent update references
[1.879s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.903s][info][gc          ] GC(0) Concurrent update references 24.304ms
[1.903s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.904s][info][gc          ] GC(0) Concurrent update thread roots 0.347ms
[1.904s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.904s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.904s][info][gc          ] GC(0) Pause Final Update Refs 0.096ms
[1.904s][info][gc,start    ] GC(0) Concurrent cleanup
[1.904s][info][gc          ] GC(0) Concurrent cleanup 145M->70M(152M) 0.092ms
[1.904s][info][gc,ergo     ] Free: 1811M, Max: 512K regular, 1733M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.904s][info][gc,stats    ] 
[1.904s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.904s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.904s][info][gc,stats    ] 
[1.904s][info][gc,stats    ] Concurrent Reset                   6649 us
[1.904s][info][gc,stats    ] Pause Init Mark (G)                3260 us
[1.904s][info][gc,stats    ] Pause Init Mark (N)                 562 us
[1.904s][info][gc,stats    ]   Update Region States               28 us
[1.904s][info][gc,stats    ] Concurrent Mark Roots              2574 us, parallelism: 1.54x
[1.904s][info][gc,stats    ]   CMR: <total>                     3977 us
[1.904s][info][gc,stats    ]   CMR: Thread Roots                 672 us, workers (us): 672,   0, ---, ---, ---, ---, ---, ---, 
[1.904s][info][gc,stats    ]   CMR: VM Strong Roots             2025 us, workers (us): 476, 1548, ---, ---, ---, ---, ---, ---, 
[1.904s][info][gc,stats    ]   CMR: CLDG Roots                  1281 us, workers (us): 1281, ---, ---, ---, ---, ---, ---, ---, 
[1.904s][info][gc,stats    ] Concurrent Marking                47716 us
[1.904s][info][gc,stats    ] Pause Final Mark (G)               1774 us
[1.904s][info][gc,stats    ] Pause Final Mark (N)               1659 us
[1.904s][info][gc,stats    ]   Finish Mark                      1409 us
[1.904s][info][gc,stats    ]   Update Region States               43 us
[1.904s][info][gc,stats    ]   Choose Collection Set             114 us
[1.904s][info][gc,stats    ]   Rebuild Free Set                   25 us
[1.904s][info][gc,stats    ] Concurrent Thread Roots             709 us, parallelism: 0.75x
[1.904s][info][gc,stats    ]   CTR: <total>                      531 us
[1.904s][info][gc,stats    ]   CTR: Thread Roots                 531 us, workers (us): 531,   0, ---, ---, ---, ---, ---, ---, 
[1.904s][info][gc,stats    ] Concurrent Weak References          403 us, parallelism: 0.76x
[1.904s][info][gc,stats    ]   CWRF: <total>                     307 us
[1.904s][info][gc,stats    ]   CWRF: Weak References             307 us, workers (us): 307,   0, ---, ---, ---, ---, ---, ---, 
[1.904s][info][gc,stats    ] Concurrent Weak Roots              2843 us
[1.904s][info][gc,stats    ]   Roots                            2779 us, parallelism: 1.88x
[1.904s][info][gc,stats    ]     CWR: <total>                   5230 us
[1.904s][info][gc,stats    ]     CWR: Code Cache Roots          2283 us, workers (us): 1098, 1185, ---, ---, ---, ---, ---, ---, 
[1.904s][info][gc,stats    ]     CWR: VM Weak Roots             2927 us, workers (us): 1527, 1401, ---, ---, ---, ---, ---, ---, 
[1.904s][info][gc,stats    ]     CWR: CLDG Roots                  20 us, workers (us):  20, ---, ---, ---, ---, ---, ---, ---, 
[1.904s][info][gc,stats    ]   Rendezvous                         26 us
[1.904s][info][gc,stats    ] Concurrent Cleanup                  107 us
[1.904s][info][gc,stats    ] Concurrent Class Unloading         8270 us
[1.904s][info][gc,stats    ]   Unlink Stale                     2615 us
[1.904s][info][gc,stats    ]     System Dictionary                38 us
[1.904s][info][gc,stats    ]     Weak Class Links                  0 us
[1.904s][info][gc,stats    ]     Code Roots                     2576 us
[1.904s][info][gc,stats    ]   Rendezvous                       1058 us
[1.904s][info][gc,stats    ]   Purge Unlinked                   4527 us
[1.904s][info][gc,stats    ]     Code Roots                     4515 us
[1.904s][info][gc,stats    ]     CLDG                             12 us
[1.904s][info][gc,stats    ]     Exception Caches                  0 us
[1.904s][info][gc,stats    ] Concurrent Strong Roots            1693 us, parallelism: 0.93x
[1.904s][info][gc,stats    ]   CSR: <total>                     1575 us
[1.904s][info][gc,stats    ]   CSR: VM Strong Roots               23 us, workers (us):  23,   0, ---, ---, ---, ---, ---, ---, 
[1.904s][info][gc,stats    ]   CSR: CLDG Roots                  1552 us, workers (us): 1552, ---, ---, ---, ---, ---, ---, ---, 
[1.904s][info][gc,stats    ] Concurrent Evacuation             13119 us
[1.904s][info][gc,stats    ] Pause Init Update Refs (G)           87 us
[1.904s][info][gc,stats    ] Pause Init Update Refs (N)           53 us
[1.904s][info][gc,stats    ]   Manage GCLABs                       4 us
[1.904s][info][gc,stats    ] Concurrent Update Refs            24339 us
[1.904s][info][gc,stats    ] Concurrent Update Thread Roots      367 us
[1.904s][info][gc,stats    ] Pause Final Update Refs (G)         144 us
[1.904s][info][gc,stats    ] Pause Final Update Refs (N)         107 us
[1.904s][info][gc,stats    ]   Update Region States               39 us
[1.904s][info][gc,stats    ]   Trash Collection Set                3 us
[1.904s][info][gc,stats    ]   Rebuild Free Set                   16 us
[1.905s][info][gc,stats    ] Concurrent Cleanup                  112 us
[1.905s][info][gc,stats    ] 
[1.905s][info][gc,stats    ] Allocation pacing accrued:
[1.905s][info][gc,stats    ]       0 of  1899 ms (  0.0%): <total>
[1.905s][info][gc,stats    ]       0 of  1899 ms (  0.0%): <average total>
[1.905s][info][gc,stats    ] 
[1.905s][info][gc,metaspace] Metaspace: 21235K(21632K)->21669K(22016K) NonClass: 18883K(19072K)->19260K(19456K) Class: 2352K(2560K)->2408K(2560K)
[1.905s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.218s][info][gc          ] Cancelling GC: Stopping VM
[6.219s][info][gc,heap,exit] Heap
[6.219s][info][gc,heap,exit] Shenandoah Heap
[6.219s][info][gc,heap,exit]  1984M max, 1984M soft max, 152M committed, 85457K used
[6.219s][info][gc,heap,exit]  3969 x 512K regions
[6.219s][info][gc,heap,exit] Status: cancelled
[6.219s][info][gc,heap,exit] Reserved region:
[6.219s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.219s][info][gc,heap,exit] Collection set:
[6.219s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.219s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.219s][info][gc,heap,exit] 
[6.219s][info][gc,heap,exit]  Metaspace       used 25078K, committed 25408K, reserved 1114112K
[6.219s][info][gc,heap,exit]   class space    used 2776K, committed 2880K, reserved 1048576K
[6.219s][info][gc,stats    ] 
[6.219s][info][gc,stats    ] GC STATISTICS:
[6.219s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.219s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.219s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.219s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.219s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.219s][info][gc,stats    ] 
[6.219s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.219s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.219s][info][gc,stats    ] 
[6.219s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.219s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.219s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.219s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.219s][info][gc,stats    ] 
[6.219s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.219s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.219s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.219s][info][gc,stats    ]   Raise max pacing delay with care.
[6.219s][info][gc,stats    ] 
[6.219s][info][gc,stats    ] Concurrent Reset               =    0.007 s (a =     6649 us) (n =     1) (lvls, us =     6641,     6641,     6641,     6641,     6649)
[6.219s][info][gc,stats    ] Pause Init Mark (G)            =    0.003 s (a =     3260 us) (n =     1) (lvls, us =     3242,     3242,     3242,     3242,     3260)
[6.219s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      562 us) (n =     1) (lvls, us =      561,      561,      561,      561,      562)
[6.219s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       28 us) (n =     1) (lvls, us =       28,       28,       28,       28,       28)
[6.219s][info][gc,stats    ] Concurrent Mark Roots          =    0.003 s (a =     2574 us) (n =     1) (lvls, us =     2559,     2559,     2559,     2559,     2574)
[6.219s][info][gc,stats    ]   CMR: <total>                 =    0.004 s (a =     3977 us) (n =     1) (lvls, us =     3965,     3965,     3965,     3965,     3977)
[6.219s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =      672 us) (n =     1) (lvls, us =      670,      670,      670,      670,      672)
[6.219s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.002 s (a =     2025 us) (n =     1) (lvls, us =     2012,     2012,     2012,     2012,     2025)
[6.219s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1281 us) (n =     1) (lvls, us =     1270,     1270,     1270,     1270,     1281)
[6.219s][info][gc,stats    ] Concurrent Marking             =    0.048 s (a =    47716 us) (n =     1) (lvls, us =    47656,    47656,    47656,    47656,    47716)
[6.219s][info][gc,stats    ] Pause Final Mark (G)           =    0.002 s (a =     1774 us) (n =     1) (lvls, us =     1758,     1758,     1758,     1758,     1774)
[6.219s][info][gc,stats    ] Pause Final Mark (N)           =    0.002 s (a =     1659 us) (n =     1) (lvls, us =     1641,     1641,     1641,     1641,     1659)
[6.219s][info][gc,stats    ]   Finish Mark                  =    0.001 s (a =     1409 us) (n =     1) (lvls, us =     1406,     1406,     1406,     1406,     1409)
[6.219s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       43 us) (n =     1) (lvls, us =       43,       43,       43,       43,       43)
[6.219s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =      114 us) (n =     1) (lvls, us =      113,      113,      113,      113,      114)
[6.219s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       25 us) (n =     1) (lvls, us =       25,       25,       25,       25,       25)
[6.219s][info][gc,stats    ] Concurrent Thread Roots        =    0.001 s (a =      709 us) (n =     1) (lvls, us =      709,      709,      709,      709,      709)
[6.219s][info][gc,stats    ]   CTR: <total>                 =    0.001 s (a =      531 us) (n =     1) (lvls, us =      531,      531,      531,      531,      531)
[6.219s][info][gc,stats    ]   CTR: Thread Roots            =    0.001 s (a =      531 us) (n =     1) (lvls, us =      531,      531,      531,      531,      531)
[6.219s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      403 us) (n =     1) (lvls, us =      402,      402,      402,      402,      403)
[6.219s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      307 us) (n =     1) (lvls, us =      307,      307,      307,      307,      307)
[6.219s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      307 us) (n =     1) (lvls, us =      307,      307,      307,      307,      307)
[6.219s][info][gc,stats    ] Concurrent Weak Roots          =    0.003 s (a =     2843 us) (n =     1) (lvls, us =     2832,     2832,     2832,     2832,     2843)
[6.219s][info][gc,stats    ]   Roots                        =    0.003 s (a =     2779 us) (n =     1) (lvls, us =     2773,     2773,     2773,     2773,     2779)
[6.219s][info][gc,stats    ]     CWR: <total>               =    0.005 s (a =     5230 us) (n =     1) (lvls, us =     5215,     5215,     5215,     5215,     5230)
[6.219s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.002 s (a =     2283 us) (n =     1) (lvls, us =     2266,     2266,     2266,     2266,     2283)
[6.219s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.003 s (a =     2927 us) (n =     1) (lvls, us =     2910,     2910,     2910,     2910,     2927)
[6.219s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[6.219s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       26 us) (n =     1) (lvls, us =       26,       26,       26,       26,       26)
[6.219s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      107 us) (n =     1) (lvls, us =      105,      105,      105,      105,      107)
[6.219s][info][gc,stats    ] Concurrent Class Unloading     =    0.008 s (a =     8270 us) (n =     1) (lvls, us =     8262,     8262,     8262,     8262,     8270)
[6.219s][info][gc,stats    ]   Unlink Stale                 =    0.003 s (a =     2615 us) (n =     1) (lvls, us =     2598,     2598,     2598,     2598,     2615)
[6.219s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       38 us) (n =     1) (lvls, us =       38,       38,       38,       38,       38)
[6.219s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.219s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2576 us) (n =     1) (lvls, us =     2559,     2559,     2559,     2559,     2576)
[6.219s][info][gc,stats    ]   Rendezvous                   =    0.001 s (a =     1058 us) (n =     1) (lvls, us =     1055,     1055,     1055,     1055,     1058)
[6.219s][info][gc,stats    ]   Purge Unlinked               =    0.005 s (a =     4527 us) (n =     1) (lvls, us =     4512,     4512,     4512,     4512,     4527)
[6.219s][info][gc,stats    ]     Code Roots                 =    0.005 s (a =     4515 us) (n =     1) (lvls, us =     4512,     4512,     4512,     4512,     4515)
[6.219s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       12 us) (n =     1) (lvls, us =       12,       12,       12,       12,       12)
[6.219s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.219s][info][gc,stats    ] Concurrent Strong Roots        =    0.002 s (a =     1693 us) (n =     1) (lvls, us =     1680,     1680,     1680,     1680,     1693)
[6.219s][info][gc,stats    ]   CSR: <total>                 =    0.002 s (a =     1575 us) (n =     1) (lvls, us =     1562,     1562,     1562,     1562,     1575)
[6.219s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       23 us) (n =     1) (lvls, us =       23,       23,       23,       23,       23)
[6.219s][info][gc,stats    ]   CSR: CLDG Roots              =    0.002 s (a =     1552 us) (n =     1) (lvls, us =     1543,     1543,     1543,     1543,     1552)
[6.219s][info][gc,stats    ] Concurrent Evacuation          =    0.013 s (a =    13119 us) (n =     1) (lvls, us =    13086,    13086,    13086,    13086,    13119)
[6.219s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =       87 us) (n =     1) (lvls, us =       87,       87,       87,       87,       87)
[6.219s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       53 us) (n =     1) (lvls, us =       53,       53,       53,       53,       53)
[6.219s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[6.219s][info][gc,stats    ] Concurrent Update Refs         =    0.024 s (a =    24339 us) (n =     1) (lvls, us =    24219,    24219,    24219,    24219,    24339)
[6.219s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      367 us) (n =     1) (lvls, us =      365,      365,      365,      365,      367)
[6.220s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      144 us) (n =     1) (lvls, us =      143,      143,      143,      143,      144)
[6.220s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      107 us) (n =     1) (lvls, us =      105,      105,      105,      105,      107)
[6.220s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       39 us) (n =     1) (lvls, us =       39,       39,       39,       39,       39)
[6.220s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        3 us) (n =     1) (lvls, us =        3,        3,        3,        3,        3)
[6.220s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[6.220s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      112 us) (n =     1) (lvls, us =      111,      111,      111,      111,      112)
[6.220s][info][gc,stats    ] 
[6.220s][info][gc,stats    ] 
[6.220s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.220s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.220s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.220s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.220s][info][gc,stats    ] 
[6.220s][info][gc,stats    ]     1 successful concurrent GCs
[6.220s][info][gc,stats    ]       0 invoked explicitly
[6.220s][info][gc,stats    ]       0 invoked implicitly
[6.220s][info][gc,stats    ] 
[6.220s][info][gc,stats    ]     0 Degenerated GCs
[6.220s][info][gc,stats    ]       0 caused by allocation failure
[6.220s][info][gc,stats    ]       0 upgraded to Full GC
[6.220s][info][gc,stats    ] 
[6.220s][info][gc,stats    ]     0 Full GCs
[6.220s][info][gc,stats    ]       0 invoked explicitly
[6.220s][info][gc,stats    ]       0 invoked implicitly
[6.220s][info][gc,stats    ]       0 caused by allocation failure
[6.220s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.220s][info][gc,stats    ] 
[6.220s][info][gc,stats    ] 
