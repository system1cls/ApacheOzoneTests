[0.009s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.009s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.009s][info][gc] Using Shenandoah
[0.012s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.012s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.012s][info][gc,init] CPUs: 4 total, 4 available
[0.012s][info][gc,init] Memory: 7937M
[0.012s][info][gc,init] Large Page Support: Disabled
[0.012s][info][gc,init] NUMA Support: Disabled
[0.012s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.012s][info][gc,init] Heap Min Capacity: 6656K
[0.012s][info][gc,init] Heap Initial Capacity: 127488K
[0.012s][info][gc,init] Heap Max Capacity: 2032128K
[0.012s][info][gc,init] Pre-touch: Disabled
[0.012s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.012s][info][gc,init] Heuristics: Adaptive
[0.012s][info][gc,init] Heap Region Count: 3969
[0.012s][info][gc,init] Heap Region Size: 512K
[0.012s][info][gc,init] TLAB Size Max: 512K
[0.012s][info][gc,init] Humongous Object Threshold: 512K
[0.012s][info][gc,init] Parallel Workers: 8
[0.012s][info][gc,init] Concurrent Workers: 2
[0.024s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f6ddb000000-0x00007f6ddbc97000-0x00007f6ddbc97000), size 13201408, SharedBaseAddress: 0x00007f6ddb000000, ArchiveRelocationMode: 1.
[0.024s][info][gc,metaspace] Compressed class space mapped at: 0x00007f6ddc000000-0x00007f6e1c000000, reserved size: 1073741824
[0.024s][info][gc,metaspace] Narrow klass base: 0x00007f6ddb000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.276s][info][gc          ] Trigger: Metadata GC Threshold
[1.276s][info][gc,ergo     ] Free: 1790M, Max: 512K regular, 1790M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.277s][info][gc,start    ] GC(0) Concurrent reset
[1.277s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.277s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.277s][info][gc          ] GC(0) Concurrent reset 0.561ms
[1.277s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.278s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.278s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1790M, Non-Taxable: 179M, Alloc Tax Rate: 0.1x
[1.278s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.778ms
[1.278s][info][gc,start    ] GC(0) Concurrent marking roots
[1.278s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.281s][info][gc          ] GC(0) Concurrent marking roots 2.770ms
[1.281s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.281s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.297s][info][gc          ] GC(0) Concurrent marking (unload classes) 15.502ms
[1.297s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.297s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.298s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1893M, Max CSet: 84672K, Min Garbage: 0B
[1.298s][info][gc,ergo     ] GC(0) Collectable Garbage: 82089K (99%), Immediate: 5343K (6%), CSet: 76745K (92%)
[1.298s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 84480K, Free: 1794M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.298s][info][gc          ] GC(0) Pause Final Mark (unload classes) 1.376ms
[1.298s][info][gc,start    ] GC(0) Concurrent thread roots
[1.298s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.299s][info][gc          ] GC(0) Concurrent thread roots 0.439ms
[1.299s][info][gc,start    ] GC(0) Concurrent weak references
[1.299s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.299s][info][gc,ref      ] GC(0) Encountered references: Soft: 3955, Weak: 2130, Final: 20, Phantom: 795
[1.299s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1282, Final: 20, Phantom: 483
[1.299s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 481, Final: 0, Phantom: 316
[1.299s][info][gc          ] GC(0) Concurrent weak references 0.409ms
[1.299s][info][gc,start    ] GC(0) Concurrent weak roots
[1.299s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.303s][info][gc          ] GC(0) Concurrent weak roots 3.998ms
[1.303s][info][gc,start    ] GC(0) Concurrent cleanup
[1.303s][info][gc          ] GC(0) Concurrent cleanup 97M->92M(126M) 0.074ms
[1.303s][info][gc,ergo     ] GC(0) Free: 1793M, Max: 512K regular, 1788M humongous, Frag: 1% external, 0% internal; Reserve: 100857K, Max: 512K
[1.303s][info][gc,start    ] GC(0) Concurrent class unloading
[1.303s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.313s][info][gc          ] GC(0) Concurrent class unloading 9.425ms
[1.313s][info][gc,start    ] GC(0) Concurrent strong roots
[1.313s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.314s][info][gc          ] GC(0) Concurrent strong roots 1.441ms
[1.314s][info][gc,start    ] GC(0) Concurrent evacuation
[1.314s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.319s][info][gc          ] GC(0) Concurrent evacuation 5.111ms
[1.319s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.319s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 100M, Free: 1793M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.319s][info][gc          ] GC(0) Pause Init Update Refs 0.042ms
[1.319s][info][gc,start    ] GC(0) Concurrent update references
[1.319s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.326s][info][gc          ] GC(0) Concurrent update references 6.653ms
[1.326s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.326s][info][gc          ] GC(0) Concurrent update thread roots 0.416ms
[1.327s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.327s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.327s][info][gc          ] GC(0) Pause Final Update Refs 0.079ms
[1.327s][info][gc,start    ] GC(0) Concurrent cleanup
[1.327s][info][gc          ] GC(0) Concurrent cleanup 100M->17M(133M) 0.083ms
[1.327s][info][gc,ergo     ] Free: 1866M, Max: 512K regular, 1779M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.327s][info][gc,stats    ] 
[1.327s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.327s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.327s][info][gc,stats    ] 
[1.327s][info][gc,stats    ] Concurrent Reset                    635 us
[1.327s][info][gc,stats    ] Pause Init Mark (G)                1147 us
[1.327s][info][gc,stats    ] Pause Init Mark (N)                 814 us
[1.327s][info][gc,stats    ]   Update Region States               28 us
[1.327s][info][gc,stats    ] Concurrent Mark Roots              2793 us, parallelism: 1.49x
[1.327s][info][gc,stats    ]   CMR: <total>                     4166 us
[1.327s][info][gc,stats    ]   CMR: Thread Roots                1078 us, workers (us): 1078,   0, ---, ---, ---, ---, ---, ---, 
[1.327s][info][gc,stats    ]   CMR: VM Strong Roots              748 us, workers (us): 470, 277, ---, ---, ---, ---, ---, ---, 
[1.327s][info][gc,stats    ]   CMR: CLDG Roots                  2341 us, workers (us): ---, 2341, ---, ---, ---, ---, ---, ---, 
[1.327s][info][gc,stats    ] Concurrent Marking                15533 us
[1.327s][info][gc,stats    ] Pause Final Mark (G)               1492 us
[1.327s][info][gc,stats    ] Pause Final Mark (N)               1391 us
[1.327s][info][gc,stats    ]   Finish Mark                      1203 us
[1.327s][info][gc,stats    ]   Update Region States               24 us
[1.327s][info][gc,stats    ]   Choose Collection Set              84 us
[1.327s][info][gc,stats    ]   Rebuild Free Set                   18 us
[1.327s][info][gc,stats    ] Concurrent Thread Roots             458 us, parallelism: 1.15x
[1.327s][info][gc,stats    ]   CTR: <total>                      529 us
[1.327s][info][gc,stats    ]   CTR: Thread Roots                 529 us, workers (us): 187, 342, ---, ---, ---, ---, ---, ---, 
[1.327s][info][gc,stats    ] Concurrent Weak References          424 us, parallelism: 0.95x
[1.327s][info][gc,stats    ]   CWRF: <total>                     402 us
[1.327s][info][gc,stats    ]   CWRF: Weak References             402 us, workers (us): 103, 299, ---, ---, ---, ---, ---, ---, 
[1.327s][info][gc,stats    ] Concurrent Weak Roots              4016 us
[1.327s][info][gc,stats    ]   Roots                            2792 us, parallelism: 0.91x
[1.327s][info][gc,stats    ]     CWR: <total>                   2529 us
[1.327s][info][gc,stats    ]     CWR: Code Cache Roots           770 us, workers (us): 770,   0, ---, ---, ---, ---, ---, ---, 
[1.327s][info][gc,stats    ]     CWR: VM Weak Roots             1745 us, workers (us): 1744,   1, ---, ---, ---, ---, ---, ---, 
[1.327s][info][gc,stats    ]     CWR: CLDG Roots                  14 us, workers (us):  14, ---, ---, ---, ---, ---, ---, ---, 
[1.327s][info][gc,stats    ]   Rendezvous                       1187 us
[1.327s][info][gc,stats    ] Concurrent Cleanup                   83 us
[1.327s][info][gc,stats    ] Concurrent Class Unloading         9448 us
[1.327s][info][gc,stats    ]   Unlink Stale                     4547 us
[1.327s][info][gc,stats    ]     System Dictionary                35 us
[1.327s][info][gc,stats    ]     Weak Class Links                  0 us
[1.327s][info][gc,stats    ]     Code Roots                     4510 us
[1.327s][info][gc,stats    ]   Rendezvous                         43 us
[1.327s][info][gc,stats    ]   Purge Unlinked                   4817 us
[1.327s][info][gc,stats    ]     Code Roots                     4789 us
[1.327s][info][gc,stats    ]     CLDG                             28 us
[1.327s][info][gc,stats    ]     Exception Caches                  0 us
[1.327s][info][gc,stats    ] Concurrent Strong Roots            1469 us, parallelism: 0.95x
[1.327s][info][gc,stats    ]   CSR: <total>                     1396 us
[1.327s][info][gc,stats    ]   CSR: VM Strong Roots               24 us, workers (us):  11,  13, ---, ---, ---, ---, ---, ---, 
[1.327s][info][gc,stats    ]   CSR: CLDG Roots                  1372 us, workers (us): 1372, ---, ---, ---, ---, ---, ---, ---, 
[1.328s][info][gc,stats    ] Concurrent Evacuation              5150 us
[1.328s][info][gc,stats    ] Pause Init Update Refs (G)          156 us
[1.328s][info][gc,stats    ] Pause Init Update Refs (N)           51 us
[1.328s][info][gc,stats    ]   Manage GCLABs                       4 us
[1.328s][info][gc,stats    ] Concurrent Update Refs             6697 us
[1.328s][info][gc,stats    ] Concurrent Update Thread Roots      432 us
[1.328s][info][gc,stats    ] Pause Final Update Refs (G)         185 us
[1.328s][info][gc,stats    ] Pause Final Update Refs (N)          89 us
[1.328s][info][gc,stats    ]   Update Region States               23 us
[1.328s][info][gc,stats    ]   Trash Collection Set                4 us
[1.328s][info][gc,stats    ]   Rebuild Free Set                   18 us
[1.328s][info][gc,stats    ] Concurrent Cleanup                  103 us
[1.328s][info][gc,stats    ] 
[1.328s][info][gc,stats    ] Allocation pacing accrued:
[1.328s][info][gc,stats    ]       0 of  1316 ms (  0.0%): <total>
[1.328s][info][gc,stats    ]       0 of  1316 ms (  0.0%): <average total>
[1.328s][info][gc,stats    ] 
[1.328s][info][gc,metaspace] Metaspace: 21239K(21568K)->21538K(21888K) NonClass: 18901K(19072K)->19159K(19328K) Class: 2337K(2496K)->2378K(2560K)
[1.328s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[7.655s][info][gc          ] Cancelling GC: Stopping VM
[7.656s][info][gc,heap,exit] Heap
[7.656s][info][gc,heap,exit] Shenandoah Heap
[7.656s][info][gc,heap,exit]  1984M max, 1984M soft max, 133M committed, 38365K used
[7.656s][info][gc,heap,exit]  3969 x 512K regions
[7.656s][info][gc,heap,exit] Status: cancelled
[7.656s][info][gc,heap,exit] Reserved region:
[7.656s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[7.656s][info][gc,heap,exit] Collection set:
[7.656s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[7.656s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[7.656s][info][gc,heap,exit] 
[7.656s][info][gc,heap,exit]  Metaspace       used 25404K, committed 25792K, reserved 1114112K
[7.656s][info][gc,heap,exit]   class space    used 2925K, committed 3136K, reserved 1048576K
[7.656s][info][gc,stats    ] 
[7.656s][info][gc,stats    ] GC STATISTICS:
[7.656s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[7.656s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[7.656s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[7.656s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[7.656s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[7.656s][info][gc,stats    ] 
[7.656s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[7.656s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[7.657s][info][gc,stats    ] 
[7.657s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[7.657s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[7.657s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[7.657s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[7.657s][info][gc,stats    ] 
[7.657s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[7.657s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[7.657s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[7.657s][info][gc,stats    ]   Raise max pacing delay with care.
[7.657s][info][gc,stats    ] 
[7.657s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      635 us) (n =     1) (lvls, us =      635,      635,      635,      635,      635)
[7.657s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =     1147 us) (n =     1) (lvls, us =     1133,     1133,     1133,     1133,     1147)
[7.657s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      814 us) (n =     1) (lvls, us =      814,      814,      814,      814,      814)
[7.657s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       28 us) (n =     1) (lvls, us =       28,       28,       28,       28,       28)
[7.657s][info][gc,stats    ] Concurrent Mark Roots          =    0.003 s (a =     2793 us) (n =     1) (lvls, us =     2773,     2773,     2773,     2773,     2793)
[7.657s][info][gc,stats    ]   CMR: <total>                 =    0.004 s (a =     4166 us) (n =     1) (lvls, us =     4160,     4160,     4160,     4160,     4166)
[7.657s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1078 us) (n =     1) (lvls, us =     1074,     1074,     1074,     1074,     1078)
[7.657s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      748 us) (n =     1) (lvls, us =      746,      746,      746,      746,      748)
[7.657s][info][gc,stats    ]   CMR: CLDG Roots              =    0.002 s (a =     2341 us) (n =     1) (lvls, us =     2324,     2324,     2324,     2324,     2341)
[7.657s][info][gc,stats    ] Concurrent Marking             =    0.016 s (a =    15533 us) (n =     1) (lvls, us =    15430,    15430,    15430,    15430,    15533)
[7.657s][info][gc,stats    ] Pause Final Mark (G)           =    0.001 s (a =     1492 us) (n =     1) (lvls, us =     1484,     1484,     1484,     1484,     1492)
[7.657s][info][gc,stats    ] Pause Final Mark (N)           =    0.001 s (a =     1391 us) (n =     1) (lvls, us =     1387,     1387,     1387,     1387,     1391)
[7.657s][info][gc,stats    ]   Finish Mark                  =    0.001 s (a =     1203 us) (n =     1) (lvls, us =     1191,     1191,     1191,     1191,     1203)
[7.657s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       24 us) (n =     1) (lvls, us =       24,       24,       24,       24,       24)
[7.657s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       84 us) (n =     1) (lvls, us =       84,       84,       84,       84,       84)
[7.657s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[7.657s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      458 us) (n =     1) (lvls, us =      457,      457,      457,      457,      458)
[7.657s][info][gc,stats    ]   CTR: <total>                 =    0.001 s (a =      529 us) (n =     1) (lvls, us =      527,      527,      527,      527,      529)
[7.657s][info][gc,stats    ]   CTR: Thread Roots            =    0.001 s (a =      529 us) (n =     1) (lvls, us =      527,      527,      527,      527,      529)
[7.657s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      424 us) (n =     1) (lvls, us =      424,      424,      424,      424,      424)
[7.657s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      402 us) (n =     1) (lvls, us =      400,      400,      400,      400,      402)
[7.657s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      402 us) (n =     1) (lvls, us =      400,      400,      400,      400,      402)
[7.657s][info][gc,stats    ] Concurrent Weak Roots          =    0.004 s (a =     4016 us) (n =     1) (lvls, us =     4004,     4004,     4004,     4004,     4016)
[7.658s][info][gc,stats    ]   Roots                        =    0.003 s (a =     2792 us) (n =     1) (lvls, us =     2773,     2773,     2773,     2773,     2792)
[7.658s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     2529 us) (n =     1) (lvls, us =     2520,     2520,     2520,     2520,     2529)
[7.658s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      770 us) (n =     1) (lvls, us =      770,      770,      770,      770,      770)
[7.658s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1745 us) (n =     1) (lvls, us =     1738,     1738,     1738,     1738,     1745)
[7.658s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       14 us) (n =     1) (lvls, us =       14,       14,       14,       14,       14)
[7.658s][info][gc,stats    ]   Rendezvous                   =    0.001 s (a =     1187 us) (n =     1) (lvls, us =     1172,     1172,     1172,     1172,     1187)
[7.658s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       83 us) (n =     1) (lvls, us =       83,       83,       83,       83,       83)
[7.658s][info][gc,stats    ] Concurrent Class Unloading     =    0.009 s (a =     9448 us) (n =     1) (lvls, us =     9434,     9434,     9434,     9434,     9448)
[7.658s][info][gc,stats    ]   Unlink Stale                 =    0.005 s (a =     4547 us) (n =     1) (lvls, us =     4531,     4531,     4531,     4531,     4547)
[7.658s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       35 us) (n =     1) (lvls, us =       35,       35,       35,       35,       35)
[7.658s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.658s][info][gc,stats    ]     Code Roots                 =    0.005 s (a =     4510 us) (n =     1) (lvls, us =     4492,     4492,     4492,     4492,     4510)
[7.658s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =       43 us) (n =     1) (lvls, us =       43,       43,       43,       43,       43)
[7.658s][info][gc,stats    ]   Purge Unlinked               =    0.005 s (a =     4817 us) (n =     1) (lvls, us =     4805,     4805,     4805,     4805,     4817)
[7.658s][info][gc,stats    ]     Code Roots                 =    0.005 s (a =     4789 us) (n =     1) (lvls, us =     4785,     4785,     4785,     4785,     4789)
[7.658s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       28 us) (n =     1) (lvls, us =       28,       28,       28,       28,       28)
[7.658s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.658s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1469 us) (n =     1) (lvls, us =     1465,     1465,     1465,     1465,     1469)
[7.658s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1396 us) (n =     1) (lvls, us =     1387,     1387,     1387,     1387,     1396)
[7.658s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       24 us) (n =     1) (lvls, us =       24,       24,       24,       24,       24)
[7.658s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1372 us) (n =     1) (lvls, us =     1367,     1367,     1367,     1367,     1372)
[7.658s][info][gc,stats    ] Concurrent Evacuation          =    0.005 s (a =     5150 us) (n =     1) (lvls, us =     5137,     5137,     5137,     5137,     5150)
[7.658s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      156 us) (n =     1) (lvls, us =      154,      154,      154,      154,      156)
[7.658s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       51 us) (n =     1) (lvls, us =       51,       51,       51,       51,       51)
[7.658s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[7.658s][info][gc,stats    ] Concurrent Update Refs         =    0.007 s (a =     6697 us) (n =     1) (lvls, us =     6680,     6680,     6680,     6680,     6697)
[7.658s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      432 us) (n =     1) (lvls, us =      432,      432,      432,      432,      432)
[7.658s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      185 us) (n =     1) (lvls, us =      184,      184,      184,      184,      185)
[7.658s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =       89 us) (n =     1) (lvls, us =       89,       89,       89,       89,       89)
[7.658s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       23 us) (n =     1) (lvls, us =       23,       23,       23,       23,       23)
[7.658s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[7.658s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[7.658s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      103 us) (n =     1) (lvls, us =      102,      102,      102,      102,      103)
[7.658s][info][gc,stats    ] 
[7.658s][info][gc,stats    ] 
[7.658s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[7.658s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[7.659s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[7.659s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[7.659s][info][gc,stats    ] 
[7.659s][info][gc,stats    ]     1 successful concurrent GCs
[7.659s][info][gc,stats    ]       0 invoked explicitly
[7.659s][info][gc,stats    ]       0 invoked implicitly
[7.659s][info][gc,stats    ] 
[7.659s][info][gc,stats    ]     0 Degenerated GCs
[7.659s][info][gc,stats    ]       0 caused by allocation failure
[7.659s][info][gc,stats    ]       0 upgraded to Full GC
[7.659s][info][gc,stats    ] 
[7.659s][info][gc,stats    ]     0 Full GCs
[7.659s][info][gc,stats    ]       0 invoked explicitly
[7.659s][info][gc,stats    ]       0 invoked implicitly
[7.659s][info][gc,stats    ]       0 caused by allocation failure
[7.659s][info][gc,stats    ]       0 upgraded from Degenerated GC
[7.659s][info][gc,stats    ] 
[7.659s][info][gc,stats    ] 
