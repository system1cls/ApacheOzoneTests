[0.005s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.005s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.006s][info][gc] Using Shenandoah
[0.006s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.006s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.006s][info][gc,init] CPUs: 4 total, 4 available
[0.006s][info][gc,init] Memory: 7937M
[0.006s][info][gc,init] Large Page Support: Disabled
[0.006s][info][gc,init] NUMA Support: Disabled
[0.006s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.006s][info][gc,init] Heap Min Capacity: 6656K
[0.006s][info][gc,init] Heap Initial Capacity: 127488K
[0.006s][info][gc,init] Heap Max Capacity: 2032128K
[0.007s][info][gc,init] Pre-touch: Disabled
[0.007s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.007s][info][gc,init] Heuristics: Adaptive
[0.007s][info][gc,init] Heap Region Count: 3969
[0.007s][info][gc,init] Heap Region Size: 512K
[0.007s][info][gc,init] TLAB Size Max: 512K
[0.007s][info][gc,init] Humongous Object Threshold: 512K
[0.007s][info][gc,init] Parallel Workers: 8
[0.007s][info][gc,init] Concurrent Workers: 2
[0.027s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007fcb87000000-0x00007fcb87c97000-0x00007fcb87c97000), size 13201408, SharedBaseAddress: 0x00007fcb87000000, ArchiveRelocationMode: 1.
[0.028s][info][gc,metaspace] Compressed class space mapped at: 0x00007fcb88000000-0x00007fcbc8000000, reserved size: 1073741824
[0.028s][info][gc,metaspace] Narrow klass base: 0x00007fcb87000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.920s][info][gc          ] Trigger: Metadata GC Threshold
[1.920s][info][gc,ergo     ] Free: 1746M, Max: 512K regular, 1746M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.920s][info][gc,start    ] GC(0) Concurrent reset
[1.920s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.920s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.920s][info][gc          ] GC(0) Concurrent reset 0.622ms
[1.921s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.921s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.921s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 0.1x
[1.921s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.485ms
[1.921s][info][gc,start    ] GC(0) Concurrent marking roots
[1.921s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.924s][info][gc          ] GC(0) Concurrent marking roots 2.572ms
[1.924s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.924s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.968s][info][gc          ] GC(0) Concurrent marking (unload classes) 43.996ms
[1.968s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.968s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.974s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1845M, Max CSet: 84672K, Min Garbage: 0B
[1.974s][info][gc,ergo     ] GC(0) Collectable Garbage: 73126K (98%), Immediate: 4847K (6%), CSet: 68279K (92%)
[1.974s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 76800K, Free: 1746M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.974s][info][gc          ] GC(0) Pause Final Mark (unload classes) 6.306ms
[1.974s][info][gc,start    ] GC(0) Concurrent thread roots
[1.974s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.975s][info][gc          ] GC(0) Concurrent thread roots 0.315ms
[1.975s][info][gc,start    ] GC(0) Concurrent weak references
[1.975s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.975s][info][gc,ref      ] GC(0) Encountered references: Soft: 3953, Weak: 2093, Final: 4, Phantom: 821
[1.975s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1445, Final: 0, Phantom: 451
[1.975s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 498, Final: 0, Phantom: 230
[1.975s][info][gc          ] GC(0) Concurrent weak references 0.456ms
[1.975s][info][gc,start    ] GC(0) Concurrent weak roots
[1.975s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.978s][info][gc          ] GC(0) Concurrent weak roots 3.007ms
[1.978s][info][gc,start    ] GC(0) Concurrent cleanup
[1.978s][info][gc          ] GC(0) Concurrent cleanup 142M->137M(145M) 0.104ms
[1.978s][info][gc,ergo     ] GC(0) Free: 1745M, Max: 512K regular, 1740M humongous, Frag: 1% external, 0% internal; Reserve: 100989K, Max: 512K
[1.978s][info][gc,start    ] GC(0) Concurrent class unloading
[1.978s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.985s][info][gc          ] GC(0) Concurrent class unloading 6.128ms
[1.985s][info][gc,start    ] GC(0) Concurrent strong roots
[1.985s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.986s][info][gc          ] GC(0) Concurrent strong roots 1.382ms
[1.986s][info][gc,start    ] GC(0) Concurrent evacuation
[1.986s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.995s][info][gc          ] GC(0) Concurrent evacuation 8.742ms
[1.995s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.995s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 146M, Free: 1745M, Non-Taxable: 174M, Alloc Tax Rate: 1.1x
[1.995s][info][gc          ] GC(0) Pause Init Update Refs 0.039ms
[1.995s][info][gc,start    ] GC(0) Concurrent update references
[1.995s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[2.012s][info][gc          ] GC(0) Concurrent update references 16.793ms
[2.012s][info][gc,start    ] GC(0) Concurrent update thread roots
[2.012s][info][gc          ] GC(0) Concurrent update thread roots 0.135ms
[2.012s][info][gc,start    ] GC(0) Pause Final Update Refs
[2.012s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[2.012s][info][gc          ] GC(0) Pause Final Update Refs 0.094ms
[2.012s][info][gc,start    ] GC(0) Concurrent cleanup
[2.012s][info][gc          ] GC(0) Concurrent cleanup 146M->71M(154M) 0.104ms
[2.012s][info][gc,ergo     ] Free: 1810M, Max: 512K regular, 1731M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[2.012s][info][gc,stats    ] 
[2.012s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[2.012s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[2.012s][info][gc,stats    ] 
[2.012s][info][gc,stats    ] Concurrent Reset                    658 us
[2.012s][info][gc,stats    ] Pause Init Mark (G)                 801 us
[2.012s][info][gc,stats    ] Pause Init Mark (N)                 498 us
[2.012s][info][gc,stats    ]   Update Region States               23 us
[2.012s][info][gc,stats    ] Concurrent Mark Roots              2603 us, parallelism: 1.79x
[2.012s][info][gc,stats    ]   CMR: <total>                     4655 us
[2.012s][info][gc,stats    ]   CMR: Thread Roots                1132 us, workers (us): 1027, 105, ---, ---, ---, ---, ---, ---, 
[2.012s][info][gc,stats    ]   CMR: VM Strong Roots             2443 us, workers (us): 1315, 1129, ---, ---, ---, ---, ---, ---, 
[2.012s][info][gc,stats    ]   CMR: CLDG Roots                  1080 us, workers (us): ---, 1080, ---, ---, ---, ---, ---, ---, 
[2.012s][info][gc,stats    ] Concurrent Marking                44022 us
[2.013s][info][gc,stats    ] Pause Final Mark (G)               6454 us
[2.013s][info][gc,stats    ] Pause Final Mark (N)               6331 us
[2.013s][info][gc,stats    ]   Finish Mark                      6087 us
[2.013s][info][gc,stats    ]   Update Region States               38 us
[2.013s][info][gc,stats    ]   Choose Collection Set             103 us
[2.013s][info][gc,stats    ]   Rebuild Free Set                   20 us
[2.013s][info][gc,stats    ] Concurrent Thread Roots             333 us, parallelism: 1.17x
[2.013s][info][gc,stats    ]   CTR: <total>                      389 us
[2.013s][info][gc,stats    ]   CTR: Thread Roots                 389 us, workers (us): 275, 114, ---, ---, ---, ---, ---, ---, 
[2.013s][info][gc,stats    ] Concurrent Weak References          468 us, parallelism: 0.85x
[2.013s][info][gc,stats    ]   CWRF: <total>                     398 us
[2.013s][info][gc,stats    ]   CWRF: Weak References             398 us, workers (us):  32, 367, ---, ---, ---, ---, ---, ---, 
[2.013s][info][gc,stats    ] Concurrent Weak Roots              3036 us
[2.013s][info][gc,stats    ]   Roots                            1770 us, parallelism: 1.54x
[2.013s][info][gc,stats    ]     CWR: <total>                   2725 us
[2.013s][info][gc,stats    ]     CWR: Code Cache Roots           756 us, workers (us): 375, 382, ---, ---, ---, ---, ---, ---, 
[2.013s][info][gc,stats    ]     CWR: VM Weak Roots             1949 us, workers (us): 1251, 698, ---, ---, ---, ---, ---, ---, 
[2.013s][info][gc,stats    ]     CWR: CLDG Roots                  19 us, workers (us):  19, ---, ---, ---, ---, ---, ---, ---, 
[2.013s][info][gc,stats    ]   Rendezvous                       1214 us
[2.013s][info][gc,stats    ] Concurrent Cleanup                  128 us
[2.013s][info][gc,stats    ] Concurrent Class Unloading         6147 us
[2.013s][info][gc,stats    ]   Unlink Stale                     2784 us
[2.013s][info][gc,stats    ]     System Dictionary                50 us
[2.013s][info][gc,stats    ]     Weak Class Links                  0 us
[2.013s][info][gc,stats    ]     Code Roots                     2733 us
[2.013s][info][gc,stats    ]   Rendezvous                        124 us
[2.013s][info][gc,stats    ]   Purge Unlinked                   3195 us
[2.013s][info][gc,stats    ]     Code Roots                     3183 us
[2.013s][info][gc,stats    ]     CLDG                             11 us
[2.013s][info][gc,stats    ]     Exception Caches                  0 us
[2.013s][info][gc,stats    ] Concurrent Strong Roots            1424 us, parallelism: 0.95x
[2.013s][info][gc,stats    ]   CSR: <total>                     1347 us
[2.013s][info][gc,stats    ]   CSR: VM Strong Roots               23 us, workers (us):   5,  18, ---, ---, ---, ---, ---, ---, 
[2.013s][info][gc,stats    ]   CSR: CLDG Roots                  1324 us, workers (us): 1324, ---, ---, ---, ---, ---, ---, ---, 
[2.013s][info][gc,stats    ] Concurrent Evacuation              8767 us
[2.013s][info][gc,stats    ] Pause Init Update Refs (G)          238 us
[2.013s][info][gc,stats    ] Pause Init Update Refs (N)           46 us
[2.013s][info][gc,stats    ]   Manage GCLABs                       5 us
[2.013s][info][gc,stats    ] Concurrent Update Refs            16817 us
[2.013s][info][gc,stats    ] Concurrent Update Thread Roots      148 us
[2.013s][info][gc,stats    ] Pause Final Update Refs (G)         197 us
[2.013s][info][gc,stats    ] Pause Final Update Refs (N)         104 us
[2.013s][info][gc,stats    ]   Update Region States               37 us
[2.013s][info][gc,stats    ]   Trash Collection Set                3 us
[2.013s][info][gc,stats    ]   Rebuild Free Set                   17 us
[2.013s][info][gc,stats    ] Concurrent Cleanup                  123 us
[2.013s][info][gc,stats    ] 
[2.013s][info][gc,stats    ] Allocation pacing accrued:
[2.013s][info][gc,stats    ]       0 of  2007 ms (  0.0%): <total>
[2.013s][info][gc,stats    ]       0 of  2007 ms (  0.0%): <average total>
[2.013s][info][gc,stats    ] 
[2.013s][info][gc,metaspace] Metaspace: 21221K(21568K)->22178K(22464K) NonClass: 18875K(19072K)->19701K(19840K) Class: 2345K(2496K)->2476K(2624K)
[2.013s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[6.311s][info][gc          ] Cancelling GC: Stopping VM
[6.311s][info][gc,heap,exit] Heap
[6.311s][info][gc,heap,exit] Shenandoah Heap
[6.311s][info][gc,heap,exit]  1984M max, 1984M soft max, 154M committed, 84994K used
[6.311s][info][gc,heap,exit]  3969 x 512K regions
[6.311s][info][gc,heap,exit] Status: cancelled
[6.311s][info][gc,heap,exit] Reserved region:
[6.311s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[6.311s][info][gc,heap,exit] Collection set:
[6.311s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[6.311s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[6.311s][info][gc,heap,exit] 
[6.311s][info][gc,heap,exit]  Metaspace       used 25114K, committed 25408K, reserved 1114112K
[6.311s][info][gc,heap,exit]   class space    used 2775K, committed 2880K, reserved 1048576K
[6.311s][info][gc,stats    ] 
[6.311s][info][gc,stats    ] GC STATISTICS:
[6.311s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[6.311s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[6.311s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[6.311s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[6.311s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[6.311s][info][gc,stats    ] 
[6.311s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[6.311s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[6.311s][info][gc,stats    ] 
[6.311s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[6.311s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[6.311s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[6.311s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[6.311s][info][gc,stats    ] 
[6.311s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[6.311s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[6.311s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[6.311s][info][gc,stats    ]   Raise max pacing delay with care.
[6.311s][info][gc,stats    ] 
[6.311s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      658 us) (n =     1) (lvls, us =      658,      658,      658,      658,      658)
[6.311s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      801 us) (n =     1) (lvls, us =      801,      801,      801,      801,      801)
[6.311s][info][gc,stats    ] Pause Init Mark (N)            =    0.000 s (a =      498 us) (n =     1) (lvls, us =      496,      496,      496,      496,      498)
[6.311s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       23 us) (n =     1) (lvls, us =       23,       23,       23,       23,       23)
[6.311s][info][gc,stats    ] Concurrent Mark Roots          =    0.003 s (a =     2603 us) (n =     1) (lvls, us =     2598,     2598,     2598,     2598,     2603)
[6.311s][info][gc,stats    ]   CMR: <total>                 =    0.005 s (a =     4655 us) (n =     1) (lvls, us =     4648,     4648,     4648,     4648,     4655)
[6.311s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1132 us) (n =     1) (lvls, us =     1113,     1113,     1113,     1113,     1132)
[6.311s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.002 s (a =     2443 us) (n =     1) (lvls, us =     2441,     2441,     2441,     2441,     2443)
[6.311s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =     1080 us) (n =     1) (lvls, us =     1074,     1074,     1074,     1074,     1080)
[6.311s][info][gc,stats    ] Concurrent Marking             =    0.044 s (a =    44022 us) (n =     1) (lvls, us =    43945,    43945,    43945,    43945,    44022)
[6.311s][info][gc,stats    ] Pause Final Mark (G)           =    0.006 s (a =     6454 us) (n =     1) (lvls, us =     6445,     6445,     6445,     6445,     6454)
[6.311s][info][gc,stats    ] Pause Final Mark (N)           =    0.006 s (a =     6331 us) (n =     1) (lvls, us =     6328,     6328,     6328,     6328,     6331)
[6.311s][info][gc,stats    ]   Finish Mark                  =    0.006 s (a =     6087 us) (n =     1) (lvls, us =     6074,     6074,     6074,     6074,     6087)
[6.311s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       38 us) (n =     1) (lvls, us =       38,       38,       38,       38,       38)
[6.311s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =      103 us) (n =     1) (lvls, us =      102,      102,      102,      102,      103)
[6.311s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[6.311s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      333 us) (n =     1) (lvls, us =      332,      332,      332,      332,      333)
[6.311s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      389 us) (n =     1) (lvls, us =      387,      387,      387,      387,      389)
[6.311s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      389 us) (n =     1) (lvls, us =      387,      387,      387,      387,      389)
[6.311s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      468 us) (n =     1) (lvls, us =      467,      467,      467,      467,      468)
[6.311s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      398 us) (n =     1) (lvls, us =      396,      396,      396,      396,      398)
[6.312s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      398 us) (n =     1) (lvls, us =      396,      396,      396,      396,      398)
[6.312s][info][gc,stats    ] Concurrent Weak Roots          =    0.003 s (a =     3036 us) (n =     1) (lvls, us =     3027,     3027,     3027,     3027,     3036)
[6.312s][info][gc,stats    ]   Roots                        =    0.002 s (a =     1770 us) (n =     1) (lvls, us =     1758,     1758,     1758,     1758,     1770)
[6.312s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     2725 us) (n =     1) (lvls, us =     2715,     2715,     2715,     2715,     2725)
[6.312s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      756 us) (n =     1) (lvls, us =      756,      756,      756,      756,      756)
[6.312s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1949 us) (n =     1) (lvls, us =     1934,     1934,     1934,     1934,     1949)
[6.312s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[6.312s][info][gc,stats    ]   Rendezvous                   =    0.001 s (a =     1214 us) (n =     1) (lvls, us =     1211,     1211,     1211,     1211,     1214)
[6.312s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      128 us) (n =     1) (lvls, us =      127,      127,      127,      127,      128)
[6.312s][info][gc,stats    ] Concurrent Class Unloading     =    0.006 s (a =     6147 us) (n =     1) (lvls, us =     6133,     6133,     6133,     6133,     6147)
[6.312s][info][gc,stats    ]   Unlink Stale                 =    0.003 s (a =     2784 us) (n =     1) (lvls, us =     2773,     2773,     2773,     2773,     2784)
[6.312s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       50 us) (n =     1) (lvls, us =       50,       50,       50,       50,       50)
[6.312s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.312s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     2733 us) (n =     1) (lvls, us =     2715,     2715,     2715,     2715,     2733)
[6.312s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      124 us) (n =     1) (lvls, us =      123,      123,      123,      123,      124)
[6.312s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     3195 us) (n =     1) (lvls, us =     3184,     3184,     3184,     3184,     3195)
[6.312s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     3183 us) (n =     1) (lvls, us =     3164,     3164,     3164,     3164,     3183)
[6.312s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       11 us) (n =     1) (lvls, us =       11,       11,       11,       11,       11)
[6.312s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[6.312s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1424 us) (n =     1) (lvls, us =     1406,     1406,     1406,     1406,     1424)
[6.312s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1347 us) (n =     1) (lvls, us =     1328,     1328,     1328,     1328,     1347)
[6.312s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       23 us) (n =     1) (lvls, us =       23,       23,       23,       23,       23)
[6.312s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1324 us) (n =     1) (lvls, us =     1309,     1309,     1309,     1309,     1324)
[6.312s][info][gc,stats    ] Concurrent Evacuation          =    0.009 s (a =     8767 us) (n =     1) (lvls, us =     8750,     8750,     8750,     8750,     8767)
[6.312s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      238 us) (n =     1) (lvls, us =      236,      236,      236,      236,      238)
[6.312s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       46 us) (n =     1) (lvls, us =       46,       46,       46,       46,       46)
[6.312s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[6.312s][info][gc,stats    ] Concurrent Update Refs         =    0.017 s (a =    16817 us) (n =     1) (lvls, us =    16797,    16797,    16797,    16797,    16817)
[6.312s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      148 us) (n =     1) (lvls, us =      146,      146,      146,      146,      148)
[6.312s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      197 us) (n =     1) (lvls, us =      197,      197,      197,      197,      197)
[6.312s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      104 us) (n =     1) (lvls, us =      104,      104,      104,      104,      104)
[6.312s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       37 us) (n =     1) (lvls, us =       37,       37,       37,       37,       37)
[6.312s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        3 us) (n =     1) (lvls, us =        3,        3,        3,        3,        3)
[6.312s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[6.312s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      123 us) (n =     1) (lvls, us =      121,      121,      121,      121,      123)
[6.312s][info][gc,stats    ] 
[6.312s][info][gc,stats    ] 
[6.312s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[6.312s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[6.312s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[6.312s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[6.312s][info][gc,stats    ] 
[6.312s][info][gc,stats    ]     1 successful concurrent GCs
[6.312s][info][gc,stats    ]       0 invoked explicitly
[6.312s][info][gc,stats    ]       0 invoked implicitly
[6.312s][info][gc,stats    ] 
[6.312s][info][gc,stats    ]     0 Degenerated GCs
[6.312s][info][gc,stats    ]       0 caused by allocation failure
[6.312s][info][gc,stats    ]       0 upgraded to Full GC
[6.312s][info][gc,stats    ] 
[6.312s][info][gc,stats    ]     0 Full GCs
[6.312s][info][gc,stats    ]       0 invoked explicitly
[6.312s][info][gc,stats    ]       0 invoked implicitly
[6.312s][info][gc,stats    ]       0 caused by allocation failure
[6.312s][info][gc,stats    ]       0 upgraded from Degenerated GC
[6.312s][info][gc,stats    ] 
[6.312s][info][gc,stats    ] 
