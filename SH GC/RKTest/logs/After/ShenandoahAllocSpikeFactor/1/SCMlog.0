[0.008s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.008s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.009s][info][gc] Using Shenandoah
[0.011s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.011s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.011s][info][gc,init] CPUs: 4 total, 4 available
[0.011s][info][gc,init] Memory: 7937M
[0.011s][info][gc,init] Large Page Support: Disabled
[0.011s][info][gc,init] NUMA Support: Disabled
[0.011s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.011s][info][gc,init] Heap Min Capacity: 6656K
[0.011s][info][gc,init] Heap Initial Capacity: 127488K
[0.011s][info][gc,init] Heap Max Capacity: 2032128K
[0.011s][info][gc,init] Pre-touch: Disabled
[0.011s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.011s][info][gc,init] Heuristics: Adaptive
[0.011s][info][gc,init] Heap Region Count: 3969
[0.011s][info][gc,init] Heap Region Size: 512K
[0.011s][info][gc,init] TLAB Size Max: 512K
[0.011s][info][gc,init] Humongous Object Threshold: 512K
[0.011s][info][gc,init] Parallel Workers: 8
[0.011s][info][gc,init] Concurrent Workers: 2
[0.022s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f4a33000000-0x00007f4a33c97000-0x00007f4a33c97000), size 13201408, SharedBaseAddress: 0x00007f4a33000000, ArchiveRelocationMode: 1.
[0.022s][info][gc,metaspace] Compressed class space mapped at: 0x00007f4a34000000-0x00007f4a74000000, reserved size: 1073741824
[0.022s][info][gc,metaspace] Narrow klass base: 0x00007f4a33000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.318s][info][gc          ] Trigger: Metadata GC Threshold
[1.318s][info][gc,ergo     ] Free: 1790M, Max: 512K regular, 1790M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.318s][info][gc,start    ] GC(0) Concurrent reset
[1.319s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.319s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.319s][info][gc          ] GC(0) Concurrent reset 0.564ms
[1.319s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.320s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.320s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1790M, Non-Taxable: 179M, Alloc Tax Rate: 0.1x
[1.320s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.590ms
[1.320s][info][gc,start    ] GC(0) Concurrent marking roots
[1.320s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.323s][info][gc          ] GC(0) Concurrent marking roots 3.239ms
[1.323s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.323s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.334s][info][gc          ] GC(0) Concurrent marking (unload classes) 10.886ms
[1.334s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.334s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.334s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1893M, Max CSet: 84672K, Min Garbage: 0B
[1.334s][info][gc,ergo     ] GC(0) Collectable Garbage: 82090K (99%), Immediate: 5343K (6%), CSet: 76746K (92%)
[1.334s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 84480K, Free: 1794M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.334s][info][gc          ] GC(0) Pause Final Mark (unload classes) 0.277ms
[1.334s][info][gc,start    ] GC(0) Concurrent thread roots
[1.334s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.335s][info][gc          ] GC(0) Concurrent thread roots 0.185ms
[1.335s][info][gc,start    ] GC(0) Concurrent weak references
[1.335s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.335s][info][gc,ref      ] GC(0) Encountered references: Soft: 3955, Weak: 2133, Final: 20, Phantom: 795
[1.335s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1254, Final: 18, Phantom: 484
[1.335s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 481, Final: 0, Phantom: 316
[1.335s][info][gc          ] GC(0) Concurrent weak references 0.332ms
[1.335s][info][gc,start    ] GC(0) Concurrent weak roots
[1.335s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.339s][info][gc          ] GC(0) Concurrent weak roots 4.247ms
[1.339s][info][gc,start    ] GC(0) Concurrent cleanup
[1.339s][info][gc          ] GC(0) Concurrent cleanup 97M->92M(126M) 0.064ms
[1.339s][info][gc,ergo     ] GC(0) Free: 1793M, Max: 512K regular, 1787M humongous, Frag: 1% external, 0% internal; Reserve: 100845K, Max: 512K
[1.339s][info][gc,start    ] GC(0) Concurrent class unloading
[1.339s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.345s][info][gc          ] GC(0) Concurrent class unloading 6.026ms
[1.346s][info][gc,start    ] GC(0) Concurrent strong roots
[1.346s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.347s][info][gc          ] GC(0) Concurrent strong roots 1.054ms
[1.347s][info][gc,start    ] GC(0) Concurrent evacuation
[1.347s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.355s][info][gc          ] GC(0) Concurrent evacuation 8.844ms
[1.356s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.356s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 101M, Free: 1792M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.356s][info][gc          ] GC(0) Pause Init Update Refs 0.042ms
[1.356s][info][gc,start    ] GC(0) Concurrent update references
[1.356s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.360s][info][gc          ] GC(0) Concurrent update references 4.594ms
[1.360s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.361s][info][gc          ] GC(0) Concurrent update thread roots 0.410ms
[1.361s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.361s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.361s][info][gc          ] GC(0) Pause Final Update Refs 0.077ms
[1.361s][info][gc,start    ] GC(0) Concurrent cleanup
[1.361s][info][gc          ] GC(0) Concurrent cleanup 101M->18M(133M) 0.072ms
[1.361s][info][gc,ergo     ] Free: 1866M, Max: 512K regular, 1778M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.361s][info][gc,stats    ] 
[1.361s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.361s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.361s][info][gc,stats    ] 
[1.361s][info][gc,stats    ] Concurrent Reset                    631 us
[1.361s][info][gc,stats    ] Pause Init Mark (G)                 855 us
[1.361s][info][gc,stats    ] Pause Init Mark (N)                 611 us
[1.361s][info][gc,stats    ]   Update Region States               31 us
[1.361s][info][gc,stats    ] Concurrent Mark Roots              3260 us, parallelism: 1.52x
[1.361s][info][gc,stats    ]   CMR: <total>                     4960 us
[1.361s][info][gc,stats    ]   CMR: Thread Roots                1339 us, workers (us): 1339,   0, ---, ---, ---, ---, ---, ---, 
[1.361s][info][gc,stats    ]   CMR: VM Strong Roots              905 us, workers (us): 507, 397, ---, ---, ---, ---, ---, ---, 
[1.361s][info][gc,stats    ]   CMR: CLDG Roots                  2716 us, workers (us): ---, 2716, ---, ---, ---, ---, ---, ---, 
[1.361s][info][gc,stats    ] Concurrent Marking                10911 us
[1.361s][info][gc,stats    ] Pause Final Mark (G)                382 us
[1.361s][info][gc,stats    ] Pause Final Mark (N)                288 us
[1.361s][info][gc,stats    ]   Finish Mark                       115 us
[1.361s][info][gc,stats    ]   Update Region States               16 us
[1.361s][info][gc,stats    ]   Choose Collection Set              75 us
[1.361s][info][gc,stats    ]   Rebuild Free Set                   19 us
[1.361s][info][gc,stats    ] Concurrent Thread Roots             202 us, parallelism: 1.22x
[1.361s][info][gc,stats    ]   CTR: <total>                      247 us
[1.361s][info][gc,stats    ]   CTR: Thread Roots                 247 us, workers (us): 112, 135, ---, ---, ---, ---, ---, ---, 
[1.361s][info][gc,stats    ] Concurrent Weak References          470 us, parallelism: 0.74x
[1.361s][info][gc,stats    ]   CWRF: <total>                     349 us
[1.361s][info][gc,stats    ]   CWRF: Weak References             349 us, workers (us): 118, 232, ---, ---, ---, ---, ---, ---, 
[1.361s][info][gc,stats    ] Concurrent Weak Roots              4276 us
[1.361s][info][gc,stats    ]   Roots                            1622 us, parallelism: 1.58x
[1.361s][info][gc,stats    ]     CWR: <total>                   2555 us
[1.361s][info][gc,stats    ]     CWR: Code Cache Roots           685 us, workers (us): 329, 356, ---, ---, ---, ---, ---, ---, 
[1.361s][info][gc,stats    ]     CWR: VM Weak Roots             1857 us, workers (us): 924, 934, ---, ---, ---, ---, ---, ---, 
[1.361s][info][gc,stats    ]     CWR: CLDG Roots                  12 us, workers (us):  12, ---, ---, ---, ---, ---, ---, ---, 
[1.361s][info][gc,stats    ]   Rendezvous                       2595 us
[1.361s][info][gc,stats    ] Concurrent Cleanup                   79 us
[1.361s][info][gc,stats    ] Concurrent Class Unloading         6060 us
[1.361s][info][gc,stats    ]   Unlink Stale                     1683 us
[1.361s][info][gc,stats    ]     System Dictionary                52 us
[1.361s][info][gc,stats    ]     Weak Class Links                  0 us
[1.361s][info][gc,stats    ]     Code Roots                     1630 us
[1.361s][info][gc,stats    ]   Rendezvous                        834 us
[1.361s][info][gc,stats    ]   Purge Unlinked                   3487 us
[1.361s][info][gc,stats    ]     Code Roots                     3476 us
[1.361s][info][gc,stats    ]     CLDG                             10 us
[1.361s][info][gc,stats    ]     Exception Caches                  0 us
[1.361s][info][gc,stats    ] Concurrent Strong Roots            1079 us, parallelism: 0.94x
[1.361s][info][gc,stats    ]   CSR: <total>                     1009 us
[1.361s][info][gc,stats    ]   CSR: VM Strong Roots               27 us, workers (us):  26,   1, ---, ---, ---, ---, ---, ---, 
[1.361s][info][gc,stats    ]   CSR: CLDG Roots                   982 us, workers (us): 982, ---, ---, ---, ---, ---, ---, ---, 
[1.361s][info][gc,stats    ] Concurrent Evacuation              8873 us
[1.361s][info][gc,stats    ] Pause Init Update Refs (G)          155 us
[1.361s][info][gc,stats    ] Pause Init Update Refs (N)           50 us
[1.361s][info][gc,stats    ]   Manage GCLABs                       5 us
[1.361s][info][gc,stats    ] Concurrent Update Refs             4609 us
[1.362s][info][gc,stats    ] Concurrent Update Thread Roots      425 us
[1.362s][info][gc,stats    ] Pause Final Update Refs (G)         190 us
[1.362s][info][gc,stats    ] Pause Final Update Refs (N)          92 us
[1.362s][info][gc,stats    ]   Update Region States               15 us
[1.362s][info][gc,stats    ]   Trash Collection Set                3 us
[1.362s][info][gc,stats    ]   Rebuild Free Set                   20 us
[1.362s][info][gc,stats    ] Concurrent Cleanup                   82 us
[1.362s][info][gc,stats    ] 
[1.362s][info][gc,stats    ] Allocation pacing accrued:
[1.362s][info][gc,stats    ]       0 of  1351 ms (  0.0%): <total>
[1.362s][info][gc,stats    ]       0 of  1351 ms (  0.0%): <average total>
[1.362s][info][gc,stats    ] 
[1.362s][info][gc,metaspace] Metaspace: 21239K(21568K)->21621K(21952K) NonClass: 18902K(19072K)->19225K(19392K) Class: 2337K(2496K)->2396K(2560K)
[1.362s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[7.765s][info][gc          ] Cancelling GC: Stopping VM
[7.766s][info][gc,heap,exit] Heap
[7.766s][info][gc,heap,exit] Shenandoah Heap
[7.766s][info][gc,heap,exit]  1984M max, 1984M soft max, 133M committed, 38428K used
[7.766s][info][gc,heap,exit]  3969 x 512K regions
[7.766s][info][gc,heap,exit] Status: cancelled
[7.766s][info][gc,heap,exit] Reserved region:
[7.766s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[7.766s][info][gc,heap,exit] Collection set:
[7.766s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[7.766s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[7.766s][info][gc,heap,exit] 
[7.766s][info][gc,heap,exit]  Metaspace       used 25417K, committed 25792K, reserved 1114112K
[7.766s][info][gc,heap,exit]   class space    used 2927K, committed 3072K, reserved 1048576K
[7.767s][info][gc,stats    ] 
[7.767s][info][gc,stats    ] GC STATISTICS:
[7.767s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[7.767s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[7.767s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[7.767s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[7.767s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[7.767s][info][gc,stats    ] 
[7.767s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[7.767s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[7.767s][info][gc,stats    ] 
[7.767s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[7.767s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[7.767s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[7.767s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[7.767s][info][gc,stats    ] 
[7.767s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[7.767s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[7.767s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[7.767s][info][gc,stats    ]   Raise max pacing delay with care.
[7.767s][info][gc,stats    ] 
[7.767s][info][gc,stats    ] Concurrent Reset               =    0.001 s (a =      631 us) (n =     1) (lvls, us =      631,      631,      631,      631,      631)
[7.767s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      855 us) (n =     1) (lvls, us =      855,      855,      855,      855,      855)
[7.767s][info][gc,stats    ] Pause Init Mark (N)            =    0.001 s (a =      611 us) (n =     1) (lvls, us =      609,      609,      609,      609,      611)
[7.768s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       31 us) (n =     1) (lvls, us =       31,       31,       31,       31,       31)
[7.768s][info][gc,stats    ] Concurrent Mark Roots          =    0.003 s (a =     3260 us) (n =     1) (lvls, us =     3242,     3242,     3242,     3242,     3260)
[7.768s][info][gc,stats    ]   CMR: <total>                 =    0.005 s (a =     4960 us) (n =     1) (lvls, us =     4941,     4941,     4941,     4941,     4960)
[7.768s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1339 us) (n =     1) (lvls, us =     1328,     1328,     1328,     1328,     1339)
[7.768s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.001 s (a =      905 us) (n =     1) (lvls, us =      904,      904,      904,      904,      905)
[7.768s][info][gc,stats    ]   CMR: CLDG Roots              =    0.003 s (a =     2716 us) (n =     1) (lvls, us =     2715,     2715,     2715,     2715,     2716)
[7.768s][info][gc,stats    ] Concurrent Marking             =    0.011 s (a =    10911 us) (n =     1) (lvls, us =    10742,    10742,    10742,    10742,    10911)
[7.768s][info][gc,stats    ] Pause Final Mark (G)           =    0.000 s (a =      382 us) (n =     1) (lvls, us =      381,      381,      381,      381,      382)
[7.768s][info][gc,stats    ] Pause Final Mark (N)           =    0.000 s (a =      288 us) (n =     1) (lvls, us =      287,      287,      287,      287,      288)
[7.768s][info][gc,stats    ]   Finish Mark                  =    0.000 s (a =      115 us) (n =     1) (lvls, us =      113,      113,      113,      113,      115)
[7.768s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[7.768s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       75 us) (n =     1) (lvls, us =       75,       75,       75,       75,       75)
[7.768s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[7.768s][info][gc,stats    ] Concurrent Thread Roots        =    0.000 s (a =      202 us) (n =     1) (lvls, us =      201,      201,      201,      201,      202)
[7.768s][info][gc,stats    ]   CTR: <total>                 =    0.000 s (a =      247 us) (n =     1) (lvls, us =      246,      246,      246,      246,      247)
[7.768s][info][gc,stats    ]   CTR: Thread Roots            =    0.000 s (a =      247 us) (n =     1) (lvls, us =      246,      246,      246,      246,      247)
[7.768s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      470 us) (n =     1) (lvls, us =      469,      469,      469,      469,      470)
[7.768s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      349 us) (n =     1) (lvls, us =      348,      348,      348,      348,      349)
[7.768s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      349 us) (n =     1) (lvls, us =      348,      348,      348,      348,      349)
[7.768s][info][gc,stats    ] Concurrent Weak Roots          =    0.004 s (a =     4276 us) (n =     1) (lvls, us =     4258,     4258,     4258,     4258,     4276)
[7.768s][info][gc,stats    ]   Roots                        =    0.002 s (a =     1622 us) (n =     1) (lvls, us =     1621,     1621,     1621,     1621,     1622)
[7.768s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     2555 us) (n =     1) (lvls, us =     2539,     2539,     2539,     2539,     2555)
[7.768s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      685 us) (n =     1) (lvls, us =      684,      684,      684,      684,      685)
[7.768s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1857 us) (n =     1) (lvls, us =     1855,     1855,     1855,     1855,     1857)
[7.768s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       12 us) (n =     1) (lvls, us =       12,       12,       12,       12,       12)
[7.768s][info][gc,stats    ]   Rendezvous                   =    0.003 s (a =     2595 us) (n =     1) (lvls, us =     2578,     2578,     2578,     2578,     2595)
[7.769s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       79 us) (n =     1) (lvls, us =       79,       79,       79,       79,       79)
[7.769s][info][gc,stats    ] Concurrent Class Unloading     =    0.006 s (a =     6060 us) (n =     1) (lvls, us =     6055,     6055,     6055,     6055,     6060)
[7.769s][info][gc,stats    ]   Unlink Stale                 =    0.002 s (a =     1683 us) (n =     1) (lvls, us =     1680,     1680,     1680,     1680,     1683)
[7.769s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =       52 us) (n =     1) (lvls, us =       52,       52,       52,       52,       52)
[7.769s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.769s][info][gc,stats    ]     Code Roots                 =    0.002 s (a =     1630 us) (n =     1) (lvls, us =     1621,     1621,     1621,     1621,     1630)
[7.769s][info][gc,stats    ]   Rendezvous                   =    0.001 s (a =      834 us) (n =     1) (lvls, us =      832,      832,      832,      832,      834)
[7.769s][info][gc,stats    ]   Purge Unlinked               =    0.003 s (a =     3487 us) (n =     1) (lvls, us =     3477,     3477,     3477,     3477,     3487)
[7.769s][info][gc,stats    ]     Code Roots                 =    0.003 s (a =     3476 us) (n =     1) (lvls, us =     3457,     3457,     3457,     3457,     3476)
[7.769s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       10 us) (n =     1) (lvls, us =       10,       10,       10,       10,       10)
[7.769s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.769s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1079 us) (n =     1) (lvls, us =     1074,     1074,     1074,     1074,     1079)
[7.769s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1009 us) (n =     1) (lvls, us =      996,      996,      996,      996,     1009)
[7.769s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =       27 us) (n =     1) (lvls, us =       27,       27,       27,       27,       27)
[7.769s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =      982 us) (n =     1) (lvls, us =      982,      982,      982,      982,      982)
[7.769s][info][gc,stats    ] Concurrent Evacuation          =    0.009 s (a =     8873 us) (n =     1) (lvls, us =     8867,     8867,     8867,     8867,     8873)
[7.769s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      155 us) (n =     1) (lvls, us =      154,      154,      154,      154,      155)
[7.769s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       50 us) (n =     1) (lvls, us =       50,       50,       50,       50,       50)
[7.769s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[7.769s][info][gc,stats    ] Concurrent Update Refs         =    0.005 s (a =     4609 us) (n =     1) (lvls, us =     4590,     4590,     4590,     4590,     4609)
[7.769s][info][gc,stats    ] Concurrent Update Thread Roots =    0.000 s (a =      425 us) (n =     1) (lvls, us =      424,      424,      424,      424,      425)
[7.769s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      190 us) (n =     1) (lvls, us =      189,      189,      189,      189,      190)
[7.769s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =       92 us) (n =     1) (lvls, us =       91,       91,       91,       91,       92)
[7.769s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       15 us) (n =     1) (lvls, us =       15,       15,       15,       15,       15)
[7.769s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        3 us) (n =     1) (lvls, us =        3,        3,        3,        3,        3)
[7.769s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       20 us) (n =     1) (lvls, us =       20,       20,       20,       20,       20)
[7.770s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       82 us) (n =     1) (lvls, us =       82,       82,       82,       82,       82)
[7.770s][info][gc,stats    ] 
[7.770s][info][gc,stats    ] 
[7.770s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[7.770s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[7.770s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[7.770s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[7.770s][info][gc,stats    ] 
[7.770s][info][gc,stats    ]     1 successful concurrent GCs
[7.770s][info][gc,stats    ]       0 invoked explicitly
[7.770s][info][gc,stats    ]       0 invoked implicitly
[7.770s][info][gc,stats    ] 
[7.770s][info][gc,stats    ]     0 Degenerated GCs
[7.770s][info][gc,stats    ]       0 caused by allocation failure
[7.770s][info][gc,stats    ]       0 upgraded to Full GC
[7.770s][info][gc,stats    ] 
[7.770s][info][gc,stats    ]     0 Full GCs
[7.770s][info][gc,stats    ]       0 invoked explicitly
[7.770s][info][gc,stats    ]       0 invoked implicitly
[7.770s][info][gc,stats    ]       0 caused by allocation failure
[7.770s][info][gc,stats    ]       0 upgraded from Degenerated GC
[7.770s][info][gc,stats    ] 
[7.770s][info][gc,stats    ] 
