[0.014s][info][gc] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.015s][info][gc] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.015s][info][gc] Using Shenandoah
[0.047s][info][gc,ergo] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[0.048s][info][gc,init] Version: 21.0.7+6-Ubuntu-0ubuntu122.04 (release)
[0.048s][info][gc,init] CPUs: 4 total, 4 available
[0.048s][info][gc,init] Memory: 7937M
[0.048s][info][gc,init] Large Page Support: Disabled
[0.048s][info][gc,init] NUMA Support: Disabled
[0.048s][info][gc,init] Compressed Oops: Enabled (32-bit)
[0.048s][info][gc,init] Heap Min Capacity: 6656K
[0.048s][info][gc,init] Heap Initial Capacity: 127488K
[0.048s][info][gc,init] Heap Max Capacity: 2032128K
[0.048s][info][gc,init] Pre-touch: Enabled
[0.048s][info][gc,init] Mode: Snapshot-At-The-Beginning (SATB)
[0.048s][info][gc,init] Heuristics: Adaptive
[0.048s][info][gc,init] Heap Region Count: 3969
[0.048s][info][gc,init] Heap Region Size: 512K
[0.048s][info][gc,init] TLAB Size Max: 512K
[0.048s][info][gc,init] Humongous Object Threshold: 512K
[0.048s][info][gc,init] Parallel Workers: 8
[0.048s][info][gc,init] Concurrent Workers: 2
[0.058s][info][gc,metaspace] CDS archive(s) mapped at: [0x00007f8adb000000-0x00007f8adbc97000-0x00007f8adbc97000), size 13201408, SharedBaseAddress: 0x00007f8adb000000, ArchiveRelocationMode: 1.
[0.058s][info][gc,metaspace] Compressed class space mapped at: 0x00007f8adc000000-0x00007f8b1c000000, reserved size: 1073741824
[0.058s][info][gc,metaspace] Narrow klass base: 0x00007f8adb000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
[1.291s][info][gc          ] Trigger: Metadata GC Threshold
[1.291s][info][gc,ergo     ] Free: 1790M, Max: 512K regular, 1790M humongous, Frag: 0% external, 0% internal; Reserve: 101888K, Max: 512K
[1.291s][info][gc,start    ] GC(0) Concurrent reset
[1.291s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reset
[1.291s][info][gc,ergo     ] GC(0) Pacer for Reset. Non-Taxable: 1984M
[1.292s][info][gc          ] GC(0) Concurrent reset 0.384ms
[1.292s][info][gc,start    ] GC(0) Pause Init Mark (unload classes)
[1.292s][info][gc,task     ] GC(0) Using 8 of 8 workers for init marking
[1.292s][info][gc,ergo     ] GC(0) Pacer for Mark. Expected Live: 198M, Free: 1790M, Non-Taxable: 179M, Alloc Tax Rate: 0.1x
[1.292s][info][gc          ] GC(0) Pause Init Mark (unload classes) 0.122ms
[1.292s][info][gc,start    ] GC(0) Concurrent marking roots
[1.292s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking roots
[1.293s][info][gc          ] GC(0) Concurrent marking roots 1.095ms
[1.293s][info][gc,start    ] GC(0) Concurrent marking (unload classes)
[1.293s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent marking
[1.303s][info][gc          ] GC(0) Concurrent marking (unload classes) 9.307ms
[1.303s][info][gc,start    ] GC(0) Pause Final Mark (unload classes)
[1.303s][info][gc,task     ] GC(0) Using 8 of 8 workers for final marking
[1.303s][info][gc,ergo     ] GC(0) Adaptive CSet Selection. Target Free: 281M, Actual Free: 1893M, Max CSet: 84672K, Min Garbage: 0B
[1.303s][info][gc,ergo     ] GC(0) Collectable Garbage: 82094K (99%), Immediate: 5343K (6%), CSet: 76751K (92%)
[1.303s][info][gc,ergo     ] GC(0) Pacer for Evacuation. Used CSet: 84480K, Free: 1794M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.303s][info][gc          ] GC(0) Pause Final Mark (unload classes) 0.286ms
[1.303s][info][gc,start    ] GC(0) Concurrent thread roots
[1.303s][info][gc,task     ] GC(0) Using 2 of 8 workers for Concurrent thread roots
[1.304s][info][gc          ] GC(0) Concurrent thread roots 0.594ms
[1.304s][info][gc,start    ] GC(0) Concurrent weak references
[1.304s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak references
[1.304s][info][gc,ref      ] GC(0) Encountered references: Soft: 3955, Weak: 2127, Final: 20, Phantom: 794
[1.304s][info][gc,ref      ] GC(0) Discovered  references: Soft: 0, Weak: 1242, Final: 16, Phantom: 484
[1.304s][info][gc,ref      ] GC(0) Enqueued    references: Soft: 0, Weak: 480, Final: 0, Phantom: 315
[1.304s][info][gc          ] GC(0) Concurrent weak references 0.427ms
[1.304s][info][gc,start    ] GC(0) Concurrent weak roots
[1.304s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent weak root
[1.306s][info][gc          ] GC(0) Concurrent weak roots 1.796ms
[1.306s][info][gc,start    ] GC(0) Concurrent cleanup
[1.306s][info][gc          ] GC(0) Concurrent cleanup 96M->92M(125M) 0.171ms
[1.306s][info][gc,ergo     ] GC(0) Free: 1793M, Max: 512K regular, 1788M humongous, Frag: 1% external, 0% internal; Reserve: 101224K, Max: 512K
[1.307s][info][gc,start    ] GC(0) Concurrent class unloading
[1.307s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent class unloading
[1.313s][info][gc          ] GC(0) Concurrent class unloading 6.331ms
[1.313s][info][gc,start    ] GC(0) Concurrent strong roots
[1.313s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent strong root
[1.314s][info][gc          ] GC(0) Concurrent strong roots 1.297ms
[1.314s][info][gc,start    ] GC(0) Concurrent evacuation
[1.314s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent evacuation
[1.321s][info][gc          ] GC(0) Concurrent evacuation 6.445ms
[1.321s][info][gc,start    ] GC(0) Pause Init Update Refs
[1.321s][info][gc,ergo     ] GC(0) Pacer for Update Refs. Used: 100M, Free: 1793M, Non-Taxable: 179M, Alloc Tax Rate: 1.1x
[1.321s][info][gc          ] GC(0) Pause Init Update Refs 0.055ms
[1.321s][info][gc,start    ] GC(0) Concurrent update references
[1.321s][info][gc,task     ] GC(0) Using 2 of 8 workers for concurrent reference update
[1.326s][info][gc          ] GC(0) Concurrent update references 5.289ms
[1.326s][info][gc,start    ] GC(0) Concurrent update thread roots
[1.327s][info][gc          ] GC(0) Concurrent update thread roots 0.556ms
[1.327s][info][gc,start    ] GC(0) Pause Final Update Refs
[1.327s][info][gc,task     ] GC(0) Using 8 of 8 workers for final reference update
[1.327s][info][gc          ] GC(0) Pause Final Update Refs 0.091ms
[1.327s][info][gc,start    ] GC(0) Concurrent cleanup
[1.327s][info][gc          ] GC(0) Concurrent cleanup 100M->17M(133M) 0.070ms
[1.327s][info][gc,ergo     ] Free: 1866M, Max: 512K regular, 1779M humongous, Frag: 5% external, 0% internal; Reserve: 101888K, Max: 512K
[1.327s][info][gc,stats    ] 
[1.327s][info][gc,stats    ] All times are wall-clock times, except per-root-class counters, that are sum over
[1.327s][info][gc,stats    ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[1.327s][info][gc,stats    ] 
[1.327s][info][gc,stats    ] Concurrent Reset                    465 us
[1.327s][info][gc,stats    ] Pause Init Mark (G)                 558 us
[1.327s][info][gc,stats    ] Pause Init Mark (N)                 151 us
[1.327s][info][gc,stats    ]   Update Region States               27 us
[1.327s][info][gc,stats    ] Concurrent Mark Roots              1162 us, parallelism: 1.61x
[1.328s][info][gc,stats    ]   CMR: <total>                     1869 us
[1.328s][info][gc,stats    ]   CMR: Thread Roots                1066 us, workers (us): 750, 317, ---, ---, ---, ---, ---, ---, 
[1.328s][info][gc,stats    ]   CMR: VM Strong Roots              277 us, workers (us): 185,  92, ---, ---, ---, ---, ---, ---, 
[1.328s][info][gc,stats    ]   CMR: CLDG Roots                   527 us, workers (us): ---, 527, ---, ---, ---, ---, ---, ---, 
[1.328s][info][gc,stats    ] Concurrent Marking                 9377 us
[1.328s][info][gc,stats    ] Pause Final Mark (G)                409 us
[1.328s][info][gc,stats    ] Pause Final Mark (N)                292 us
[1.328s][info][gc,stats    ]   Finish Mark                       115 us
[1.328s][info][gc,stats    ]   Update Region States               34 us
[1.328s][info][gc,stats    ]   Choose Collection Set              75 us
[1.328s][info][gc,stats    ]   Rebuild Free Set                   17 us
[1.328s][info][gc,stats    ] Concurrent Thread Roots             648 us, parallelism: 1.47x
[1.328s][info][gc,stats    ]   CTR: <total>                      953 us
[1.328s][info][gc,stats    ]   CTR: Thread Roots                 953 us, workers (us): 417, 536, ---, ---, ---, ---, ---, ---, 
[1.328s][info][gc,stats    ] Concurrent Weak References          461 us, parallelism: 0.62x
[1.328s][info][gc,stats    ]   CWRF: <total>                     287 us
[1.328s][info][gc,stats    ]   CWRF: Weak References             287 us, workers (us): 105, 183, ---, ---, ---, ---, ---, ---, 
[1.328s][info][gc,stats    ] Concurrent Weak Roots              1890 us
[1.328s][info][gc,stats    ]   Roots                            1495 us, parallelism: 1.81x
[1.328s][info][gc,stats    ]     CWR: <total>                   2709 us
[1.328s][info][gc,stats    ]     CWR: Code Cache Roots           888 us, workers (us): 465, 423, ---, ---, ---, ---, ---, ---, 
[1.328s][info][gc,stats    ]     CWR: VM Weak Roots             1805 us, workers (us): 955, 850, ---, ---, ---, ---, ---, ---, 
[1.328s][info][gc,stats    ]     CWR: CLDG Roots                  16 us, workers (us): ---,  16, ---, ---, ---, ---, ---, ---, 
[1.328s][info][gc,stats    ]   Rendezvous                        235 us
[1.328s][info][gc,stats    ] Concurrent Cleanup                  237 us
[1.328s][info][gc,stats    ] Concurrent Class Unloading         6351 us
[1.328s][info][gc,stats    ]   Unlink Stale                     2168 us
[1.328s][info][gc,stats    ]     System Dictionary               150 us
[1.328s][info][gc,stats    ]     Weak Class Links                  0 us
[1.328s][info][gc,stats    ]     Code Roots                     2017 us
[1.328s][info][gc,stats    ]   Rendezvous                        181 us
[1.328s][info][gc,stats    ]   Purge Unlinked                   3866 us
[1.328s][info][gc,stats    ]     Code Roots                     3853 us
[1.328s][info][gc,stats    ]     CLDG                             13 us
[1.328s][info][gc,stats    ]     Exception Caches                  0 us
[1.328s][info][gc,stats    ] Concurrent Strong Roots            1311 us, parallelism: 1.12x
[1.328s][info][gc,stats    ]   CSR: <total>                     1474 us
[1.328s][info][gc,stats    ]   CSR: VM Strong Roots              276 us, workers (us): 269,   7, ---, ---, ---, ---, ---, ---, 
[1.328s][info][gc,stats    ]   CSR: CLDG Roots                  1198 us, workers (us): ---, 1198, ---, ---, ---, ---, ---, ---, 
[1.328s][info][gc,stats    ] Concurrent Evacuation              6523 us
[1.328s][info][gc,stats    ] Pause Init Update Refs (G)          232 us
[1.328s][info][gc,stats    ] Pause Init Update Refs (N)           63 us
[1.328s][info][gc,stats    ]   Manage GCLABs                       7 us
[1.328s][info][gc,stats    ] Concurrent Update Refs             5339 us
[1.328s][info][gc,stats    ] Concurrent Update Thread Roots      570 us
[1.328s][info][gc,stats    ] Pause Final Update Refs (G)         196 us
[1.328s][info][gc,stats    ] Pause Final Update Refs (N)         103 us
[1.328s][info][gc,stats    ]   Update Region States               37 us
[1.328s][info][gc,stats    ]   Trash Collection Set                5 us
[1.328s][info][gc,stats    ]   Rebuild Free Set                   22 us
[1.328s][info][gc,stats    ] Concurrent Cleanup                   79 us
[1.328s][info][gc,stats    ] 
[1.328s][info][gc,stats    ] Allocation pacing accrued:
[1.328s][info][gc,stats    ]       0 of  1281 ms (  0.0%): <total>
[1.328s][info][gc,stats    ]       0 of  1281 ms (  0.0%): <average total>
[1.328s][info][gc,stats    ] 
[1.328s][info][gc,metaspace] Metaspace: 21234K(21568K)->21490K(21824K) NonClass: 18898K(19072K)->19113K(19264K) Class: 2336K(2496K)->2376K(2560K)
[1.328s][info][gc,ergo     ] Pacer for Idle. Initial: 40642K, Alloc Tax Rate: 1.0x
[7.799s][info][gc          ] Cancelling GC: Stopping VM
[7.799s][info][gc,heap,exit] Heap
[7.799s][info][gc,heap,exit] Shenandoah Heap
[7.799s][info][gc,heap,exit]  1984M max, 1984M soft max, 133M committed, 38413K used
[7.799s][info][gc,heap,exit]  3969 x 512K regions
[7.799s][info][gc,heap,exit] Status: cancelled
[7.799s][info][gc,heap,exit] Reserved region:
[7.799s][info][gc,heap,exit]  - [0x0000000083f80000, 0x0000000100000000) 
[7.799s][info][gc,heap,exit] Collection set:
[7.799s][info][gc,heap,exit]  - map (vanilla): 0x000000000001107f
[7.799s][info][gc,heap,exit]  - map (biased):  0x0000000000010000
[7.799s][info][gc,heap,exit] 
[7.799s][info][gc,heap,exit]  Metaspace       used 25415K, committed 25728K, reserved 1114112K
[7.799s][info][gc,heap,exit]   class space    used 2924K, committed 3072K, reserved 1048576K
[7.799s][info][gc,stats    ] 
[7.799s][info][gc,stats    ] GC STATISTICS:
[7.799s][info][gc,stats    ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[7.799s][info][gc,stats    ]         and post-safepoint housekeeping. Use -Xlog:safepoint+stats to dissect.
[7.799s][info][gc,stats    ]   "(N)" (net) pauses are the times spent in the actual GC code.
[7.799s][info][gc,stats    ]   "a" is average time for each phase, look at levels to see if average makes sense.
[7.799s][info][gc,stats    ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[7.799s][info][gc,stats    ] 
[7.799s][info][gc,stats    ]   All times are wall-clock times, except per-root-class counters, that are sum over
[7.799s][info][gc,stats    ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[7.799s][info][gc,stats    ] 
[7.799s][info][gc,stats    ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[7.799s][info][gc,stats    ]   observed pacing delays may be higher than the threshold when paced thread spent more
[7.799s][info][gc,stats    ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[7.799s][info][gc,stats    ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[7.799s][info][gc,stats    ] 
[7.799s][info][gc,stats    ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[7.800s][info][gc,stats    ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[7.800s][info][gc,stats    ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[7.800s][info][gc,stats    ]   Raise max pacing delay with care.
[7.800s][info][gc,stats    ] 
[7.800s][info][gc,stats    ] Concurrent Reset               =    0.000 s (a =      465 us) (n =     1) (lvls, us =      465,      465,      465,      465,      465)
[7.800s][info][gc,stats    ] Pause Init Mark (G)            =    0.001 s (a =      558 us) (n =     1) (lvls, us =      557,      557,      557,      557,      558)
[7.800s][info][gc,stats    ] Pause Init Mark (N)            =    0.000 s (a =      151 us) (n =     1) (lvls, us =      150,      150,      150,      150,      151)
[7.800s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       27 us) (n =     1) (lvls, us =       27,       27,       27,       27,       27)
[7.800s][info][gc,stats    ] Concurrent Mark Roots          =    0.001 s (a =     1162 us) (n =     1) (lvls, us =     1152,     1152,     1152,     1152,     1162)
[7.800s][info][gc,stats    ]   CMR: <total>                 =    0.002 s (a =     1869 us) (n =     1) (lvls, us =     1855,     1855,     1855,     1855,     1869)
[7.800s][info][gc,stats    ]   CMR: Thread Roots            =    0.001 s (a =     1066 us) (n =     1) (lvls, us =     1055,     1055,     1055,     1055,     1066)
[7.800s][info][gc,stats    ]   CMR: VM Strong Roots         =    0.000 s (a =      277 us) (n =     1) (lvls, us =      275,      275,      275,      275,      277)
[7.800s][info][gc,stats    ]   CMR: CLDG Roots              =    0.001 s (a =      527 us) (n =     1) (lvls, us =      525,      525,      525,      525,      527)
[7.800s][info][gc,stats    ] Concurrent Marking             =    0.009 s (a =     9377 us) (n =     1) (lvls, us =     9375,     9375,     9375,     9375,     9377)
[7.800s][info][gc,stats    ] Pause Final Mark (G)           =    0.000 s (a =      409 us) (n =     1) (lvls, us =      408,      408,      408,      408,      409)
[7.800s][info][gc,stats    ] Pause Final Mark (N)           =    0.000 s (a =      292 us) (n =     1) (lvls, us =      291,      291,      291,      291,      292)
[7.800s][info][gc,stats    ]   Finish Mark                  =    0.000 s (a =      115 us) (n =     1) (lvls, us =      113,      113,      113,      113,      115)
[7.800s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       34 us) (n =     1) (lvls, us =       34,       34,       34,       34,       34)
[7.800s][info][gc,stats    ]   Choose Collection Set        =    0.000 s (a =       75 us) (n =     1) (lvls, us =       75,       75,       75,       75,       75)
[7.800s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[7.800s][info][gc,stats    ] Concurrent Thread Roots        =    0.001 s (a =      648 us) (n =     1) (lvls, us =      646,      646,      646,      646,      648)
[7.800s][info][gc,stats    ]   CTR: <total>                 =    0.001 s (a =      953 us) (n =     1) (lvls, us =      953,      953,      953,      953,      953)
[7.800s][info][gc,stats    ]   CTR: Thread Roots            =    0.001 s (a =      953 us) (n =     1) (lvls, us =      953,      953,      953,      953,      953)
[7.800s][info][gc,stats    ] Concurrent Weak References     =    0.000 s (a =      461 us) (n =     1) (lvls, us =      459,      459,      459,      459,      461)
[7.800s][info][gc,stats    ]   CWRF: <total>                =    0.000 s (a =      287 us) (n =     1) (lvls, us =      287,      287,      287,      287,      287)
[7.800s][info][gc,stats    ]   CWRF: Weak References        =    0.000 s (a =      287 us) (n =     1) (lvls, us =      287,      287,      287,      287,      287)
[7.800s][info][gc,stats    ] Concurrent Weak Roots          =    0.002 s (a =     1890 us) (n =     1) (lvls, us =     1875,     1875,     1875,     1875,     1890)
[7.800s][info][gc,stats    ]   Roots                        =    0.001 s (a =     1495 us) (n =     1) (lvls, us =     1484,     1484,     1484,     1484,     1495)
[7.800s][info][gc,stats    ]     CWR: <total>               =    0.003 s (a =     2709 us) (n =     1) (lvls, us =     2695,     2695,     2695,     2695,     2709)
[7.800s][info][gc,stats    ]     CWR: Code Cache Roots      =    0.001 s (a =      888 us) (n =     1) (lvls, us =      887,      887,      887,      887,      888)
[7.800s][info][gc,stats    ]     CWR: VM Weak Roots         =    0.002 s (a =     1805 us) (n =     1) (lvls, us =     1797,     1797,     1797,     1797,     1805)
[7.800s][info][gc,stats    ]     CWR: CLDG Roots            =    0.000 s (a =       16 us) (n =     1) (lvls, us =       16,       16,       16,       16,       16)
[7.800s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      235 us) (n =     1) (lvls, us =      234,      234,      234,      234,      235)
[7.800s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =      237 us) (n =     1) (lvls, us =      236,      236,      236,      236,      237)
[7.800s][info][gc,stats    ] Concurrent Class Unloading     =    0.006 s (a =     6351 us) (n =     1) (lvls, us =     6348,     6348,     6348,     6348,     6351)
[7.800s][info][gc,stats    ]   Unlink Stale                 =    0.002 s (a =     2168 us) (n =     1) (lvls, us =     2168,     2168,     2168,     2168,     2168)
[7.800s][info][gc,stats    ]     System Dictionary          =    0.000 s (a =      150 us) (n =     1) (lvls, us =      148,      148,      148,      148,      150)
[7.800s][info][gc,stats    ]     Weak Class Links           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.800s][info][gc,stats    ]     Code Roots                 =    0.002 s (a =     2017 us) (n =     1) (lvls, us =     2012,     2012,     2012,     2012,     2017)
[7.800s][info][gc,stats    ]   Rendezvous                   =    0.000 s (a =      181 us) (n =     1) (lvls, us =      180,      180,      180,      180,      181)
[7.800s][info][gc,stats    ]   Purge Unlinked               =    0.004 s (a =     3866 us) (n =     1) (lvls, us =     3848,     3848,     3848,     3848,     3866)
[7.800s][info][gc,stats    ]     Code Roots                 =    0.004 s (a =     3853 us) (n =     1) (lvls, us =     3848,     3848,     3848,     3848,     3853)
[7.800s][info][gc,stats    ]     CLDG                       =    0.000 s (a =       13 us) (n =     1) (lvls, us =       13,       13,       13,       13,       13)
[7.800s][info][gc,stats    ]     Exception Caches           =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[7.800s][info][gc,stats    ] Concurrent Strong Roots        =    0.001 s (a =     1311 us) (n =     1) (lvls, us =     1309,     1309,     1309,     1309,     1311)
[7.800s][info][gc,stats    ]   CSR: <total>                 =    0.001 s (a =     1474 us) (n =     1) (lvls, us =     1465,     1465,     1465,     1465,     1474)
[7.800s][info][gc,stats    ]   CSR: VM Strong Roots         =    0.000 s (a =      276 us) (n =     1) (lvls, us =      275,      275,      275,      275,      276)
[7.800s][info][gc,stats    ]   CSR: CLDG Roots              =    0.001 s (a =     1198 us) (n =     1) (lvls, us =     1191,     1191,     1191,     1191,     1198)
[7.800s][info][gc,stats    ] Concurrent Evacuation          =    0.007 s (a =     6523 us) (n =     1) (lvls, us =     6504,     6504,     6504,     6504,     6523)
[7.800s][info][gc,stats    ] Pause Init Update Refs (G)     =    0.000 s (a =      232 us) (n =     1) (lvls, us =      230,      230,      230,      230,      232)
[7.800s][info][gc,stats    ] Pause Init Update Refs (N)     =    0.000 s (a =       63 us) (n =     1) (lvls, us =       63,       63,       63,       63,       63)
[7.800s][info][gc,stats    ]   Manage GCLABs                =    0.000 s (a =        7 us) (n =     1) (lvls, us =        7,        7,        7,        7,        7)
[7.800s][info][gc,stats    ] Concurrent Update Refs         =    0.005 s (a =     5339 us) (n =     1) (lvls, us =     5332,     5332,     5332,     5332,     5339)
[7.800s][info][gc,stats    ] Concurrent Update Thread Roots =    0.001 s (a =      570 us) (n =     1) (lvls, us =      568,      568,      568,      568,      570)
[7.800s][info][gc,stats    ] Pause Final Update Refs (G)    =    0.000 s (a =      196 us) (n =     1) (lvls, us =      195,      195,      195,      195,      196)
[7.800s][info][gc,stats    ] Pause Final Update Refs (N)    =    0.000 s (a =      103 us) (n =     1) (lvls, us =      102,      102,      102,      102,      103)
[7.800s][info][gc,stats    ]   Update Region States         =    0.000 s (a =       37 us) (n =     1) (lvls, us =       37,       37,       37,       37,       37)
[7.800s][info][gc,stats    ]   Trash Collection Set         =    0.000 s (a =        5 us) (n =     1) (lvls, us =        5,        5,        5,        5,        5)
[7.800s][info][gc,stats    ]   Rebuild Free Set             =    0.000 s (a =       22 us) (n =     1) (lvls, us =       22,       22,       22,       22,       22)
[7.800s][info][gc,stats    ] Concurrent Cleanup             =    0.000 s (a =       79 us) (n =     1) (lvls, us =       79,       79,       79,       79,       79)
[7.800s][info][gc,stats    ] 
[7.800s][info][gc,stats    ] 
[7.800s][info][gc,stats    ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[7.800s][info][gc,stats    ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[7.800s][info][gc,stats    ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[7.800s][info][gc,stats    ] to avoid Degenerated and Full GC cycles.
[7.800s][info][gc,stats    ] 
[7.800s][info][gc,stats    ]     1 successful concurrent GCs
[7.800s][info][gc,stats    ]       0 invoked explicitly
[7.800s][info][gc,stats    ]       0 invoked implicitly
[7.800s][info][gc,stats    ] 
[7.800s][info][gc,stats    ]     0 Degenerated GCs
[7.800s][info][gc,stats    ]       0 caused by allocation failure
[7.800s][info][gc,stats    ]       0 upgraded to Full GC
[7.800s][info][gc,stats    ] 
[7.800s][info][gc,stats    ]     0 Full GCs
[7.800s][info][gc,stats    ]       0 invoked explicitly
[7.800s][info][gc,stats    ]       0 invoked implicitly
[7.801s][info][gc,stats    ]       0 caused by allocation failure
[7.801s][info][gc,stats    ]       0 upgraded from Degenerated GC
[7.801s][info][gc,stats    ] 
[7.801s][info][gc,stats    ] 
